import network
import urequests
import time
from machine import UART, Pin

bootpina5 = 5
bootpina4 = 4
pina5 = Pin(bootpina5, Pin.OUT)
pina4 = Pin(bootpina4, Pin.OUT)
pina5.value(1)
pina4.value(1)


# ==== 1. K·∫øt n·ªëi WiFi ====
def connect_wifi(ssid, password):
    wlan = network.WLAN(network.STA_IF)
    wlan.active(True)
    if not wlan.isconnected():
        print("ƒêang k·∫øt n·ªëi WiFi...")
        wlan.connect(ssid, password)
        while not wlan.isconnected():
            time.sleep(0.5)
    print("K·∫øt n·ªëi WiFi th√†nh c√¥ng:", wlan.ifconfig())

def ensure_wifi_connection(ssid, password):
    wlan = network.WLAN(network.STA_IF)
    while not wlan.isconnected():
        print("M·∫•t k·∫øt n·ªëi WiFi. ƒêang th·ª≠ k·∫øt n·ªëi l·∫°i...")
        if not connect_wifi(ssid, password):
            print("K·∫øt n·ªëi kh√¥ng th√†nh c√¥ng. S·∫Ω th·ª≠ l·∫°i sau 5 gi√¢y...")
            time.sleep(5)  # Ch·ªù 5 gi√¢y tr∆∞·ªõc khi th·ª≠ l·∫°i
        else:
            print("ƒê√£ k·∫øt n·ªëi WiFi th√†nh c√¥ng!")
    return True


# ==== 2. ƒê·ªçc version t·ª´ GitHub ====
def get_online_version(ver_url, ssid, password):
    try:
        ensure_wifi_connection(ssid, password)
        r = urequests.get(ver_url)
        version = r.text.strip()
        print("Version hi·ªán t·∫°i: ", version)
        r.close()
        return version
    except Exception as e:
        print("L·ªói khi l·∫•y ver.txt:", e)
        return None

# ==== 3. T·∫£i firmware v√† l∆∞u ====
def download_and_save_firmware(url, ssid, password, save_path="/blinkgithub.bin"):
    ensure_wifi_connection(ssid, password)
    print("ƒêang t·∫£i v√† l∆∞u firmware t·ª´:", url)
    try:
        r = urequests.get(url)
        if r.status_code != 200:
            r.close()
            print("Kh√¥ng t·∫£i ƒë∆∞·ª£c file:", r.status_code)
            return False

        with open(save_path, "wb") as f:
            total = 0
            chunk_size = 256
            while True:
                chunk = r.raw.read(chunk_size)
                if not chunk:
                    break
                f.write(chunk)
                total += len(chunk)
                print("ƒê√£ ghi:", total, "bytes")
                time.sleep(0.01)

        r.close()
        print("ƒê√£ l∆∞u firmware v√†o:", save_path)
        return True
    except Exception as e:
        print("L·ªói khi t·∫£i ho·∫∑c l∆∞u:", e)
        return False

# ==== 4. G·ª≠i file qua UART ====
def send_firmware_uart(file_path, tx_pin=17, rx_pin=16, baudrate=9600):
    print("ƒêang g·ª≠i firmware qua UART...")
    uart = UART(2, baudrate=baudrate, tx=tx_pin, rx=rx_pin)

    try:
        with open(file_path, 'rb') as f:
            total = 0
            while True:
                byte = f.read(1)
                if not byte:
                    break
                uart.write(byte)
                total += 1
                if total % 256 == 0:
                    print(f"üì§ ƒê√£ g·ª≠i: {total} bytes")
                #time.sleep(0.01)  # Delay 5ms
        print("G·ª≠i ho√†n t·∫•t.")
    except Exception as e:
        print("L·ªói khi g·ª≠i UART:", e)

# ==== 5. Main loop ki·ªÉm tra version ====
def check_and_update_loop():
    version_url = "https://raw.githubusercontent.com/DuongSlayer-Uet/Embedded/refs/heads/main/Firmware/version.txt"
    firmware_url = "https://github.com/DuongSlayer-Uet/Embedded/raw/refs/heads/main/Firmware/blinkled.bin"
    firmware_path = "blinkgithub.bin"
    last_version = None
    ssid = "Truong"
    password = "07052004"
    connect_wifi(ssid, password)
    while True:
        print("Ki·ªÉm tra version m·ªõi...")
        current_version = get_online_version(version_url, ssid, password)
        if current_version and current_version != last_version:
            print(f"Ph√°t hi·ªán version m·ªõi: {current_version}")
            if download_and_save_firmware(firmware_url, ssid, password, firmware_path):
                # Reset bootpin -> k√≠ch ho·∫°t bootloader STM32
                pina5.value(0)
                pina4.value(0)
                time.sleep(0.5)
                send_firmware_uart(firmware_path)
                time.sleep(0.5)
                pina5.value(1)
                pina4.value(1)
                last_version = current_version
        else:
            print("Kh√¥ng c√≥ c·∫≠p nh·∫≠t m·ªõi.")

        time.sleep(10)
# ==== Th·ª±c thi ch∆∞∆°ng tr√¨nh ch√≠nh ====
check_and_update_loop()
