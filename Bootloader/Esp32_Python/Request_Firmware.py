"""
=========================================
ESP32 Firmware OTA Updater via Github API
=========================================

Author: Duong (DuongSlayer-UET)
Board: ESP32
Objective:
    - K·∫øt n·ªëi wifi
    - ƒê·ªãnh k·ª≥ ki·ªÉm tra file version.txt tr√™n github (m·ªói 10s)
    - S·ª≠ d·ª•ng github API ƒë·ªÉ ch·ªëng cache (limit time response)
    - H·ªó tr·ª£ reconnect khi ng·∫Øt wifi
Feature:
    - Token github, l√™n t·ªõi 5000 requests/hour
    - D·ªÖ b·∫£o tr√¨,...
Github repo: https://github.com/DuongSlayer-Uet/Embedded

Update time: 20/6/2025
"""
import network
import urequests
import time
import urequests
import ubinascii
import ujson
from machine import UART, Pin

tx_pin = 17
rx_pin = 16
baudrate = 9600
# B·∫≠t uart2
uart = UART(2, baudrate=baudrate, tx=tx_pin, rx=rx_pin)

# Github Token
# T·ª± th√™m token v√†o, github kh√¥ng cho push file ch·ª©a token
# GITHUB_TOKEN = "???"

# ==== 1. K·∫øt n·ªëi WiFi ====


def connect_wifi(ssid, password):
    wlan = network.WLAN(network.STA_IF)
    wlan.active(True)
    if not wlan.isconnected():
        print("ƒêang k·∫øt n·ªëi WiFi...")
        wlan.connect(ssid, password)
        while not wlan.isconnected():
            time.sleep(0.5)
    print("K·∫øt n·ªëi WiFi th√†nh c√¥ng:", wlan.ifconfig())


def ensure_wifi_connection(ssid, password):
    wlan = network.WLAN(network.STA_IF)
    while not wlan.isconnected():
        print("M·∫•t k·∫øt n·ªëi WiFi. ƒêang th·ª≠ k·∫øt n·ªëi l·∫°i...")
        if not connect_wifi(ssid, password):
            print("K·∫øt n·ªëi kh√¥ng th√†nh c√¥ng. S·∫Ω th·ª≠ l·∫°i sau 5 gi√¢y...")
            time.sleep(5)  # Ch·ªù 5 gi√¢y tr∆∞·ªõc khi th·ª≠ l·∫°i
        else:
            print("ƒê√£ k·∫øt n·ªëi WiFi th√†nh c√¥ng!")
    return True


# ==== 2. ƒê·ªçc version t·ª´ GitHub ====
def get_online_version(ver_url, ssid, password):
    try:
        ensure_wifi_connection(ssid, password)
        r = urequests.get(ver_url)
        version = r.text.strip()
        print("Version hi·ªán t·∫°i: ", version)
        r.close()
        return version
    except Exception as e:
        print("L·ªói khi l·∫•y ver.txt:", e)
        return None

# ==== 3. T·∫£i firmware v√† l∆∞u ====


def download_and_save_firmware(url, ssid, password, save_path="/blinkgithub.bin"):
    ensure_wifi_connection(ssid, password)
    print("ƒêang t·∫£i v√† l∆∞u firmware t·ª´:", url)
    try:
        r = urequests.get(url)
        if r.status_code != 200:
            r.close()
            print("Kh√¥ng t·∫£i ƒë∆∞·ª£c file:", r.status_code)
            return False

        with open(save_path, "wb") as f:
            total = 0
            chunk_size = 256
            while True:
                chunk = r.raw.read(chunk_size)
                if not chunk:
                    break
                f.write(chunk)
                total += len(chunk)
                print("ƒê√£ ghi:", total, "bytes")
                time.sleep(0.01)

        r.close()
        print("ƒê√£ l∆∞u firmware v√†o:", save_path)
        return True
    except Exception as e:
        print("L·ªói khi t·∫£i ho·∫∑c l∆∞u:", e)
        return False

# ==== 4. G·ª≠i file qua UART ====


def send_firmware_uart(file_path):
    print("ƒêang g·ª≠i firmware qua UART...")

    try:
        with open(file_path, 'rb') as f:
            total = 0
            while True:
                byte = f.read(1)
                if not byte:
                    break
                uart.write(byte)
                total += 1
                if total % 256 == 0:
                    print(f"üì§ ƒê√£ g·ª≠i: {total} bytes")
                # time.sleep(0.05)  # Delay 5ms
        print("G·ª≠i ho√†n t·∫•t.")
    except Exception as e:
        print("L·ªói khi g·ª≠i UART:", e)


def get_online_version_github_api(api_url, ssid, password):
    try:
        ensure_wifi_connection(ssid, password)
        headers = {
            "User-Agent": "ESP32-Client",
            "Authorization": "token " + GITHUB_TOKEN
        }
        r = urequests.get(api_url, headers=headers)
        if r.status_code == 200:
            json_data = r.json()
            content_encoded = json_data['content']
            content_decoded = ubinascii.a2b_base64(
                content_encoded).decode('utf-8').strip()
            print("Version hi·ªán t·∫°i (API):", content_decoded)
            return content_decoded
        else:
            print("L·ªói HTTP:", r.status_code)
            return None
    except Exception as e:
        print("L·ªói khi l·∫•y version t·ª´ API:", e)
        return None


def download_firmware_github_api(api_url, ssid, password, save_path="/blinkgithub.bin"):
    try:
        ensure_wifi_connection(ssid, password)
        headers = {
            "User-Agent": "ESP32-Client",
            "Authorization": "token " + GITHUB_TOKEN
        }
        print("ƒêang t·∫£i firmware (API)...")
        r = urequests.get(api_url, headers=headers)
        if r.status_code == 200:
            json_data = r.json()
            content_encoded = json_data['content']
            content_binary = ubinascii.a2b_base64(content_encoded)
            with open(save_path, "wb") as f:
                f.write(content_binary)
            print("ƒê√£ l∆∞u firmware t·ª´ API v√†o:", save_path)
            return True
        else:
            print("L·ªói HTTP:", r.status_code)
            return False
    except Exception as e:
        print("L·ªói khi t·∫£i firmware API:", e)
        return False


# ==== 5. Main loop ki·ªÉm tra version ====
def check_and_update_loop():
    base_version_url = "https://api.github.com/repos/DuongSlayer-Uet/Embedded/contents/Firmware/version.txt"
    firmware_api_url = "https://api.github.com/repos/DuongSlayer-Uet/Embedded/contents/Firmware/blinkled.bin"
    firmware_path = "blinkgithub.bin"
    last_version = None
    ssid = "Truong"
    password = "07052004"
    connect_wifi(ssid, password)
    while True:
        print("Ki·ªÉm tra version m·ªõi...")
        current_version = get_online_version_github_api(
            base_version_url, ssid, password)
        # check n·∫øu c√≥ s·ª± kh√°c bi·ªát
        if current_version and current_version != last_version:
            print(f"Ph√°t hi·ªán version m·ªõi: {current_version}")
            # tr√°nh cache cho c·∫£ firmware
            if download_firmware_github_api(firmware_api_url, ssid, password, firmware_path):
                uart.write(b'A')
                time.sleep(2)
                # B·∫Øt ƒë·∫ßu g·ª≠i firmware
                uart.write(b"START")
                print("ƒê√£ g·ª≠i START")
                time.sleep(0.5)

                send_firmware_uart(firmware_path)

                # Stop g·ª≠i
                uart.write(b"STOPP")
                print("ƒê√£ g·ª≠i STOP")

                time.sleep(0.5)

                last_version = current_version
        else:
            print("Kh√¥ng c√≥ c·∫≠p nh·∫≠t m·ªõi.")

        time.sleep(10)


# ==== Th·ª±c thi ch∆∞∆°ng tr√¨nh ch√≠nh ====
check_and_update_loop()
