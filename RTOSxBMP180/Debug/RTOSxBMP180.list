
RTOSxBMP180.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003210  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08003320  08003320  00004320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033dc  080033dc  00005060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080033dc  080033dc  00005060  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080033dc  080033dc  00005060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033dc  080033dc  000043dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080033e0  080033e0  000043e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080033e4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001158  20000060  08003444  00005060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200011b8  08003444  000051b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007af3  00000000  00000000  00005089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f0d  00000000  00000000  0000cb7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000948  00000000  00000000  0000ea90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006d9  00000000  00000000  0000f3d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018424  00000000  00000000  0000fab1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bfa9  00000000  00000000  00027ed5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000888ed  00000000  00000000  00033e7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bc76b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027fc  00000000  00000000  000bc7b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000befac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08003308 	.word	0x08003308

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08003308 	.word	0x08003308

08000150 <BMP180_I2C1_MasterConfig>:
	BMP180_I2C1->CR1 |= (1 << 10);			// ACK enable
	BMP180_I2C1->CR1 |= (1 << 0);			// Peripheral enable
}

void BMP180_I2C1_MasterConfig(void)
{
 8000150:	b480      	push	{r7}
 8000152:	af00      	add	r7, sp, #0
	// 1. Bật clock

	RCC->APB2ENR |= (1 << 3);		// GPIOB
 8000154:	4b21      	ldr	r3, [pc, #132]	@ (80001dc <BMP180_I2C1_MasterConfig+0x8c>)
 8000156:	699b      	ldr	r3, [r3, #24]
 8000158:	4a20      	ldr	r2, [pc, #128]	@ (80001dc <BMP180_I2C1_MasterConfig+0x8c>)
 800015a:	f043 0308 	orr.w	r3, r3, #8
 800015e:	6193      	str	r3, [r2, #24]

	// 2. Cấu hình PB6 (SCL), PB7 (SDA) = Alternate function, Open-drain, 2MHz
	GPIOB->CRL &= ~(0xF << 24);		// PB6
 8000160:	4b1f      	ldr	r3, [pc, #124]	@ (80001e0 <BMP180_I2C1_MasterConfig+0x90>)
 8000162:	681b      	ldr	r3, [r3, #0]
 8000164:	4a1e      	ldr	r2, [pc, #120]	@ (80001e0 <BMP180_I2C1_MasterConfig+0x90>)
 8000166:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 800016a:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |=  (0xF << 24);		// AF OD, output 2MHz
 800016c:	4b1c      	ldr	r3, [pc, #112]	@ (80001e0 <BMP180_I2C1_MasterConfig+0x90>)
 800016e:	681b      	ldr	r3, [r3, #0]
 8000170:	4a1b      	ldr	r2, [pc, #108]	@ (80001e0 <BMP180_I2C1_MasterConfig+0x90>)
 8000172:	f043 6370 	orr.w	r3, r3, #251658240	@ 0xf000000
 8000176:	6013      	str	r3, [r2, #0]
	GPIOB->CRL &= ~(0xF << 28);		// PB7
 8000178:	4b19      	ldr	r3, [pc, #100]	@ (80001e0 <BMP180_I2C1_MasterConfig+0x90>)
 800017a:	681b      	ldr	r3, [r3, #0]
 800017c:	4a18      	ldr	r2, [pc, #96]	@ (80001e0 <BMP180_I2C1_MasterConfig+0x90>)
 800017e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8000182:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |=  (0xF << 28);
 8000184:	4b16      	ldr	r3, [pc, #88]	@ (80001e0 <BMP180_I2C1_MasterConfig+0x90>)
 8000186:	681b      	ldr	r3, [r3, #0]
 8000188:	4a15      	ldr	r2, [pc, #84]	@ (80001e0 <BMP180_I2C1_MasterConfig+0x90>)
 800018a:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800018e:	6013      	str	r3, [r2, #0]

	// 3. Reset BMP180_I2C1
	RCC->APB1ENR |= (1 << 21);		// BMP180_I2C1
 8000190:	4b12      	ldr	r3, [pc, #72]	@ (80001dc <BMP180_I2C1_MasterConfig+0x8c>)
 8000192:	69db      	ldr	r3, [r3, #28]
 8000194:	4a11      	ldr	r2, [pc, #68]	@ (80001dc <BMP180_I2C1_MasterConfig+0x8c>)
 8000196:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800019a:	61d3      	str	r3, [r2, #28]

	BMP180_I2C1->CR1 |=  (1 << 15);
 800019c:	4b11      	ldr	r3, [pc, #68]	@ (80001e4 <BMP180_I2C1_MasterConfig+0x94>)
 800019e:	681b      	ldr	r3, [r3, #0]
 80001a0:	4a10      	ldr	r2, [pc, #64]	@ (80001e4 <BMP180_I2C1_MasterConfig+0x94>)
 80001a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80001a6:	6013      	str	r3, [r2, #0]
	BMP180_I2C1->CR1 &= ~(1 << 15);
 80001a8:	4b0e      	ldr	r3, [pc, #56]	@ (80001e4 <BMP180_I2C1_MasterConfig+0x94>)
 80001aa:	681b      	ldr	r3, [r3, #0]
 80001ac:	4a0d      	ldr	r2, [pc, #52]	@ (80001e4 <BMP180_I2C1_MasterConfig+0x94>)
 80001ae:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80001b2:	6013      	str	r3, [r2, #0]

	// 4. Cấu hình CR2 (input clock frequency in MHz)
	BMP180_I2C1->CR2 = 8;	// PCLK1 = 8MHz
 80001b4:	4b0b      	ldr	r3, [pc, #44]	@ (80001e4 <BMP180_I2C1_MasterConfig+0x94>)
 80001b6:	2208      	movs	r2, #8
 80001b8:	605a      	str	r2, [r3, #4]

	// 5. Set tốc độ SCL = 100kHz
	// Standard mode: CCR = Fpclk1 / (2*Fscl) = 8MHz / (2*100kHz) = 40
	BMP180_I2C1->CCR = 40;
 80001ba:	4b0a      	ldr	r3, [pc, #40]	@ (80001e4 <BMP180_I2C1_MasterConfig+0x94>)
 80001bc:	2228      	movs	r2, #40	@ 0x28
 80001be:	61da      	str	r2, [r3, #28]
	BMP180_I2C1->TRISE = 9;   // (1000ns / Tpclk1) + 1 = (1000ns / 125ns) + 1 = 8 + 1
 80001c0:	4b08      	ldr	r3, [pc, #32]	@ (80001e4 <BMP180_I2C1_MasterConfig+0x94>)
 80001c2:	2209      	movs	r2, #9
 80001c4:	621a      	str	r2, [r3, #32]

	// 6. Enable BMP180_I2C1 peripheral
	BMP180_I2C1->CR1 |= (1 << 0);
 80001c6:	4b07      	ldr	r3, [pc, #28]	@ (80001e4 <BMP180_I2C1_MasterConfig+0x94>)
 80001c8:	681b      	ldr	r3, [r3, #0]
 80001ca:	4a06      	ldr	r2, [pc, #24]	@ (80001e4 <BMP180_I2C1_MasterConfig+0x94>)
 80001cc:	f043 0301 	orr.w	r3, r3, #1
 80001d0:	6013      	str	r3, [r2, #0]
}
 80001d2:	bf00      	nop
 80001d4:	46bd      	mov	sp, r7
 80001d6:	bc80      	pop	{r7}
 80001d8:	4770      	bx	lr
 80001da:	bf00      	nop
 80001dc:	40021000 	.word	0x40021000
 80001e0:	40010c00 	.word	0x40010c00
 80001e4:	40005400 	.word	0x40005400

080001e8 <BMP180_I2C1_Write8>:

uint8_t BMP180_I2C1_Write8(uint8_t devAddr, uint8_t regAddr, uint8_t regVal)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	4603      	mov	r3, r0
 80001f0:	71fb      	strb	r3, [r7, #7]
 80001f2:	460b      	mov	r3, r1
 80001f4:	71bb      	strb	r3, [r7, #6]
 80001f6:	4613      	mov	r3, r2
 80001f8:	717b      	strb	r3, [r7, #5]
    // START
    BMP180_I2C1->CR1 |= BMP180_I2C1_CR1_START;                 // Generate START
 80001fa:	4b22      	ldr	r3, [pc, #136]	@ (8000284 <BMP180_I2C1_Write8+0x9c>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	4a21      	ldr	r2, [pc, #132]	@ (8000284 <BMP180_I2C1_Write8+0x9c>)
 8000200:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000204:	6013      	str	r3, [r2, #0]
    while (!(BMP180_I2C1->SR1 & BMP180_I2C1_SR1_SB));          // EV5: SB=1
 8000206:	bf00      	nop
 8000208:	4b1e      	ldr	r3, [pc, #120]	@ (8000284 <BMP180_I2C1_Write8+0x9c>)
 800020a:	695b      	ldr	r3, [r3, #20]
 800020c:	f003 0301 	and.w	r3, r3, #1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d0f9      	beq.n	8000208 <BMP180_I2C1_Write8+0x20>
    (void)BMP180_I2C1->SR1;                            // Clear SB by read SR1
 8000214:	4b1b      	ldr	r3, [pc, #108]	@ (8000284 <BMP180_I2C1_Write8+0x9c>)
 8000216:	695b      	ldr	r3, [r3, #20]
    BMP180_I2C1->DR = (devAddr << 1);                  // Send slave addr + W (LSB=0)
 8000218:	79fb      	ldrb	r3, [r7, #7]
 800021a:	4a1a      	ldr	r2, [pc, #104]	@ (8000284 <BMP180_I2C1_Write8+0x9c>)
 800021c:	005b      	lsls	r3, r3, #1
 800021e:	6113      	str	r3, [r2, #16]

    //EV6: ADDR sent
    while (!(BMP180_I2C1->SR1 & BMP180_I2C1_SR1_ADDR));        // Wait for ADDR=1
 8000220:	bf00      	nop
 8000222:	4b18      	ldr	r3, [pc, #96]	@ (8000284 <BMP180_I2C1_Write8+0x9c>)
 8000224:	695b      	ldr	r3, [r3, #20]
 8000226:	f003 0302 	and.w	r3, r3, #2
 800022a:	2b00      	cmp	r3, #0
 800022c:	d0f9      	beq.n	8000222 <BMP180_I2C1_Write8+0x3a>
    (void)BMP180_I2C1->SR1; (void)BMP180_I2C1->SR2;           // Clear ADDR by read SR1 + SR2
 800022e:	4b15      	ldr	r3, [pc, #84]	@ (8000284 <BMP180_I2C1_Write8+0x9c>)
 8000230:	695b      	ldr	r3, [r3, #20]
 8000232:	4b14      	ldr	r3, [pc, #80]	@ (8000284 <BMP180_I2C1_Write8+0x9c>)
 8000234:	699b      	ldr	r3, [r3, #24]

    //EV8_1: TxE=1, DR empty
    while (!(BMP180_I2C1->SR1 & BMP180_I2C1_SR1_TXE));         // Wait TXE=1
 8000236:	bf00      	nop
 8000238:	4b12      	ldr	r3, [pc, #72]	@ (8000284 <BMP180_I2C1_Write8+0x9c>)
 800023a:	695b      	ldr	r3, [r3, #20]
 800023c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000240:	2b00      	cmp	r3, #0
 8000242:	d0f9      	beq.n	8000238 <BMP180_I2C1_Write8+0x50>
    BMP180_I2C1->DR = regAddr;                         // Send register address
 8000244:	4a0f      	ldr	r2, [pc, #60]	@ (8000284 <BMP180_I2C1_Write8+0x9c>)
 8000246:	79bb      	ldrb	r3, [r7, #6]
 8000248:	6113      	str	r3, [r2, #16]

    //EV8: TxE=1
    while (!(BMP180_I2C1->SR1 & BMP180_I2C1_SR1_TXE));
 800024a:	bf00      	nop
 800024c:	4b0d      	ldr	r3, [pc, #52]	@ (8000284 <BMP180_I2C1_Write8+0x9c>)
 800024e:	695b      	ldr	r3, [r3, #20]
 8000250:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000254:	2b00      	cmp	r3, #0
 8000256:	d0f9      	beq.n	800024c <BMP180_I2C1_Write8+0x64>
    BMP180_I2C1->DR = regVal;                          // Send data
 8000258:	4a0a      	ldr	r2, [pc, #40]	@ (8000284 <BMP180_I2C1_Write8+0x9c>)
 800025a:	797b      	ldrb	r3, [r7, #5]
 800025c:	6113      	str	r3, [r2, #16]

    //EV8_2: TxE=1, BTF=1
    while (!(BMP180_I2C1->SR1 & BMP180_I2C1_SR1_BTF));         // Wait until byte transfer finished
 800025e:	bf00      	nop
 8000260:	4b08      	ldr	r3, [pc, #32]	@ (8000284 <BMP180_I2C1_Write8+0x9c>)
 8000262:	695b      	ldr	r3, [r3, #20]
 8000264:	f003 0304 	and.w	r3, r3, #4
 8000268:	2b00      	cmp	r3, #0
 800026a:	d0f9      	beq.n	8000260 <BMP180_I2C1_Write8+0x78>

    //STOP
    BMP180_I2C1->CR1 |= BMP180_I2C1_CR1_STOP;                  // Generate STOP
 800026c:	4b05      	ldr	r3, [pc, #20]	@ (8000284 <BMP180_I2C1_Write8+0x9c>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	4a04      	ldr	r2, [pc, #16]	@ (8000284 <BMP180_I2C1_Write8+0x9c>)
 8000272:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000276:	6013      	str	r3, [r2, #0]

    return 0;   // OK
 8000278:	2300      	movs	r3, #0
}
 800027a:	4618      	mov	r0, r3
 800027c:	370c      	adds	r7, #12
 800027e:	46bd      	mov	sp, r7
 8000280:	bc80      	pop	{r7}
 8000282:	4770      	bx	lr
 8000284:	40005400 	.word	0x40005400

08000288 <BMP180_I2C1_Read8>:

uint8_t BMP180_I2C1_Read8(uint8_t devAddr, uint8_t regAddr)
{
 8000288:	b480      	push	{r7}
 800028a:	b085      	sub	sp, #20
 800028c:	af00      	add	r7, sp, #0
 800028e:	4603      	mov	r3, r0
 8000290:	460a      	mov	r2, r1
 8000292:	71fb      	strb	r3, [r7, #7]
 8000294:	4613      	mov	r3, r2
 8000296:	71bb      	strb	r3, [r7, #6]
    uint8_t data;

    //START (EV5)
    BMP180_I2C1->CR1 |= BMP180_I2C1_CR1_START;
 8000298:	4b35      	ldr	r3, [pc, #212]	@ (8000370 <BMP180_I2C1_Read8+0xe8>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	4a34      	ldr	r2, [pc, #208]	@ (8000370 <BMP180_I2C1_Read8+0xe8>)
 800029e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80002a2:	6013      	str	r3, [r2, #0]
    while (!(BMP180_I2C1->SR1 & BMP180_I2C1_SR1_SB));   // Wait for SB=1
 80002a4:	bf00      	nop
 80002a6:	4b32      	ldr	r3, [pc, #200]	@ (8000370 <BMP180_I2C1_Read8+0xe8>)
 80002a8:	695b      	ldr	r3, [r3, #20]
 80002aa:	f003 0301 	and.w	r3, r3, #1
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d0f9      	beq.n	80002a6 <BMP180_I2C1_Read8+0x1e>
    (void)BMP180_I2C1->SR1;
 80002b2:	4b2f      	ldr	r3, [pc, #188]	@ (8000370 <BMP180_I2C1_Read8+0xe8>)
 80002b4:	695b      	ldr	r3, [r3, #20]
    BMP180_I2C1->DR = (devAddr << 1);           // Gửi địa chỉ + Write (0)
 80002b6:	79fb      	ldrb	r3, [r7, #7]
 80002b8:	4a2d      	ldr	r2, [pc, #180]	@ (8000370 <BMP180_I2C1_Read8+0xe8>)
 80002ba:	005b      	lsls	r3, r3, #1
 80002bc:	6113      	str	r3, [r2, #16]

    //EV6 (ADDR=1)
    while (!(BMP180_I2C1->SR1 & BMP180_I2C1_SR1_ADDR));
 80002be:	bf00      	nop
 80002c0:	4b2b      	ldr	r3, [pc, #172]	@ (8000370 <BMP180_I2C1_Read8+0xe8>)
 80002c2:	695b      	ldr	r3, [r3, #20]
 80002c4:	f003 0302 	and.w	r3, r3, #2
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d0f9      	beq.n	80002c0 <BMP180_I2C1_Read8+0x38>
    (void)BMP180_I2C1->SR1; (void)BMP180_I2C1->SR2;
 80002cc:	4b28      	ldr	r3, [pc, #160]	@ (8000370 <BMP180_I2C1_Read8+0xe8>)
 80002ce:	695b      	ldr	r3, [r3, #20]
 80002d0:	4b27      	ldr	r3, [pc, #156]	@ (8000370 <BMP180_I2C1_Read8+0xe8>)
 80002d2:	699b      	ldr	r3, [r3, #24]

    //regAddr cần đọc
    while (!(BMP180_I2C1->SR1 & BMP180_I2C1_SR1_TXE));  // TXE=1
 80002d4:	bf00      	nop
 80002d6:	4b26      	ldr	r3, [pc, #152]	@ (8000370 <BMP180_I2C1_Read8+0xe8>)
 80002d8:	695b      	ldr	r3, [r3, #20]
 80002da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d0f9      	beq.n	80002d6 <BMP180_I2C1_Read8+0x4e>
    BMP180_I2C1->DR = regAddr;
 80002e2:	4a23      	ldr	r2, [pc, #140]	@ (8000370 <BMP180_I2C1_Read8+0xe8>)
 80002e4:	79bb      	ldrb	r3, [r7, #6]
 80002e6:	6113      	str	r3, [r2, #16]
    while (!(BMP180_I2C1->SR1 & BMP180_I2C1_SR1_BTF));  // Đợi truyền xong
 80002e8:	bf00      	nop
 80002ea:	4b21      	ldr	r3, [pc, #132]	@ (8000370 <BMP180_I2C1_Read8+0xe8>)
 80002ec:	695b      	ldr	r3, [r3, #20]
 80002ee:	f003 0304 	and.w	r3, r3, #4
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d0f9      	beq.n	80002ea <BMP180_I2C1_Read8+0x62>

    //Re-START (EV5 lần 2)
    BMP180_I2C1->CR1 |= BMP180_I2C1_CR1_START;
 80002f6:	4b1e      	ldr	r3, [pc, #120]	@ (8000370 <BMP180_I2C1_Read8+0xe8>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	4a1d      	ldr	r2, [pc, #116]	@ (8000370 <BMP180_I2C1_Read8+0xe8>)
 80002fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000300:	6013      	str	r3, [r2, #0]
    while (!(BMP180_I2C1->SR1 & BMP180_I2C1_SR1_SB));
 8000302:	bf00      	nop
 8000304:	4b1a      	ldr	r3, [pc, #104]	@ (8000370 <BMP180_I2C1_Read8+0xe8>)
 8000306:	695b      	ldr	r3, [r3, #20]
 8000308:	f003 0301 	and.w	r3, r3, #1
 800030c:	2b00      	cmp	r3, #0
 800030e:	d0f9      	beq.n	8000304 <BMP180_I2C1_Read8+0x7c>
    (void)BMP180_I2C1->SR1;
 8000310:	4b17      	ldr	r3, [pc, #92]	@ (8000370 <BMP180_I2C1_Read8+0xe8>)
 8000312:	695b      	ldr	r3, [r3, #20]
    BMP180_I2C1->DR = (devAddr << 1) | 0x01;    // Địa chỉ + Read (1)
 8000314:	79fb      	ldrb	r3, [r7, #7]
 8000316:	005b      	lsls	r3, r3, #1
 8000318:	f043 0201 	orr.w	r2, r3, #1
 800031c:	4b14      	ldr	r3, [pc, #80]	@ (8000370 <BMP180_I2C1_Read8+0xe8>)
 800031e:	611a      	str	r2, [r3, #16]

    //EV6 + EV6_1
    while (!(BMP180_I2C1->SR1 & BMP180_I2C1_SR1_ADDR));
 8000320:	bf00      	nop
 8000322:	4b13      	ldr	r3, [pc, #76]	@ (8000370 <BMP180_I2C1_Read8+0xe8>)
 8000324:	695b      	ldr	r3, [r3, #20]
 8000326:	f003 0302 	and.w	r3, r3, #2
 800032a:	2b00      	cmp	r3, #0
 800032c:	d0f9      	beq.n	8000322 <BMP180_I2C1_Read8+0x9a>
    BMP180_I2C1->CR1 &= ~BMP180_I2C1_CR1_ACK;           // NACK cho byte cuối
 800032e:	4b10      	ldr	r3, [pc, #64]	@ (8000370 <BMP180_I2C1_Read8+0xe8>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	4a0f      	ldr	r2, [pc, #60]	@ (8000370 <BMP180_I2C1_Read8+0xe8>)
 8000334:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000338:	6013      	str	r3, [r2, #0]
    (void)BMP180_I2C1->SR1; (void)BMP180_I2C1->SR2;
 800033a:	4b0d      	ldr	r3, [pc, #52]	@ (8000370 <BMP180_I2C1_Read8+0xe8>)
 800033c:	695b      	ldr	r3, [r3, #20]
 800033e:	4b0c      	ldr	r3, [pc, #48]	@ (8000370 <BMP180_I2C1_Read8+0xe8>)
 8000340:	699b      	ldr	r3, [r3, #24]

    BMP180_I2C1->CR1 |= BMP180_I2C1_CR1_STOP;           // STOP ngay sau ADDR clear
 8000342:	4b0b      	ldr	r3, [pc, #44]	@ (8000370 <BMP180_I2C1_Read8+0xe8>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	4a0a      	ldr	r2, [pc, #40]	@ (8000370 <BMP180_I2C1_Read8+0xe8>)
 8000348:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800034c:	6013      	str	r3, [r2, #0]

    //EV7 (RxNE=1)
    while (!(BMP180_I2C1->SR1 & BMP180_I2C1_SR1_RXNE));
 800034e:	bf00      	nop
 8000350:	4b07      	ldr	r3, [pc, #28]	@ (8000370 <BMP180_I2C1_Read8+0xe8>)
 8000352:	695b      	ldr	r3, [r3, #20]
 8000354:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000358:	2b00      	cmp	r3, #0
 800035a:	d0f9      	beq.n	8000350 <BMP180_I2C1_Read8+0xc8>
    data = BMP180_I2C1->DR;                     // Đọc dữ liệu
 800035c:	4b04      	ldr	r3, [pc, #16]	@ (8000370 <BMP180_I2C1_Read8+0xe8>)
 800035e:	691b      	ldr	r3, [r3, #16]
 8000360:	73fb      	strb	r3, [r7, #15]

    return data;
 8000362:	7bfb      	ldrb	r3, [r7, #15]
}
 8000364:	4618      	mov	r0, r3
 8000366:	3714      	adds	r7, #20
 8000368:	46bd      	mov	sp, r7
 800036a:	bc80      	pop	{r7}
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop
 8000370:	40005400 	.word	0x40005400

08000374 <BMP180_I2C1_Read16>:

uint16_t BMP180_I2C1_Read16(uint8_t devAddr, uint8_t regAddr)
{
 8000374:	b480      	push	{r7}
 8000376:	b085      	sub	sp, #20
 8000378:	af00      	add	r7, sp, #0
 800037a:	4603      	mov	r3, r0
 800037c:	460a      	mov	r2, r1
 800037e:	71fb      	strb	r3, [r7, #7]
 8000380:	4613      	mov	r3, r2
 8000382:	71bb      	strb	r3, [r7, #6]
    // START1: WRITE REGADDR
    BMP180_I2C1->CR1 |= BMP180_I2C1_CR1_START;                      // Start
 8000384:	4b3e      	ldr	r3, [pc, #248]	@ (8000480 <BMP180_I2C1_Read16+0x10c>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	4a3d      	ldr	r2, [pc, #244]	@ (8000480 <BMP180_I2C1_Read16+0x10c>)
 800038a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800038e:	6013      	str	r3, [r2, #0]
    while(!(BMP180_I2C1->SR1 & BMP180_I2C1_SR1_SB));                // EV5
 8000390:	bf00      	nop
 8000392:	4b3b      	ldr	r3, [pc, #236]	@ (8000480 <BMP180_I2C1_Read16+0x10c>)
 8000394:	695b      	ldr	r3, [r3, #20]
 8000396:	f003 0301 	and.w	r3, r3, #1
 800039a:	2b00      	cmp	r3, #0
 800039c:	d0f9      	beq.n	8000392 <BMP180_I2C1_Read16+0x1e>
    (void)BMP180_I2C1->SR1;// EV5
 800039e:	4b38      	ldr	r3, [pc, #224]	@ (8000480 <BMP180_I2C1_Read16+0x10c>)
 80003a0:	695b      	ldr	r3, [r3, #20]
    BMP180_I2C1->DR = (devAddr << 1);                       // Slave addr + Write (0)
 80003a2:	79fb      	ldrb	r3, [r7, #7]
 80003a4:	4a36      	ldr	r2, [pc, #216]	@ (8000480 <BMP180_I2C1_Read16+0x10c>)
 80003a6:	005b      	lsls	r3, r3, #1
 80003a8:	6113      	str	r3, [r2, #16]
    while(!(BMP180_I2C1->SR1 & BMP180_I2C1_SR1_ADDR));              // EV6
 80003aa:	bf00      	nop
 80003ac:	4b34      	ldr	r3, [pc, #208]	@ (8000480 <BMP180_I2C1_Read16+0x10c>)
 80003ae:	695b      	ldr	r3, [r3, #20]
 80003b0:	f003 0302 	and.w	r3, r3, #2
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d0f9      	beq.n	80003ac <BMP180_I2C1_Read16+0x38>
    (void)BMP180_I2C1->SR1;
 80003b8:	4b31      	ldr	r3, [pc, #196]	@ (8000480 <BMP180_I2C1_Read16+0x10c>)
 80003ba:	695b      	ldr	r3, [r3, #20]
    (void)BMP180_I2C1->SR2;
 80003bc:	4b30      	ldr	r3, [pc, #192]	@ (8000480 <BMP180_I2C1_Read16+0x10c>)
 80003be:	699b      	ldr	r3, [r3, #24]

    while(!(BMP180_I2C1->SR1 & BMP180_I2C1_SR1_TXE))
 80003c0:	bf00      	nop
 80003c2:	4b2f      	ldr	r3, [pc, #188]	@ (8000480 <BMP180_I2C1_Read16+0x10c>)
 80003c4:	695b      	ldr	r3, [r3, #20]
 80003c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d0f9      	beq.n	80003c2 <BMP180_I2C1_Read16+0x4e>
    	;               // EV8_1
    BMP180_I2C1->DR = regAddr;                              // Gửi regAddr
 80003ce:	4a2c      	ldr	r2, [pc, #176]	@ (8000480 <BMP180_I2C1_Read16+0x10c>)
 80003d0:	79bb      	ldrb	r3, [r7, #6]
 80003d2:	6113      	str	r3, [r2, #16]
    while(!(BMP180_I2C1->SR1 & BMP180_I2C1_SR1_TXE))
 80003d4:	bf00      	nop
 80003d6:	4b2a      	ldr	r3, [pc, #168]	@ (8000480 <BMP180_I2C1_Read16+0x10c>)
 80003d8:	695b      	ldr	r3, [r3, #20]
 80003da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d0f9      	beq.n	80003d6 <BMP180_I2C1_Read16+0x62>
    	;               // EV8

	// Enable ACK + POS
	BMP180_I2C1->CR1 |= BMP180_I2C1_CR1_ACK | BMP180_I2C1_CR1_POS;
 80003e2:	4b27      	ldr	r3, [pc, #156]	@ (8000480 <BMP180_I2C1_Read16+0x10c>)
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	4a26      	ldr	r2, [pc, #152]	@ (8000480 <BMP180_I2C1_Read16+0x10c>)
 80003e8:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 80003ec:	6013      	str	r3, [r2, #0]


	// START2: READ 2 bytes
	BMP180_I2C1->CR1 |= BMP180_I2C1_CR1_START;
 80003ee:	4b24      	ldr	r3, [pc, #144]	@ (8000480 <BMP180_I2C1_Read16+0x10c>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	4a23      	ldr	r2, [pc, #140]	@ (8000480 <BMP180_I2C1_Read16+0x10c>)
 80003f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80003f8:	6013      	str	r3, [r2, #0]
	while(!(BMP180_I2C1->SR1 & BMP180_I2C1_SR1_SB));   // EV5
 80003fa:	bf00      	nop
 80003fc:	4b20      	ldr	r3, [pc, #128]	@ (8000480 <BMP180_I2C1_Read16+0x10c>)
 80003fe:	695b      	ldr	r3, [r3, #20]
 8000400:	f003 0301 	and.w	r3, r3, #1
 8000404:	2b00      	cmp	r3, #0
 8000406:	d0f9      	beq.n	80003fc <BMP180_I2C1_Read16+0x88>
	(void)BMP180_I2C1->SR1;// EV5
 8000408:	4b1d      	ldr	r3, [pc, #116]	@ (8000480 <BMP180_I2C1_Read16+0x10c>)
 800040a:	695b      	ldr	r3, [r3, #20]
	// send address+R
	BMP180_I2C1->DR = (devAddr << 1) | 1;
 800040c:	79fb      	ldrb	r3, [r7, #7]
 800040e:	005b      	lsls	r3, r3, #1
 8000410:	f043 0201 	orr.w	r2, r3, #1
 8000414:	4b1a      	ldr	r3, [pc, #104]	@ (8000480 <BMP180_I2C1_Read16+0x10c>)
 8000416:	611a      	str	r2, [r3, #16]
	// Đợi addr
	while(!(BMP180_I2C1->SR1 & BMP180_I2C1_SR1_ADDR)); // EV6
 8000418:	bf00      	nop
 800041a:	4b19      	ldr	r3, [pc, #100]	@ (8000480 <BMP180_I2C1_Read16+0x10c>)
 800041c:	695b      	ldr	r3, [r3, #20]
 800041e:	f003 0302 	and.w	r3, r3, #2
 8000422:	2b00      	cmp	r3, #0
 8000424:	d0f9      	beq.n	800041a <BMP180_I2C1_Read16+0xa6>
	(void)BMP180_I2C1->SR1; 	// clear addr
 8000426:	4b16      	ldr	r3, [pc, #88]	@ (8000480 <BMP180_I2C1_Read16+0x10c>)
 8000428:	695b      	ldr	r3, [r3, #20]
	(void)BMP180_I2C1->SR2;   // clear ADDR
 800042a:	4b15      	ldr	r3, [pc, #84]	@ (8000480 <BMP180_I2C1_Read16+0x10c>)
 800042c:	699b      	ldr	r3, [r3, #24]
	// Ngay sau khi clear add -> clear ack
	BMP180_I2C1->CR1 &= ~BMP180_I2C1_CR1_ACK;			// EV6_1
 800042e:	4b14      	ldr	r3, [pc, #80]	@ (8000480 <BMP180_I2C1_Read16+0x10c>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	4a13      	ldr	r2, [pc, #76]	@ (8000480 <BMP180_I2C1_Read16+0x10c>)
 8000434:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000438:	6013      	str	r3, [r2, #0]
	// Đợi BTF = 1 (2 bytes về ok)
	while(!(BMP180_I2C1->SR1 & BMP180_I2C1_SR1_BTF));  // EV7_3
 800043a:	bf00      	nop
 800043c:	4b10      	ldr	r3, [pc, #64]	@ (8000480 <BMP180_I2C1_Read16+0x10c>)
 800043e:	695b      	ldr	r3, [r3, #20]
 8000440:	f003 0304 	and.w	r3, r3, #4
 8000444:	2b00      	cmp	r3, #0
 8000446:	d0f9      	beq.n	800043c <BMP180_I2C1_Read16+0xc8>
	// Stop
	BMP180_I2C1->CR1 |= BMP180_I2C1_CR1_STOP;
 8000448:	4b0d      	ldr	r3, [pc, #52]	@ (8000480 <BMP180_I2C1_Read16+0x10c>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	4a0c      	ldr	r2, [pc, #48]	@ (8000480 <BMP180_I2C1_Read16+0x10c>)
 800044e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000452:	6013      	str	r3, [r2, #0]
	uint8_t data1 = BMP180_I2C1->DR;
 8000454:	4b0a      	ldr	r3, [pc, #40]	@ (8000480 <BMP180_I2C1_Read16+0x10c>)
 8000456:	691b      	ldr	r3, [r3, #16]
 8000458:	73fb      	strb	r3, [r7, #15]
	uint8_t data2 = BMP180_I2C1->DR;
 800045a:	4b09      	ldr	r3, [pc, #36]	@ (8000480 <BMP180_I2C1_Read16+0x10c>)
 800045c:	691b      	ldr	r3, [r3, #16]
 800045e:	73bb      	strb	r3, [r7, #14]
	uint16_t data = (data1 << 8) | data2;
 8000460:	7bfb      	ldrb	r3, [r7, #15]
 8000462:	b21b      	sxth	r3, r3
 8000464:	021b      	lsls	r3, r3, #8
 8000466:	b21a      	sxth	r2, r3
 8000468:	7bbb      	ldrb	r3, [r7, #14]
 800046a:	b21b      	sxth	r3, r3
 800046c:	4313      	orrs	r3, r2
 800046e:	b21b      	sxth	r3, r3
 8000470:	81bb      	strh	r3, [r7, #12]
	return data;
 8000472:	89bb      	ldrh	r3, [r7, #12]
}
 8000474:	4618      	mov	r0, r3
 8000476:	3714      	adds	r7, #20
 8000478:	46bd      	mov	sp, r7
 800047a:	bc80      	pop	{r7}
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop
 8000480:	40005400 	.word	0x40005400

08000484 <NVIC_Enable_IRQ>:
#include "Interrupt.h"
//#include "gpio.h"
#include <stdint.h>

void NVIC_Enable_IRQ(uint8_t EXTI_IRQ_NUM)
{
 8000484:	b480      	push	{r7}
 8000486:	b083      	sub	sp, #12
 8000488:	af00      	add	r7, sp, #0
 800048a:	4603      	mov	r3, r0
 800048c:	71fb      	strb	r3, [r7, #7]
	if(EXTI_IRQ_NUM < 32)
 800048e:	79fb      	ldrb	r3, [r7, #7]
 8000490:	2b1f      	cmp	r3, #31
 8000492:	d80a      	bhi.n	80004aa <NVIC_Enable_IRQ+0x26>
	{
		UET_NVIC_ISER0 |= (1 << EXTI_IRQ_NUM);
 8000494:	4b0e      	ldr	r3, [pc, #56]	@ (80004d0 <NVIC_Enable_IRQ+0x4c>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	79fa      	ldrb	r2, [r7, #7]
 800049a:	2101      	movs	r1, #1
 800049c:	fa01 f202 	lsl.w	r2, r1, r2
 80004a0:	4611      	mov	r1, r2
 80004a2:	4a0b      	ldr	r2, [pc, #44]	@ (80004d0 <NVIC_Enable_IRQ+0x4c>)
 80004a4:	430b      	orrs	r3, r1
 80004a6:	6013      	str	r3, [r2, #0]
	}
	else if(EXTI_IRQ_NUM < 64)
	{
		UET_NVIC_ISER1 |= (1 << (EXTI_IRQ_NUM - 32));
	}
}
 80004a8:	e00d      	b.n	80004c6 <NVIC_Enable_IRQ+0x42>
	else if(EXTI_IRQ_NUM < 64)
 80004aa:	79fb      	ldrb	r3, [r7, #7]
 80004ac:	2b3f      	cmp	r3, #63	@ 0x3f
 80004ae:	d80a      	bhi.n	80004c6 <NVIC_Enable_IRQ+0x42>
		UET_NVIC_ISER1 |= (1 << (EXTI_IRQ_NUM - 32));
 80004b0:	4b08      	ldr	r3, [pc, #32]	@ (80004d4 <NVIC_Enable_IRQ+0x50>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	79fa      	ldrb	r2, [r7, #7]
 80004b6:	3a20      	subs	r2, #32
 80004b8:	2101      	movs	r1, #1
 80004ba:	fa01 f202 	lsl.w	r2, r1, r2
 80004be:	4611      	mov	r1, r2
 80004c0:	4a04      	ldr	r2, [pc, #16]	@ (80004d4 <NVIC_Enable_IRQ+0x50>)
 80004c2:	430b      	orrs	r3, r1
 80004c4:	6013      	str	r3, [r2, #0]
}
 80004c6:	bf00      	nop
 80004c8:	370c      	adds	r7, #12
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bc80      	pop	{r7}
 80004ce:	4770      	bx	lr
 80004d0:	e000e100 	.word	0xe000e100
 80004d4:	e000e104 	.word	0xe000e104

080004d8 <EXTI0_IRQHandler>:
		UET_EXTI->RTSR |= (1 << pin);
	}
}

void EXTI0_IRQHandler(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
	if(UET_EXTI->PR & (1 << 0))
 80004dc:	4b07      	ldr	r3, [pc, #28]	@ (80004fc <EXTI0_IRQHandler+0x24>)
 80004de:	695b      	ldr	r3, [r3, #20]
 80004e0:	f003 0301 	and.w	r3, r3, #1
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d005      	beq.n	80004f4 <EXTI0_IRQHandler+0x1c>
	{
		// Clear interrupt flag
		UET_EXTI->PR |= (1 << 0);
 80004e8:	4b04      	ldr	r3, [pc, #16]	@ (80004fc <EXTI0_IRQHandler+0x24>)
 80004ea:	695b      	ldr	r3, [r3, #20]
 80004ec:	4a03      	ldr	r2, [pc, #12]	@ (80004fc <EXTI0_IRQHandler+0x24>)
 80004ee:	f043 0301 	orr.w	r3, r3, #1
 80004f2:	6153      	str	r3, [r2, #20]
		// Do something
		//GPIO_toggle_pin(GPIOC, 13);

	}
}
 80004f4:	bf00      	nop
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bc80      	pop	{r7}
 80004fa:	4770      	bx	lr
 80004fc:	40010400 	.word	0x40010400

08000500 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
	if(UET_EXTI->PR & (1 << 1))
 8000504:	4b07      	ldr	r3, [pc, #28]	@ (8000524 <EXTI1_IRQHandler+0x24>)
 8000506:	695b      	ldr	r3, [r3, #20]
 8000508:	f003 0302 	and.w	r3, r3, #2
 800050c:	2b00      	cmp	r3, #0
 800050e:	d005      	beq.n	800051c <EXTI1_IRQHandler+0x1c>
	{
		// Clear interrupt flag
		UET_EXTI->PR |= (1 << 1);
 8000510:	4b04      	ldr	r3, [pc, #16]	@ (8000524 <EXTI1_IRQHandler+0x24>)
 8000512:	695b      	ldr	r3, [r3, #20]
 8000514:	4a03      	ldr	r2, [pc, #12]	@ (8000524 <EXTI1_IRQHandler+0x24>)
 8000516:	f043 0302 	orr.w	r3, r3, #2
 800051a:	6153      	str	r3, [r2, #20]
		// Do something
		//GPIO_toggle_pin(GPIOC, 13);

	}
}
 800051c:	bf00      	nop
 800051e:	46bd      	mov	sp, r7
 8000520:	bc80      	pop	{r7}
 8000522:	4770      	bx	lr
 8000524:	40010400 	.word	0x40010400

08000528 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
	if(UET_EXTI->PR & (1 << 2))
 800052c:	4b07      	ldr	r3, [pc, #28]	@ (800054c <EXTI2_IRQHandler+0x24>)
 800052e:	695b      	ldr	r3, [r3, #20]
 8000530:	f003 0304 	and.w	r3, r3, #4
 8000534:	2b00      	cmp	r3, #0
 8000536:	d005      	beq.n	8000544 <EXTI2_IRQHandler+0x1c>
	{
		// Clear interrupt flag
		UET_EXTI->PR |= (1 << 2);
 8000538:	4b04      	ldr	r3, [pc, #16]	@ (800054c <EXTI2_IRQHandler+0x24>)
 800053a:	695b      	ldr	r3, [r3, #20]
 800053c:	4a03      	ldr	r2, [pc, #12]	@ (800054c <EXTI2_IRQHandler+0x24>)
 800053e:	f043 0304 	orr.w	r3, r3, #4
 8000542:	6153      	str	r3, [r2, #20]

		// Do something
		//GPIO_toggle_pin(GPIOC, 13);

	}
}
 8000544:	bf00      	nop
 8000546:	46bd      	mov	sp, r7
 8000548:	bc80      	pop	{r7}
 800054a:	4770      	bx	lr
 800054c:	40010400 	.word	0x40010400

08000550 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
	if(UET_EXTI->PR & (1 << 3))
 8000554:	4b07      	ldr	r3, [pc, #28]	@ (8000574 <EXTI3_IRQHandler+0x24>)
 8000556:	695b      	ldr	r3, [r3, #20]
 8000558:	f003 0308 	and.w	r3, r3, #8
 800055c:	2b00      	cmp	r3, #0
 800055e:	d005      	beq.n	800056c <EXTI3_IRQHandler+0x1c>
	{
		// Clear interrupt flag
		UET_EXTI->PR |= (1 << 3);
 8000560:	4b04      	ldr	r3, [pc, #16]	@ (8000574 <EXTI3_IRQHandler+0x24>)
 8000562:	695b      	ldr	r3, [r3, #20]
 8000564:	4a03      	ldr	r2, [pc, #12]	@ (8000574 <EXTI3_IRQHandler+0x24>)
 8000566:	f043 0308 	orr.w	r3, r3, #8
 800056a:	6153      	str	r3, [r2, #20]
		// Do something
		//GPIO_toggle_pin(GPIOC, 13);

	}
}
 800056c:	bf00      	nop
 800056e:	46bd      	mov	sp, r7
 8000570:	bc80      	pop	{r7}
 8000572:	4770      	bx	lr
 8000574:	40010400 	.word	0x40010400

08000578 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
	if(UET_EXTI->PR & (1 << 4))
 800057c:	4b07      	ldr	r3, [pc, #28]	@ (800059c <EXTI4_IRQHandler+0x24>)
 800057e:	695b      	ldr	r3, [r3, #20]
 8000580:	f003 0310 	and.w	r3, r3, #16
 8000584:	2b00      	cmp	r3, #0
 8000586:	d005      	beq.n	8000594 <EXTI4_IRQHandler+0x1c>
	{
		// Clear interrupt flag
		UET_EXTI->PR |= (1 << 4);
 8000588:	4b04      	ldr	r3, [pc, #16]	@ (800059c <EXTI4_IRQHandler+0x24>)
 800058a:	695b      	ldr	r3, [r3, #20]
 800058c:	4a03      	ldr	r2, [pc, #12]	@ (800059c <EXTI4_IRQHandler+0x24>)
 800058e:	f043 0310 	orr.w	r3, r3, #16
 8000592:	6153      	str	r3, [r2, #20]
		//GPIO_toggle_pin(GPIOC, 13);

	}
}
 8000594:	bf00      	nop
 8000596:	46bd      	mov	sp, r7
 8000598:	bc80      	pop	{r7}
 800059a:	4770      	bx	lr
 800059c:	40010400 	.word	0x40010400

080005a0 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
	for(int i = 5; i < 10; i++)
 80005a6:	2305      	movs	r3, #5
 80005a8:	607b      	str	r3, [r7, #4]
 80005aa:	e015      	b.n	80005d8 <EXTI9_5_IRQHandler+0x38>
	{
		if(UET_EXTI->PR & (1 << i))
 80005ac:	4b0f      	ldr	r3, [pc, #60]	@ (80005ec <EXTI9_5_IRQHandler+0x4c>)
 80005ae:	695b      	ldr	r3, [r3, #20]
 80005b0:	2101      	movs	r1, #1
 80005b2:	687a      	ldr	r2, [r7, #4]
 80005b4:	fa01 f202 	lsl.w	r2, r1, r2
 80005b8:	4013      	ands	r3, r2
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d009      	beq.n	80005d2 <EXTI9_5_IRQHandler+0x32>
		{
			// CLEAR FLAG
			UET_EXTI->PR |= (1 << i);
 80005be:	4b0b      	ldr	r3, [pc, #44]	@ (80005ec <EXTI9_5_IRQHandler+0x4c>)
 80005c0:	695b      	ldr	r3, [r3, #20]
 80005c2:	2101      	movs	r1, #1
 80005c4:	687a      	ldr	r2, [r7, #4]
 80005c6:	fa01 f202 	lsl.w	r2, r1, r2
 80005ca:	4611      	mov	r1, r2
 80005cc:	4a07      	ldr	r2, [pc, #28]	@ (80005ec <EXTI9_5_IRQHandler+0x4c>)
 80005ce:	430b      	orrs	r3, r1
 80005d0:	6153      	str	r3, [r2, #20]
	for(int i = 5; i < 10; i++)
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	3301      	adds	r3, #1
 80005d6:	607b      	str	r3, [r7, #4]
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	2b09      	cmp	r3, #9
 80005dc:	dde6      	ble.n	80005ac <EXTI9_5_IRQHandler+0xc>
			//GPIO_toggle_pin(GPIOC, 13);
		}
	}
}
 80005de:	bf00      	nop
 80005e0:	bf00      	nop
 80005e2:	370c      	adds	r7, #12
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bc80      	pop	{r7}
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	40010400 	.word	0x40010400

080005f0 <UART1xRS485_init>:
#include "gpio.h"
#include "RCC.h"
#include <string.h>

void UART1xRS485_init(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
	// Clock Init
	RCC->APB2ENR |= (1 << 2);	// GPIOA
 80005f4:	4b1c      	ldr	r3, [pc, #112]	@ (8000668 <UART1xRS485_init+0x78>)
 80005f6:	699b      	ldr	r3, [r3, #24]
 80005f8:	4a1b      	ldr	r2, [pc, #108]	@ (8000668 <UART1xRS485_init+0x78>)
 80005fa:	f043 0304 	orr.w	r3, r3, #4
 80005fe:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= (1 << 14);	// USART1
 8000600:	4b19      	ldr	r3, [pc, #100]	@ (8000668 <UART1xRS485_init+0x78>)
 8000602:	699b      	ldr	r3, [r3, #24]
 8000604:	4a18      	ldr	r2, [pc, #96]	@ (8000668 <UART1xRS485_init+0x78>)
 8000606:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800060a:	6193      	str	r3, [r2, #24]

	// GPIOA9 - TX - Output max 10mhz, AF push pull
	GPIOA->CRH &= ~(0b1111 << 4);
 800060c:	4b17      	ldr	r3, [pc, #92]	@ (800066c <UART1xRS485_init+0x7c>)
 800060e:	685b      	ldr	r3, [r3, #4]
 8000610:	4a16      	ldr	r2, [pc, #88]	@ (800066c <UART1xRS485_init+0x7c>)
 8000612:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000616:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= (0b1001 << 4);
 8000618:	4b14      	ldr	r3, [pc, #80]	@ (800066c <UART1xRS485_init+0x7c>)
 800061a:	685b      	ldr	r3, [r3, #4]
 800061c:	4a13      	ldr	r2, [pc, #76]	@ (800066c <UART1xRS485_init+0x7c>)
 800061e:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8000622:	6053      	str	r3, [r2, #4]

	// GPIOA10 - RX - Input, pullup
	GPIOA->CRH &= ~(0b1111 << 8);
 8000624:	4b11      	ldr	r3, [pc, #68]	@ (800066c <UART1xRS485_init+0x7c>)
 8000626:	685b      	ldr	r3, [r3, #4]
 8000628:	4a10      	ldr	r2, [pc, #64]	@ (800066c <UART1xRS485_init+0x7c>)
 800062a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800062e:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= (0b1000 << 8);
 8000630:	4b0e      	ldr	r3, [pc, #56]	@ (800066c <UART1xRS485_init+0x7c>)
 8000632:	685b      	ldr	r3, [r3, #4]
 8000634:	4a0d      	ldr	r2, [pc, #52]	@ (800066c <UART1xRS485_init+0x7c>)
 8000636:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800063a:	6053      	str	r3, [r2, #4]
	GPIOA->ODR |= (1 << 10);
 800063c:	4b0b      	ldr	r3, [pc, #44]	@ (800066c <UART1xRS485_init+0x7c>)
 800063e:	68db      	ldr	r3, [r3, #12]
 8000640:	4a0a      	ldr	r2, [pc, #40]	@ (800066c <UART1xRS485_init+0x7c>)
 8000642:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000646:	60d3      	str	r3, [r2, #12]

	// Baud 9600
	UART1xRS485->BRR = (52 << 4) | 1;
 8000648:	4b09      	ldr	r3, [pc, #36]	@ (8000670 <UART1xRS485_init+0x80>)
 800064a:	f240 3241 	movw	r2, #833	@ 0x341
 800064e:	609a      	str	r2, [r3, #8]

	// Enable TX RX Uart
	UART1xRS485->CR1 |= UART1xRS485_UE | UART1xRS485_TE | UART1xRS485_RE;
 8000650:	4b07      	ldr	r3, [pc, #28]	@ (8000670 <UART1xRS485_init+0x80>)
 8000652:	68db      	ldr	r3, [r3, #12]
 8000654:	4a06      	ldr	r2, [pc, #24]	@ (8000670 <UART1xRS485_init+0x80>)
 8000656:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800065a:	f043 030c 	orr.w	r3, r3, #12
 800065e:	60d3      	str	r3, [r2, #12]
}
 8000660:	bf00      	nop
 8000662:	46bd      	mov	sp, r7
 8000664:	bc80      	pop	{r7}
 8000666:	4770      	bx	lr
 8000668:	40021000 	.word	0x40021000
 800066c:	40010800 	.word	0x40010800
 8000670:	40013800 	.word	0x40013800

08000674 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000674:	b480      	push	{r7}
 8000676:	b085      	sub	sp, #20
 8000678:	af00      	add	r7, sp, #0
 800067a:	60f8      	str	r0, [r7, #12]
 800067c:	60b9      	str	r1, [r7, #8]
 800067e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	4a06      	ldr	r2, [pc, #24]	@ (800069c <vApplicationGetIdleTaskMemory+0x28>)
 8000684:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000686:	68bb      	ldr	r3, [r7, #8]
 8000688:	4a05      	ldr	r2, [pc, #20]	@ (80006a0 <vApplicationGetIdleTaskMemory+0x2c>)
 800068a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	2280      	movs	r2, #128	@ 0x80
 8000690:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000692:	bf00      	nop
 8000694:	3714      	adds	r7, #20
 8000696:	46bd      	mov	sp, r7
 8000698:	bc80      	pop	{r7}
 800069a:	4770      	bx	lr
 800069c:	2000007c 	.word	0x2000007c
 80006a0:	200000d0 	.word	0x200000d0

080006a4 <USART1_IRQHandler>:
 * @brief: Bất kì sự kiện INT nào liên quan đến uart1, nó đều nhảy vào đây
 * @param: void
 * @retval: void
 */
void USART1_IRQHandler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
	// Nếu thanh DR trống
	if(UART1xRS485->SR & UART1xRS485_TXE)
 80006a8:	4b13      	ldr	r3, [pc, #76]	@ (80006f8 <USART1_IRQHandler+0x54>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d01c      	beq.n	80006ee <USART1_IRQHandler+0x4a>
	{
		// Gửi tiếp nếu còn data cần gửi
		///
		if(index_data < send_len)
 80006b4:	4b11      	ldr	r3, [pc, #68]	@ (80006fc <USART1_IRQHandler+0x58>)
 80006b6:	881a      	ldrh	r2, [r3, #0]
 80006b8:	4b11      	ldr	r3, [pc, #68]	@ (8000700 <USART1_IRQHandler+0x5c>)
 80006ba:	881b      	ldrh	r3, [r3, #0]
 80006bc:	429a      	cmp	r2, r3
 80006be:	d20d      	bcs.n	80006dc <USART1_IRQHandler+0x38>
		{
			UART1xRS485->DR = buff[index_data];
 80006c0:	4b0e      	ldr	r3, [pc, #56]	@ (80006fc <USART1_IRQHandler+0x58>)
 80006c2:	881b      	ldrh	r3, [r3, #0]
 80006c4:	461a      	mov	r2, r3
 80006c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000704 <USART1_IRQHandler+0x60>)
 80006c8:	5c9a      	ldrb	r2, [r3, r2]
 80006ca:	4b0b      	ldr	r3, [pc, #44]	@ (80006f8 <USART1_IRQHandler+0x54>)
 80006cc:	605a      	str	r2, [r3, #4]
			index_data++;
 80006ce:	4b0b      	ldr	r3, [pc, #44]	@ (80006fc <USART1_IRQHandler+0x58>)
 80006d0:	881b      	ldrh	r3, [r3, #0]
 80006d2:	3301      	adds	r3, #1
 80006d4:	b29a      	uxth	r2, r3
 80006d6:	4b09      	ldr	r3, [pc, #36]	@ (80006fc <USART1_IRQHandler+0x58>)
 80006d8:	801a      	strh	r2, [r3, #0]
		{
			UART1xRS485->CR1 &= ~(UART1xRS485_TXEIE);		// Gửi xong thì tắt ngắt
			index_data = 0;				// Reset index
		}
	}
}
 80006da:	e008      	b.n	80006ee <USART1_IRQHandler+0x4a>
			UART1xRS485->CR1 &= ~(UART1xRS485_TXEIE);		// Gửi xong thì tắt ngắt
 80006dc:	4b06      	ldr	r3, [pc, #24]	@ (80006f8 <USART1_IRQHandler+0x54>)
 80006de:	68db      	ldr	r3, [r3, #12]
 80006e0:	4a05      	ldr	r2, [pc, #20]	@ (80006f8 <USART1_IRQHandler+0x54>)
 80006e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80006e6:	60d3      	str	r3, [r2, #12]
			index_data = 0;				// Reset index
 80006e8:	4b04      	ldr	r3, [pc, #16]	@ (80006fc <USART1_IRQHandler+0x58>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	801a      	strh	r2, [r3, #0]
}
 80006ee:	bf00      	nop
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bc80      	pop	{r7}
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	40013800 	.word	0x40013800
 80006fc:	2000030e 	.word	0x2000030e
 8000700:	20000310 	.word	0x20000310
 8000704:	200002dc 	.word	0x200002dc

08000708 <sendData>:
 * @param: data - pointer tới chuỗi cần gửi
 * @param: size - kích cỡ của chuỗi cần gửi
 * @retval: void
 */
void sendData(uint8_t* data, uint16_t size)
{
 8000708:	b480      	push	{r7}
 800070a:	b085      	sub	sp, #20
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
 8000710:	460b      	mov	r3, r1
 8000712:	807b      	strh	r3, [r7, #2]
	// Lưu data vào buff tạm
	for(uint8_t i = 0; i < size; i++)
 8000714:	2300      	movs	r3, #0
 8000716:	73fb      	strb	r3, [r7, #15]
 8000718:	e009      	b.n	800072e <sendData+0x26>
	{
		buff[i] = data[i];
 800071a:	7bfb      	ldrb	r3, [r7, #15]
 800071c:	687a      	ldr	r2, [r7, #4]
 800071e:	441a      	add	r2, r3
 8000720:	7bfb      	ldrb	r3, [r7, #15]
 8000722:	7811      	ldrb	r1, [r2, #0]
 8000724:	4a0f      	ldr	r2, [pc, #60]	@ (8000764 <sendData+0x5c>)
 8000726:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < size; i++)
 8000728:	7bfb      	ldrb	r3, [r7, #15]
 800072a:	3301      	adds	r3, #1
 800072c:	73fb      	strb	r3, [r7, #15]
 800072e:	7bfb      	ldrb	r3, [r7, #15]
 8000730:	b29b      	uxth	r3, r3
 8000732:	887a      	ldrh	r2, [r7, #2]
 8000734:	429a      	cmp	r2, r3
 8000736:	d8f0      	bhi.n	800071a <sendData+0x12>
	}
	send_len = size;
 8000738:	4a0b      	ldr	r2, [pc, #44]	@ (8000768 <sendData+0x60>)
 800073a:	887b      	ldrh	r3, [r7, #2]
 800073c:	8013      	strh	r3, [r2, #0]
	index_data = 1;
 800073e:	4b0b      	ldr	r3, [pc, #44]	@ (800076c <sendData+0x64>)
 8000740:	2201      	movs	r2, #1
 8000742:	801a      	strh	r2, [r3, #0]
	// Kích chạy lần đầu
	UART1xRS485->DR = buff[0];
 8000744:	4b07      	ldr	r3, [pc, #28]	@ (8000764 <sendData+0x5c>)
 8000746:	781a      	ldrb	r2, [r3, #0]
 8000748:	4b09      	ldr	r3, [pc, #36]	@ (8000770 <sendData+0x68>)
 800074a:	605a      	str	r2, [r3, #4]
	// Set bit TX interrupt enable
	UART1xRS485->CR1 |= UART1xRS485_TXEIE;
 800074c:	4b08      	ldr	r3, [pc, #32]	@ (8000770 <sendData+0x68>)
 800074e:	68db      	ldr	r3, [r3, #12]
 8000750:	4a07      	ldr	r2, [pc, #28]	@ (8000770 <sendData+0x68>)
 8000752:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000756:	60d3      	str	r3, [r2, #12]
}
 8000758:	bf00      	nop
 800075a:	3714      	adds	r7, #20
 800075c:	46bd      	mov	sp, r7
 800075e:	bc80      	pop	{r7}
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	200002dc 	.word	0x200002dc
 8000768:	20000310 	.word	0x20000310
 800076c:	2000030e 	.word	0x2000030e
 8000770:	40013800 	.word	0x40013800

08000774 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000774:	b5b0      	push	{r4, r5, r7, lr}
 8000776:	b08e      	sub	sp, #56	@ 0x38
 8000778:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800077a:	f000 f9d9 	bl	8000b30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800077e:	f000 f839 	bl	80007f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000782:	f000 f873 	bl	800086c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  UART1xRS485_init();
 8000786:	f7ff ff33 	bl	80005f0 <UART1xRS485_init>
  BMP180_I2C1_MasterConfig();
 800078a:	f7ff fce1 	bl	8000150 <BMP180_I2C1_MasterConfig>
  NVIC_Enable_IRQ(37); // USART1
 800078e:	2025      	movs	r0, #37	@ 0x25
 8000790:	f7ff fe78 	bl	8000484 <NVIC_Enable_IRQ>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of SensorTask */
  osThreadDef(SensorTask, ReadSensorTask, osPriorityNormal, 0, 128);
 8000794:	4b13      	ldr	r3, [pc, #76]	@ (80007e4 <main+0x70>)
 8000796:	f107 041c 	add.w	r4, r7, #28
 800079a:	461d      	mov	r5, r3
 800079c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800079e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SensorTaskHandle = osThreadCreate(osThread(SensorTask), NULL);
 80007a8:	f107 031c 	add.w	r3, r7, #28
 80007ac:	2100      	movs	r1, #0
 80007ae:	4618      	mov	r0, r3
 80007b0:	f000 ff00 	bl	80015b4 <osThreadCreate>
 80007b4:	4603      	mov	r3, r0
 80007b6:	4a0c      	ldr	r2, [pc, #48]	@ (80007e8 <main+0x74>)
 80007b8:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  osThreadDef(DataTask, SendDataTask, osPriorityNormal, 0, 128);
 80007ba:	4b0c      	ldr	r3, [pc, #48]	@ (80007ec <main+0x78>)
 80007bc:	463c      	mov	r4, r7
 80007be:	461d      	mov	r5, r3
 80007c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SenDataTaskHandle = osThreadCreate(osThread(DataTask), NULL);
 80007cc:	463b      	mov	r3, r7
 80007ce:	2100      	movs	r1, #0
 80007d0:	4618      	mov	r0, r3
 80007d2:	f000 feef 	bl	80015b4 <osThreadCreate>
 80007d6:	4603      	mov	r3, r0
 80007d8:	4a05      	ldr	r2, [pc, #20]	@ (80007f0 <main+0x7c>)
 80007da:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80007dc:	f000 fee3 	bl	80015a6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007e0:	bf00      	nop
 80007e2:	e7fd      	b.n	80007e0 <main+0x6c>
 80007e4:	0800332c 	.word	0x0800332c
 80007e8:	200002d0 	.word	0x200002d0
 80007ec:	08003354 	.word	0x08003354
 80007f0:	200002d4 	.word	0x200002d4

080007f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b090      	sub	sp, #64	@ 0x40
 80007f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007fa:	f107 0318 	add.w	r3, r7, #24
 80007fe:	2228      	movs	r2, #40	@ 0x28
 8000800:	2100      	movs	r1, #0
 8000802:	4618      	mov	r0, r3
 8000804:	f002 f8f2 	bl	80029ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000808:	1d3b      	adds	r3, r7, #4
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
 8000810:	609a      	str	r2, [r3, #8]
 8000812:	60da      	str	r2, [r3, #12]
 8000814:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000816:	2302      	movs	r3, #2
 8000818:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800081a:	2301      	movs	r3, #1
 800081c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800081e:	2310      	movs	r3, #16
 8000820:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000822:	2300      	movs	r3, #0
 8000824:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000826:	f107 0318 	add.w	r3, r7, #24
 800082a:	4618      	mov	r0, r3
 800082c:	f000 fac6 	bl	8000dbc <HAL_RCC_OscConfig>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000836:	f000 f8b3 	bl	80009a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800083a:	230f      	movs	r3, #15
 800083c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800083e:	2300      	movs	r3, #0
 8000840:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000842:	2300      	movs	r3, #0
 8000844:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000846:	2300      	movs	r3, #0
 8000848:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800084a:	2300      	movs	r3, #0
 800084c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	2100      	movs	r1, #0
 8000852:	4618      	mov	r0, r3
 8000854:	f000 fd34 	bl	80012c0 <HAL_RCC_ClockConfig>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800085e:	f000 f89f 	bl	80009a0 <Error_Handler>
  }
}
 8000862:	bf00      	nop
 8000864:	3740      	adds	r7, #64	@ 0x40
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
	...

0800086c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000872:	4b0e      	ldr	r3, [pc, #56]	@ (80008ac <MX_GPIO_Init+0x40>)
 8000874:	699b      	ldr	r3, [r3, #24]
 8000876:	4a0d      	ldr	r2, [pc, #52]	@ (80008ac <MX_GPIO_Init+0x40>)
 8000878:	f043 0320 	orr.w	r3, r3, #32
 800087c:	6193      	str	r3, [r2, #24]
 800087e:	4b0b      	ldr	r3, [pc, #44]	@ (80008ac <MX_GPIO_Init+0x40>)
 8000880:	699b      	ldr	r3, [r3, #24]
 8000882:	f003 0320 	and.w	r3, r3, #32
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088a:	4b08      	ldr	r3, [pc, #32]	@ (80008ac <MX_GPIO_Init+0x40>)
 800088c:	699b      	ldr	r3, [r3, #24]
 800088e:	4a07      	ldr	r2, [pc, #28]	@ (80008ac <MX_GPIO_Init+0x40>)
 8000890:	f043 0304 	orr.w	r3, r3, #4
 8000894:	6193      	str	r3, [r2, #24]
 8000896:	4b05      	ldr	r3, [pc, #20]	@ (80008ac <MX_GPIO_Init+0x40>)
 8000898:	699b      	ldr	r3, [r3, #24]
 800089a:	f003 0304 	and.w	r3, r3, #4
 800089e:	603b      	str	r3, [r7, #0]
 80008a0:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80008a2:	bf00      	nop
 80008a4:	370c      	adds	r7, #12
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bc80      	pop	{r7}
 80008aa:	4770      	bx	lr
 80008ac:	40021000 	.word	0x40021000

080008b0 <SendDataTask>:

/* USER CODE BEGIN 4 */

void SendDataTask(void const * argument)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08c      	sub	sp, #48	@ 0x30
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]

	char buffer[32];
	for(;;)
	{

		int32_t temp = global_temp;
 80008b8:	4b0c      	ldr	r3, [pc, #48]	@ (80008ec <SendDataTask+0x3c>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
		uint16_t len = sprintf(buffer, "Temp = %ld\n", temp);
 80008be:	f107 0308 	add.w	r3, r7, #8
 80008c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80008c4:	490a      	ldr	r1, [pc, #40]	@ (80008f0 <SendDataTask+0x40>)
 80008c6:	4618      	mov	r0, r3
 80008c8:	f002 f86e 	bl	80029a8 <siprintf>
 80008cc:	4603      	mov	r3, r0
 80008ce:	857b      	strh	r3, [r7, #42]	@ 0x2a
		sendData(buffer, len);
 80008d0:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80008d2:	f107 0308 	add.w	r3, r7, #8
 80008d6:	4611      	mov	r1, r2
 80008d8:	4618      	mov	r0, r3
 80008da:	f7ff ff15 	bl	8000708 <sendData>
		osDelay(500);
 80008de:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80008e2:	f000 feb3 	bl	800164c <osDelay>
	{
 80008e6:	bf00      	nop
 80008e8:	e7e6      	b.n	80008b8 <SendDataTask+0x8>
 80008ea:	bf00      	nop
 80008ec:	200002d8 	.word	0x200002d8
 80008f0:	08003370 	.word	0x08003370

080008f4 <ReadSensorTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_ReadSensorTask */
void ReadSensorTask(void const * argument)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b08a      	sub	sp, #40	@ 0x28
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
	uint16_t RawTemp, RawPres, AC6, AC5;
	int16_t MC, MD;
	int32_t X1, X2, B5, T;
	uint8_t ID;
	// READ calib inf from EEPROM
	AC5 = BMP180_I2C1_Read16(0x77, 0xB2);
 80008fc:	21b2      	movs	r1, #178	@ 0xb2
 80008fe:	2077      	movs	r0, #119	@ 0x77
 8000900:	f7ff fd38 	bl	8000374 <BMP180_I2C1_Read16>
 8000904:	4603      	mov	r3, r0
 8000906:	84fb      	strh	r3, [r7, #38]	@ 0x26
	AC6 = BMP180_I2C1_Read16(0x77, 0xB4);
 8000908:	21b4      	movs	r1, #180	@ 0xb4
 800090a:	2077      	movs	r0, #119	@ 0x77
 800090c:	f7ff fd32 	bl	8000374 <BMP180_I2C1_Read16>
 8000910:	4603      	mov	r3, r0
 8000912:	84bb      	strh	r3, [r7, #36]	@ 0x24
	MC = BMP180_I2C1_Read16(0x77, 0xBC);
 8000914:	21bc      	movs	r1, #188	@ 0xbc
 8000916:	2077      	movs	r0, #119	@ 0x77
 8000918:	f7ff fd2c 	bl	8000374 <BMP180_I2C1_Read16>
 800091c:	4603      	mov	r3, r0
 800091e:	847b      	strh	r3, [r7, #34]	@ 0x22
	MD = BMP180_I2C1_Read16(0x77, 0xBE);
 8000920:	21be      	movs	r1, #190	@ 0xbe
 8000922:	2077      	movs	r0, #119	@ 0x77
 8000924:	f7ff fd26 	bl	8000374 <BMP180_I2C1_Read16>
 8000928:	4603      	mov	r3, r0
 800092a:	843b      	strh	r3, [r7, #32]




		// READ ID
		ID = BMP180_I2C1_Read8(0x77, 0xD0);
 800092c:	21d0      	movs	r1, #208	@ 0xd0
 800092e:	2077      	movs	r0, #119	@ 0x77
 8000930:	f7ff fcaa 	bl	8000288 <BMP180_I2C1_Read8>
 8000934:	4603      	mov	r3, r0
 8000936:	77fb      	strb	r3, [r7, #31]

		//TEMPERATURE
		// Request Temp
		BMP180_I2C1_Write8(0x77, 0xF4, 0x2E);
 8000938:	222e      	movs	r2, #46	@ 0x2e
 800093a:	21f4      	movs	r1, #244	@ 0xf4
 800093c:	2077      	movs	r0, #119	@ 0x77
 800093e:	f7ff fc53 	bl	80001e8 <BMP180_I2C1_Write8>
		// Wait at least 4.5ms
		osDelay(5);
 8000942:	2005      	movs	r0, #5
 8000944:	f000 fe82 	bl	800164c <osDelay>
		// Read Temp
		RawTemp = BMP180_I2C1_Read16(0x77, 0xF6);
 8000948:	21f6      	movs	r1, #246	@ 0xf6
 800094a:	2077      	movs	r0, #119	@ 0x77
 800094c:	f7ff fd12 	bl	8000374 <BMP180_I2C1_Read16>
 8000950:	4603      	mov	r3, r0
 8000952:	83bb      	strh	r3, [r7, #28]
		// Cal
		X1 = ((RawTemp - (int32_t)AC6) * (int32_t)AC5) >> 15;
 8000954:	8bba      	ldrh	r2, [r7, #28]
 8000956:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000958:	1ad3      	subs	r3, r2, r3
 800095a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800095c:	fb02 f303 	mul.w	r3, r2, r3
 8000960:	13db      	asrs	r3, r3, #15
 8000962:	61bb      	str	r3, [r7, #24]
		X2 = ((int32_t)MC << 11) / (X1 + MD);
 8000964:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8000968:	02da      	lsls	r2, r3, #11
 800096a:	f9b7 1020 	ldrsh.w	r1, [r7, #32]
 800096e:	69bb      	ldr	r3, [r7, #24]
 8000970:	440b      	add	r3, r1
 8000972:	fb92 f3f3 	sdiv	r3, r2, r3
 8000976:	617b      	str	r3, [r7, #20]
		B5 = X1 + X2;
 8000978:	69ba      	ldr	r2, [r7, #24]
 800097a:	697b      	ldr	r3, [r7, #20]
 800097c:	4413      	add	r3, r2
 800097e:	613b      	str	r3, [r7, #16]
		// đơn vị: 0.1 °C
		T = (B5 + 8) >> 4;
 8000980:	693b      	ldr	r3, [r7, #16]
 8000982:	3308      	adds	r3, #8
 8000984:	111b      	asrs	r3, r3, #4
 8000986:	60fb      	str	r3, [r7, #12]
		global_temp = T;
 8000988:	4a04      	ldr	r2, [pc, #16]	@ (800099c <ReadSensorTask+0xa8>)
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	6013      	str	r3, [r2, #0]
		osDelay(500);
 800098e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000992:	f000 fe5b 	bl	800164c <osDelay>
		ID = BMP180_I2C1_Read8(0x77, 0xD0);
 8000996:	bf00      	nop
 8000998:	e7c8      	b.n	800092c <ReadSensorTask+0x38>
 800099a:	bf00      	nop
 800099c:	200002d8 	.word	0x200002d8

080009a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a4:	b672      	cpsid	i
}
 80009a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009a8:	bf00      	nop
 80009aa:	e7fd      	b.n	80009a8 <Error_Handler+0x8>

080009ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80009b2:	4b18      	ldr	r3, [pc, #96]	@ (8000a14 <HAL_MspInit+0x68>)
 80009b4:	699b      	ldr	r3, [r3, #24]
 80009b6:	4a17      	ldr	r2, [pc, #92]	@ (8000a14 <HAL_MspInit+0x68>)
 80009b8:	f043 0301 	orr.w	r3, r3, #1
 80009bc:	6193      	str	r3, [r2, #24]
 80009be:	4b15      	ldr	r3, [pc, #84]	@ (8000a14 <HAL_MspInit+0x68>)
 80009c0:	699b      	ldr	r3, [r3, #24]
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	60bb      	str	r3, [r7, #8]
 80009c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ca:	4b12      	ldr	r3, [pc, #72]	@ (8000a14 <HAL_MspInit+0x68>)
 80009cc:	69db      	ldr	r3, [r3, #28]
 80009ce:	4a11      	ldr	r2, [pc, #68]	@ (8000a14 <HAL_MspInit+0x68>)
 80009d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009d4:	61d3      	str	r3, [r2, #28]
 80009d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000a14 <HAL_MspInit+0x68>)
 80009d8:	69db      	ldr	r3, [r3, #28]
 80009da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009de:	607b      	str	r3, [r7, #4]
 80009e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009e2:	2200      	movs	r2, #0
 80009e4:	210f      	movs	r1, #15
 80009e6:	f06f 0001 	mvn.w	r0, #1
 80009ea:	f000 f9be 	bl	8000d6a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80009ee:	4b0a      	ldr	r3, [pc, #40]	@ (8000a18 <HAL_MspInit+0x6c>)
 80009f0:	685b      	ldr	r3, [r3, #4]
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	4a04      	ldr	r2, [pc, #16]	@ (8000a18 <HAL_MspInit+0x6c>)
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	3710      	adds	r7, #16
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40021000 	.word	0x40021000
 8000a18:	40010000 	.word	0x40010000

08000a1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a20:	bf00      	nop
 8000a22:	e7fd      	b.n	8000a20 <NMI_Handler+0x4>

08000a24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a28:	bf00      	nop
 8000a2a:	e7fd      	b.n	8000a28 <HardFault_Handler+0x4>

08000a2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a30:	bf00      	nop
 8000a32:	e7fd      	b.n	8000a30 <MemManage_Handler+0x4>

08000a34 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a38:	bf00      	nop
 8000a3a:	e7fd      	b.n	8000a38 <BusFault_Handler+0x4>

08000a3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a40:	bf00      	nop
 8000a42:	e7fd      	b.n	8000a40 <UsageFault_Handler+0x4>

08000a44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bc80      	pop	{r7}
 8000a4e:	4770      	bx	lr

08000a50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a54:	f000 f8b2 	bl	8000bbc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000a58:	f001 fb82 	bl	8002160 <xTaskGetSchedulerState>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b01      	cmp	r3, #1
 8000a60:	d001      	beq.n	8000a66 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000a62:	f001 fd71 	bl	8002548 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
	...

08000a6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b086      	sub	sp, #24
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a74:	4a14      	ldr	r2, [pc, #80]	@ (8000ac8 <_sbrk+0x5c>)
 8000a76:	4b15      	ldr	r3, [pc, #84]	@ (8000acc <_sbrk+0x60>)
 8000a78:	1ad3      	subs	r3, r2, r3
 8000a7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a80:	4b13      	ldr	r3, [pc, #76]	@ (8000ad0 <_sbrk+0x64>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d102      	bne.n	8000a8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a88:	4b11      	ldr	r3, [pc, #68]	@ (8000ad0 <_sbrk+0x64>)
 8000a8a:	4a12      	ldr	r2, [pc, #72]	@ (8000ad4 <_sbrk+0x68>)
 8000a8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a8e:	4b10      	ldr	r3, [pc, #64]	@ (8000ad0 <_sbrk+0x64>)
 8000a90:	681a      	ldr	r2, [r3, #0]
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4413      	add	r3, r2
 8000a96:	693a      	ldr	r2, [r7, #16]
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	d207      	bcs.n	8000aac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a9c:	f001 ffae 	bl	80029fc <__errno>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	220c      	movs	r2, #12
 8000aa4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8000aaa:	e009      	b.n	8000ac0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000aac:	4b08      	ldr	r3, [pc, #32]	@ (8000ad0 <_sbrk+0x64>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ab2:	4b07      	ldr	r3, [pc, #28]	@ (8000ad0 <_sbrk+0x64>)
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	4413      	add	r3, r2
 8000aba:	4a05      	ldr	r2, [pc, #20]	@ (8000ad0 <_sbrk+0x64>)
 8000abc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000abe:	68fb      	ldr	r3, [r7, #12]
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3718      	adds	r7, #24
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	20005000 	.word	0x20005000
 8000acc:	00000400 	.word	0x00000400
 8000ad0:	20000314 	.word	0x20000314
 8000ad4:	200011b8 	.word	0x200011b8

08000ad8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bc80      	pop	{r7}
 8000ae2:	4770      	bx	lr

08000ae4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ae4:	f7ff fff8 	bl	8000ad8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ae8:	480b      	ldr	r0, [pc, #44]	@ (8000b18 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000aea:	490c      	ldr	r1, [pc, #48]	@ (8000b1c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000aec:	4a0c      	ldr	r2, [pc, #48]	@ (8000b20 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000aee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000af0:	e002      	b.n	8000af8 <LoopCopyDataInit>

08000af2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000af2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000af4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000af6:	3304      	adds	r3, #4

08000af8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000af8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000afa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000afc:	d3f9      	bcc.n	8000af2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000afe:	4a09      	ldr	r2, [pc, #36]	@ (8000b24 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000b00:	4c09      	ldr	r4, [pc, #36]	@ (8000b28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b04:	e001      	b.n	8000b0a <LoopFillZerobss>

08000b06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b08:	3204      	adds	r2, #4

08000b0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b0c:	d3fb      	bcc.n	8000b06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b0e:	f001 ff7b 	bl	8002a08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b12:	f7ff fe2f 	bl	8000774 <main>
  bx lr
 8000b16:	4770      	bx	lr
  ldr r0, =_sdata
 8000b18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b1c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000b20:	080033e4 	.word	0x080033e4
  ldr r2, =_sbss
 8000b24:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000b28:	200011b8 	.word	0x200011b8

08000b2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b2c:	e7fe      	b.n	8000b2c <ADC1_2_IRQHandler>
	...

08000b30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b34:	4b08      	ldr	r3, [pc, #32]	@ (8000b58 <HAL_Init+0x28>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a07      	ldr	r2, [pc, #28]	@ (8000b58 <HAL_Init+0x28>)
 8000b3a:	f043 0310 	orr.w	r3, r3, #16
 8000b3e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b40:	2003      	movs	r0, #3
 8000b42:	f000 f907 	bl	8000d54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b46:	200f      	movs	r0, #15
 8000b48:	f000 f808 	bl	8000b5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b4c:	f7ff ff2e 	bl	80009ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b50:	2300      	movs	r3, #0
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40022000 	.word	0x40022000

08000b5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b64:	4b12      	ldr	r3, [pc, #72]	@ (8000bb0 <HAL_InitTick+0x54>)
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	4b12      	ldr	r3, [pc, #72]	@ (8000bb4 <HAL_InitTick+0x58>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f000 f911 	bl	8000da2 <HAL_SYSTICK_Config>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b86:	2301      	movs	r3, #1
 8000b88:	e00e      	b.n	8000ba8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	2b0f      	cmp	r3, #15
 8000b8e:	d80a      	bhi.n	8000ba6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b90:	2200      	movs	r2, #0
 8000b92:	6879      	ldr	r1, [r7, #4]
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	f000 f8e7 	bl	8000d6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b9c:	4a06      	ldr	r2, [pc, #24]	@ (8000bb8 <HAL_InitTick+0x5c>)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	e000      	b.n	8000ba8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ba6:	2301      	movs	r3, #1
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	3708      	adds	r7, #8
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	20000000 	.word	0x20000000
 8000bb4:	20000008 	.word	0x20000008
 8000bb8:	20000004 	.word	0x20000004

08000bbc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bc0:	4b05      	ldr	r3, [pc, #20]	@ (8000bd8 <HAL_IncTick+0x1c>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	4b05      	ldr	r3, [pc, #20]	@ (8000bdc <HAL_IncTick+0x20>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4413      	add	r3, r2
 8000bcc:	4a03      	ldr	r2, [pc, #12]	@ (8000bdc <HAL_IncTick+0x20>)
 8000bce:	6013      	str	r3, [r2, #0]
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bc80      	pop	{r7}
 8000bd6:	4770      	bx	lr
 8000bd8:	20000008 	.word	0x20000008
 8000bdc:	20000318 	.word	0x20000318

08000be0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  return uwTick;
 8000be4:	4b02      	ldr	r3, [pc, #8]	@ (8000bf0 <HAL_GetTick+0x10>)
 8000be6:	681b      	ldr	r3, [r3, #0]
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bc80      	pop	{r7}
 8000bee:	4770      	bx	lr
 8000bf0:	20000318 	.word	0x20000318

08000bf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b085      	sub	sp, #20
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	f003 0307 	and.w	r3, r3, #7
 8000c02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c04:	4b0c      	ldr	r3, [pc, #48]	@ (8000c38 <__NVIC_SetPriorityGrouping+0x44>)
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c0a:	68ba      	ldr	r2, [r7, #8]
 8000c0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c10:	4013      	ands	r3, r2
 8000c12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c1c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c26:	4a04      	ldr	r2, [pc, #16]	@ (8000c38 <__NVIC_SetPriorityGrouping+0x44>)
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	60d3      	str	r3, [r2, #12]
}
 8000c2c:	bf00      	nop
 8000c2e:	3714      	adds	r7, #20
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bc80      	pop	{r7}
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c40:	4b04      	ldr	r3, [pc, #16]	@ (8000c54 <__NVIC_GetPriorityGrouping+0x18>)
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	0a1b      	lsrs	r3, r3, #8
 8000c46:	f003 0307 	and.w	r3, r3, #7
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bc80      	pop	{r7}
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	6039      	str	r1, [r7, #0]
 8000c62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	db0a      	blt.n	8000c82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	b2da      	uxtb	r2, r3
 8000c70:	490c      	ldr	r1, [pc, #48]	@ (8000ca4 <__NVIC_SetPriority+0x4c>)
 8000c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c76:	0112      	lsls	r2, r2, #4
 8000c78:	b2d2      	uxtb	r2, r2
 8000c7a:	440b      	add	r3, r1
 8000c7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c80:	e00a      	b.n	8000c98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	b2da      	uxtb	r2, r3
 8000c86:	4908      	ldr	r1, [pc, #32]	@ (8000ca8 <__NVIC_SetPriority+0x50>)
 8000c88:	79fb      	ldrb	r3, [r7, #7]
 8000c8a:	f003 030f 	and.w	r3, r3, #15
 8000c8e:	3b04      	subs	r3, #4
 8000c90:	0112      	lsls	r2, r2, #4
 8000c92:	b2d2      	uxtb	r2, r2
 8000c94:	440b      	add	r3, r1
 8000c96:	761a      	strb	r2, [r3, #24]
}
 8000c98:	bf00      	nop
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bc80      	pop	{r7}
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	e000e100 	.word	0xe000e100
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b089      	sub	sp, #36	@ 0x24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	60f8      	str	r0, [r7, #12]
 8000cb4:	60b9      	str	r1, [r7, #8]
 8000cb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	f003 0307 	and.w	r3, r3, #7
 8000cbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cc0:	69fb      	ldr	r3, [r7, #28]
 8000cc2:	f1c3 0307 	rsb	r3, r3, #7
 8000cc6:	2b04      	cmp	r3, #4
 8000cc8:	bf28      	it	cs
 8000cca:	2304      	movcs	r3, #4
 8000ccc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	3304      	adds	r3, #4
 8000cd2:	2b06      	cmp	r3, #6
 8000cd4:	d902      	bls.n	8000cdc <NVIC_EncodePriority+0x30>
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	3b03      	subs	r3, #3
 8000cda:	e000      	b.n	8000cde <NVIC_EncodePriority+0x32>
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ce4:	69bb      	ldr	r3, [r7, #24]
 8000ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cea:	43da      	mvns	r2, r3
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	401a      	ands	r2, r3
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cf4:	f04f 31ff 	mov.w	r1, #4294967295
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfe:	43d9      	mvns	r1, r3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d04:	4313      	orrs	r3, r2
         );
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3724      	adds	r7, #36	@ 0x24
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bc80      	pop	{r7}
 8000d0e:	4770      	bx	lr

08000d10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	3b01      	subs	r3, #1
 8000d1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d20:	d301      	bcc.n	8000d26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d22:	2301      	movs	r3, #1
 8000d24:	e00f      	b.n	8000d46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d26:	4a0a      	ldr	r2, [pc, #40]	@ (8000d50 <SysTick_Config+0x40>)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	3b01      	subs	r3, #1
 8000d2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d2e:	210f      	movs	r1, #15
 8000d30:	f04f 30ff 	mov.w	r0, #4294967295
 8000d34:	f7ff ff90 	bl	8000c58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d38:	4b05      	ldr	r3, [pc, #20]	@ (8000d50 <SysTick_Config+0x40>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d3e:	4b04      	ldr	r3, [pc, #16]	@ (8000d50 <SysTick_Config+0x40>)
 8000d40:	2207      	movs	r2, #7
 8000d42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d44:	2300      	movs	r3, #0
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	e000e010 	.word	0xe000e010

08000d54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d5c:	6878      	ldr	r0, [r7, #4]
 8000d5e:	f7ff ff49 	bl	8000bf4 <__NVIC_SetPriorityGrouping>
}
 8000d62:	bf00      	nop
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b086      	sub	sp, #24
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	4603      	mov	r3, r0
 8000d72:	60b9      	str	r1, [r7, #8]
 8000d74:	607a      	str	r2, [r7, #4]
 8000d76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d7c:	f7ff ff5e 	bl	8000c3c <__NVIC_GetPriorityGrouping>
 8000d80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	68b9      	ldr	r1, [r7, #8]
 8000d86:	6978      	ldr	r0, [r7, #20]
 8000d88:	f7ff ff90 	bl	8000cac <NVIC_EncodePriority>
 8000d8c:	4602      	mov	r2, r0
 8000d8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d92:	4611      	mov	r1, r2
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff ff5f 	bl	8000c58 <__NVIC_SetPriority>
}
 8000d9a:	bf00      	nop
 8000d9c:	3718      	adds	r7, #24
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}

08000da2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000da2:	b580      	push	{r7, lr}
 8000da4:	b082      	sub	sp, #8
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000daa:	6878      	ldr	r0, [r7, #4]
 8000dac:	f7ff ffb0 	bl	8000d10 <SysTick_Config>
 8000db0:	4603      	mov	r3, r0
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
	...

08000dbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b086      	sub	sp, #24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d101      	bne.n	8000dce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	e272      	b.n	80012b4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f003 0301 	and.w	r3, r3, #1
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	f000 8087 	beq.w	8000eea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ddc:	4b92      	ldr	r3, [pc, #584]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	f003 030c 	and.w	r3, r3, #12
 8000de4:	2b04      	cmp	r3, #4
 8000de6:	d00c      	beq.n	8000e02 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000de8:	4b8f      	ldr	r3, [pc, #572]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f003 030c 	and.w	r3, r3, #12
 8000df0:	2b08      	cmp	r3, #8
 8000df2:	d112      	bne.n	8000e1a <HAL_RCC_OscConfig+0x5e>
 8000df4:	4b8c      	ldr	r3, [pc, #560]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000dfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e00:	d10b      	bne.n	8000e1a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e02:	4b89      	ldr	r3, [pc, #548]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d06c      	beq.n	8000ee8 <HAL_RCC_OscConfig+0x12c>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d168      	bne.n	8000ee8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	e24c      	b.n	80012b4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e22:	d106      	bne.n	8000e32 <HAL_RCC_OscConfig+0x76>
 8000e24:	4b80      	ldr	r3, [pc, #512]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a7f      	ldr	r2, [pc, #508]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000e2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e2e:	6013      	str	r3, [r2, #0]
 8000e30:	e02e      	b.n	8000e90 <HAL_RCC_OscConfig+0xd4>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d10c      	bne.n	8000e54 <HAL_RCC_OscConfig+0x98>
 8000e3a:	4b7b      	ldr	r3, [pc, #492]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a7a      	ldr	r2, [pc, #488]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000e40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e44:	6013      	str	r3, [r2, #0]
 8000e46:	4b78      	ldr	r3, [pc, #480]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a77      	ldr	r2, [pc, #476]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000e4c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e50:	6013      	str	r3, [r2, #0]
 8000e52:	e01d      	b.n	8000e90 <HAL_RCC_OscConfig+0xd4>
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000e5c:	d10c      	bne.n	8000e78 <HAL_RCC_OscConfig+0xbc>
 8000e5e:	4b72      	ldr	r3, [pc, #456]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a71      	ldr	r2, [pc, #452]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000e64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e68:	6013      	str	r3, [r2, #0]
 8000e6a:	4b6f      	ldr	r3, [pc, #444]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a6e      	ldr	r2, [pc, #440]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000e70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e74:	6013      	str	r3, [r2, #0]
 8000e76:	e00b      	b.n	8000e90 <HAL_RCC_OscConfig+0xd4>
 8000e78:	4b6b      	ldr	r3, [pc, #428]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a6a      	ldr	r2, [pc, #424]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000e7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e82:	6013      	str	r3, [r2, #0]
 8000e84:	4b68      	ldr	r3, [pc, #416]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a67      	ldr	r2, [pc, #412]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000e8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e8e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d013      	beq.n	8000ec0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e98:	f7ff fea2 	bl	8000be0 <HAL_GetTick>
 8000e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e9e:	e008      	b.n	8000eb2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ea0:	f7ff fe9e 	bl	8000be0 <HAL_GetTick>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	2b64      	cmp	r3, #100	@ 0x64
 8000eac:	d901      	bls.n	8000eb2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000eae:	2303      	movs	r3, #3
 8000eb0:	e200      	b.n	80012b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eb2:	4b5d      	ldr	r3, [pc, #372]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d0f0      	beq.n	8000ea0 <HAL_RCC_OscConfig+0xe4>
 8000ebe:	e014      	b.n	8000eea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ec0:	f7ff fe8e 	bl	8000be0 <HAL_GetTick>
 8000ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ec6:	e008      	b.n	8000eda <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ec8:	f7ff fe8a 	bl	8000be0 <HAL_GetTick>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	2b64      	cmp	r3, #100	@ 0x64
 8000ed4:	d901      	bls.n	8000eda <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	e1ec      	b.n	80012b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000eda:	4b53      	ldr	r3, [pc, #332]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d1f0      	bne.n	8000ec8 <HAL_RCC_OscConfig+0x10c>
 8000ee6:	e000      	b.n	8000eea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ee8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f003 0302 	and.w	r3, r3, #2
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d063      	beq.n	8000fbe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ef6:	4b4c      	ldr	r3, [pc, #304]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	f003 030c 	and.w	r3, r3, #12
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d00b      	beq.n	8000f1a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f02:	4b49      	ldr	r3, [pc, #292]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	f003 030c 	and.w	r3, r3, #12
 8000f0a:	2b08      	cmp	r3, #8
 8000f0c:	d11c      	bne.n	8000f48 <HAL_RCC_OscConfig+0x18c>
 8000f0e:	4b46      	ldr	r3, [pc, #280]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d116      	bne.n	8000f48 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f1a:	4b43      	ldr	r3, [pc, #268]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f003 0302 	and.w	r3, r3, #2
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d005      	beq.n	8000f32 <HAL_RCC_OscConfig+0x176>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	691b      	ldr	r3, [r3, #16]
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d001      	beq.n	8000f32 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e1c0      	b.n	80012b4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f32:	4b3d      	ldr	r3, [pc, #244]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	695b      	ldr	r3, [r3, #20]
 8000f3e:	00db      	lsls	r3, r3, #3
 8000f40:	4939      	ldr	r1, [pc, #228]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000f42:	4313      	orrs	r3, r2
 8000f44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f46:	e03a      	b.n	8000fbe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	691b      	ldr	r3, [r3, #16]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d020      	beq.n	8000f92 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f50:	4b36      	ldr	r3, [pc, #216]	@ (800102c <HAL_RCC_OscConfig+0x270>)
 8000f52:	2201      	movs	r2, #1
 8000f54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f56:	f7ff fe43 	bl	8000be0 <HAL_GetTick>
 8000f5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f5c:	e008      	b.n	8000f70 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f5e:	f7ff fe3f 	bl	8000be0 <HAL_GetTick>
 8000f62:	4602      	mov	r2, r0
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	1ad3      	subs	r3, r2, r3
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	d901      	bls.n	8000f70 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	e1a1      	b.n	80012b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f70:	4b2d      	ldr	r3, [pc, #180]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f003 0302 	and.w	r3, r3, #2
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d0f0      	beq.n	8000f5e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f7c:	4b2a      	ldr	r3, [pc, #168]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	695b      	ldr	r3, [r3, #20]
 8000f88:	00db      	lsls	r3, r3, #3
 8000f8a:	4927      	ldr	r1, [pc, #156]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	600b      	str	r3, [r1, #0]
 8000f90:	e015      	b.n	8000fbe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f92:	4b26      	ldr	r3, [pc, #152]	@ (800102c <HAL_RCC_OscConfig+0x270>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f98:	f7ff fe22 	bl	8000be0 <HAL_GetTick>
 8000f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f9e:	e008      	b.n	8000fb2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fa0:	f7ff fe1e 	bl	8000be0 <HAL_GetTick>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	2b02      	cmp	r3, #2
 8000fac:	d901      	bls.n	8000fb2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000fae:	2303      	movs	r3, #3
 8000fb0:	e180      	b.n	80012b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fb2:	4b1d      	ldr	r3, [pc, #116]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f003 0302 	and.w	r3, r3, #2
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d1f0      	bne.n	8000fa0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f003 0308 	and.w	r3, r3, #8
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d03a      	beq.n	8001040 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	699b      	ldr	r3, [r3, #24]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d019      	beq.n	8001006 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fd2:	4b17      	ldr	r3, [pc, #92]	@ (8001030 <HAL_RCC_OscConfig+0x274>)
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fd8:	f7ff fe02 	bl	8000be0 <HAL_GetTick>
 8000fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fde:	e008      	b.n	8000ff2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fe0:	f7ff fdfe 	bl	8000be0 <HAL_GetTick>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	1ad3      	subs	r3, r2, r3
 8000fea:	2b02      	cmp	r3, #2
 8000fec:	d901      	bls.n	8000ff2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000fee:	2303      	movs	r3, #3
 8000ff0:	e160      	b.n	80012b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ff2:	4b0d      	ldr	r3, [pc, #52]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ff6:	f003 0302 	and.w	r3, r3, #2
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d0f0      	beq.n	8000fe0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000ffe:	2001      	movs	r0, #1
 8001000:	f000 fa9c 	bl	800153c <RCC_Delay>
 8001004:	e01c      	b.n	8001040 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001006:	4b0a      	ldr	r3, [pc, #40]	@ (8001030 <HAL_RCC_OscConfig+0x274>)
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800100c:	f7ff fde8 	bl	8000be0 <HAL_GetTick>
 8001010:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001012:	e00f      	b.n	8001034 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001014:	f7ff fde4 	bl	8000be0 <HAL_GetTick>
 8001018:	4602      	mov	r2, r0
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	2b02      	cmp	r3, #2
 8001020:	d908      	bls.n	8001034 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001022:	2303      	movs	r3, #3
 8001024:	e146      	b.n	80012b4 <HAL_RCC_OscConfig+0x4f8>
 8001026:	bf00      	nop
 8001028:	40021000 	.word	0x40021000
 800102c:	42420000 	.word	0x42420000
 8001030:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001034:	4b92      	ldr	r3, [pc, #584]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 8001036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001038:	f003 0302 	and.w	r3, r3, #2
 800103c:	2b00      	cmp	r3, #0
 800103e:	d1e9      	bne.n	8001014 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f003 0304 	and.w	r3, r3, #4
 8001048:	2b00      	cmp	r3, #0
 800104a:	f000 80a6 	beq.w	800119a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800104e:	2300      	movs	r3, #0
 8001050:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001052:	4b8b      	ldr	r3, [pc, #556]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 8001054:	69db      	ldr	r3, [r3, #28]
 8001056:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800105a:	2b00      	cmp	r3, #0
 800105c:	d10d      	bne.n	800107a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800105e:	4b88      	ldr	r3, [pc, #544]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 8001060:	69db      	ldr	r3, [r3, #28]
 8001062:	4a87      	ldr	r2, [pc, #540]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 8001064:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001068:	61d3      	str	r3, [r2, #28]
 800106a:	4b85      	ldr	r3, [pc, #532]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 800106c:	69db      	ldr	r3, [r3, #28]
 800106e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001072:	60bb      	str	r3, [r7, #8]
 8001074:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001076:	2301      	movs	r3, #1
 8001078:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800107a:	4b82      	ldr	r3, [pc, #520]	@ (8001284 <HAL_RCC_OscConfig+0x4c8>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001082:	2b00      	cmp	r3, #0
 8001084:	d118      	bne.n	80010b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001086:	4b7f      	ldr	r3, [pc, #508]	@ (8001284 <HAL_RCC_OscConfig+0x4c8>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a7e      	ldr	r2, [pc, #504]	@ (8001284 <HAL_RCC_OscConfig+0x4c8>)
 800108c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001090:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001092:	f7ff fda5 	bl	8000be0 <HAL_GetTick>
 8001096:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001098:	e008      	b.n	80010ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800109a:	f7ff fda1 	bl	8000be0 <HAL_GetTick>
 800109e:	4602      	mov	r2, r0
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	2b64      	cmp	r3, #100	@ 0x64
 80010a6:	d901      	bls.n	80010ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80010a8:	2303      	movs	r3, #3
 80010aa:	e103      	b.n	80012b4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010ac:	4b75      	ldr	r3, [pc, #468]	@ (8001284 <HAL_RCC_OscConfig+0x4c8>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d0f0      	beq.n	800109a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d106      	bne.n	80010ce <HAL_RCC_OscConfig+0x312>
 80010c0:	4b6f      	ldr	r3, [pc, #444]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 80010c2:	6a1b      	ldr	r3, [r3, #32]
 80010c4:	4a6e      	ldr	r2, [pc, #440]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 80010c6:	f043 0301 	orr.w	r3, r3, #1
 80010ca:	6213      	str	r3, [r2, #32]
 80010cc:	e02d      	b.n	800112a <HAL_RCC_OscConfig+0x36e>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	68db      	ldr	r3, [r3, #12]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d10c      	bne.n	80010f0 <HAL_RCC_OscConfig+0x334>
 80010d6:	4b6a      	ldr	r3, [pc, #424]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 80010d8:	6a1b      	ldr	r3, [r3, #32]
 80010da:	4a69      	ldr	r2, [pc, #420]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 80010dc:	f023 0301 	bic.w	r3, r3, #1
 80010e0:	6213      	str	r3, [r2, #32]
 80010e2:	4b67      	ldr	r3, [pc, #412]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 80010e4:	6a1b      	ldr	r3, [r3, #32]
 80010e6:	4a66      	ldr	r2, [pc, #408]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 80010e8:	f023 0304 	bic.w	r3, r3, #4
 80010ec:	6213      	str	r3, [r2, #32]
 80010ee:	e01c      	b.n	800112a <HAL_RCC_OscConfig+0x36e>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	2b05      	cmp	r3, #5
 80010f6:	d10c      	bne.n	8001112 <HAL_RCC_OscConfig+0x356>
 80010f8:	4b61      	ldr	r3, [pc, #388]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 80010fa:	6a1b      	ldr	r3, [r3, #32]
 80010fc:	4a60      	ldr	r2, [pc, #384]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 80010fe:	f043 0304 	orr.w	r3, r3, #4
 8001102:	6213      	str	r3, [r2, #32]
 8001104:	4b5e      	ldr	r3, [pc, #376]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 8001106:	6a1b      	ldr	r3, [r3, #32]
 8001108:	4a5d      	ldr	r2, [pc, #372]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 800110a:	f043 0301 	orr.w	r3, r3, #1
 800110e:	6213      	str	r3, [r2, #32]
 8001110:	e00b      	b.n	800112a <HAL_RCC_OscConfig+0x36e>
 8001112:	4b5b      	ldr	r3, [pc, #364]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 8001114:	6a1b      	ldr	r3, [r3, #32]
 8001116:	4a5a      	ldr	r2, [pc, #360]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 8001118:	f023 0301 	bic.w	r3, r3, #1
 800111c:	6213      	str	r3, [r2, #32]
 800111e:	4b58      	ldr	r3, [pc, #352]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 8001120:	6a1b      	ldr	r3, [r3, #32]
 8001122:	4a57      	ldr	r2, [pc, #348]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 8001124:	f023 0304 	bic.w	r3, r3, #4
 8001128:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	68db      	ldr	r3, [r3, #12]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d015      	beq.n	800115e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001132:	f7ff fd55 	bl	8000be0 <HAL_GetTick>
 8001136:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001138:	e00a      	b.n	8001150 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800113a:	f7ff fd51 	bl	8000be0 <HAL_GetTick>
 800113e:	4602      	mov	r2, r0
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	1ad3      	subs	r3, r2, r3
 8001144:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001148:	4293      	cmp	r3, r2
 800114a:	d901      	bls.n	8001150 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800114c:	2303      	movs	r3, #3
 800114e:	e0b1      	b.n	80012b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001150:	4b4b      	ldr	r3, [pc, #300]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 8001152:	6a1b      	ldr	r3, [r3, #32]
 8001154:	f003 0302 	and.w	r3, r3, #2
 8001158:	2b00      	cmp	r3, #0
 800115a:	d0ee      	beq.n	800113a <HAL_RCC_OscConfig+0x37e>
 800115c:	e014      	b.n	8001188 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800115e:	f7ff fd3f 	bl	8000be0 <HAL_GetTick>
 8001162:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001164:	e00a      	b.n	800117c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001166:	f7ff fd3b 	bl	8000be0 <HAL_GetTick>
 800116a:	4602      	mov	r2, r0
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	1ad3      	subs	r3, r2, r3
 8001170:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001174:	4293      	cmp	r3, r2
 8001176:	d901      	bls.n	800117c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001178:	2303      	movs	r3, #3
 800117a:	e09b      	b.n	80012b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800117c:	4b40      	ldr	r3, [pc, #256]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 800117e:	6a1b      	ldr	r3, [r3, #32]
 8001180:	f003 0302 	and.w	r3, r3, #2
 8001184:	2b00      	cmp	r3, #0
 8001186:	d1ee      	bne.n	8001166 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001188:	7dfb      	ldrb	r3, [r7, #23]
 800118a:	2b01      	cmp	r3, #1
 800118c:	d105      	bne.n	800119a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800118e:	4b3c      	ldr	r3, [pc, #240]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 8001190:	69db      	ldr	r3, [r3, #28]
 8001192:	4a3b      	ldr	r2, [pc, #236]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 8001194:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001198:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	69db      	ldr	r3, [r3, #28]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	f000 8087 	beq.w	80012b2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011a4:	4b36      	ldr	r3, [pc, #216]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f003 030c 	and.w	r3, r3, #12
 80011ac:	2b08      	cmp	r3, #8
 80011ae:	d061      	beq.n	8001274 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	69db      	ldr	r3, [r3, #28]
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d146      	bne.n	8001246 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011b8:	4b33      	ldr	r3, [pc, #204]	@ (8001288 <HAL_RCC_OscConfig+0x4cc>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011be:	f7ff fd0f 	bl	8000be0 <HAL_GetTick>
 80011c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011c4:	e008      	b.n	80011d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011c6:	f7ff fd0b 	bl	8000be0 <HAL_GetTick>
 80011ca:	4602      	mov	r2, r0
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d901      	bls.n	80011d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80011d4:	2303      	movs	r3, #3
 80011d6:	e06d      	b.n	80012b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011d8:	4b29      	ldr	r3, [pc, #164]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d1f0      	bne.n	80011c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6a1b      	ldr	r3, [r3, #32]
 80011e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011ec:	d108      	bne.n	8001200 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80011ee:	4b24      	ldr	r3, [pc, #144]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	4921      	ldr	r1, [pc, #132]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 80011fc:	4313      	orrs	r3, r2
 80011fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001200:	4b1f      	ldr	r3, [pc, #124]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6a19      	ldr	r1, [r3, #32]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001210:	430b      	orrs	r3, r1
 8001212:	491b      	ldr	r1, [pc, #108]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 8001214:	4313      	orrs	r3, r2
 8001216:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001218:	4b1b      	ldr	r3, [pc, #108]	@ (8001288 <HAL_RCC_OscConfig+0x4cc>)
 800121a:	2201      	movs	r2, #1
 800121c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800121e:	f7ff fcdf 	bl	8000be0 <HAL_GetTick>
 8001222:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001224:	e008      	b.n	8001238 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001226:	f7ff fcdb 	bl	8000be0 <HAL_GetTick>
 800122a:	4602      	mov	r2, r0
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	2b02      	cmp	r3, #2
 8001232:	d901      	bls.n	8001238 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001234:	2303      	movs	r3, #3
 8001236:	e03d      	b.n	80012b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001238:	4b11      	ldr	r3, [pc, #68]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001240:	2b00      	cmp	r3, #0
 8001242:	d0f0      	beq.n	8001226 <HAL_RCC_OscConfig+0x46a>
 8001244:	e035      	b.n	80012b2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001246:	4b10      	ldr	r3, [pc, #64]	@ (8001288 <HAL_RCC_OscConfig+0x4cc>)
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800124c:	f7ff fcc8 	bl	8000be0 <HAL_GetTick>
 8001250:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001252:	e008      	b.n	8001266 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001254:	f7ff fcc4 	bl	8000be0 <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	2b02      	cmp	r3, #2
 8001260:	d901      	bls.n	8001266 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001262:	2303      	movs	r3, #3
 8001264:	e026      	b.n	80012b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001266:	4b06      	ldr	r3, [pc, #24]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800126e:	2b00      	cmp	r3, #0
 8001270:	d1f0      	bne.n	8001254 <HAL_RCC_OscConfig+0x498>
 8001272:	e01e      	b.n	80012b2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	69db      	ldr	r3, [r3, #28]
 8001278:	2b01      	cmp	r3, #1
 800127a:	d107      	bne.n	800128c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800127c:	2301      	movs	r3, #1
 800127e:	e019      	b.n	80012b4 <HAL_RCC_OscConfig+0x4f8>
 8001280:	40021000 	.word	0x40021000
 8001284:	40007000 	.word	0x40007000
 8001288:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800128c:	4b0b      	ldr	r3, [pc, #44]	@ (80012bc <HAL_RCC_OscConfig+0x500>)
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6a1b      	ldr	r3, [r3, #32]
 800129c:	429a      	cmp	r2, r3
 800129e:	d106      	bne.n	80012ae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d001      	beq.n	80012b2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e000      	b.n	80012b4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80012b2:	2300      	movs	r3, #0
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3718      	adds	r7, #24
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40021000 	.word	0x40021000

080012c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d101      	bne.n	80012d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	e0d0      	b.n	8001476 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80012d4:	4b6a      	ldr	r3, [pc, #424]	@ (8001480 <HAL_RCC_ClockConfig+0x1c0>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f003 0307 	and.w	r3, r3, #7
 80012dc:	683a      	ldr	r2, [r7, #0]
 80012de:	429a      	cmp	r2, r3
 80012e0:	d910      	bls.n	8001304 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012e2:	4b67      	ldr	r3, [pc, #412]	@ (8001480 <HAL_RCC_ClockConfig+0x1c0>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f023 0207 	bic.w	r2, r3, #7
 80012ea:	4965      	ldr	r1, [pc, #404]	@ (8001480 <HAL_RCC_ClockConfig+0x1c0>)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012f2:	4b63      	ldr	r3, [pc, #396]	@ (8001480 <HAL_RCC_ClockConfig+0x1c0>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 0307 	and.w	r3, r3, #7
 80012fa:	683a      	ldr	r2, [r7, #0]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d001      	beq.n	8001304 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001300:	2301      	movs	r3, #1
 8001302:	e0b8      	b.n	8001476 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f003 0302 	and.w	r3, r3, #2
 800130c:	2b00      	cmp	r3, #0
 800130e:	d020      	beq.n	8001352 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f003 0304 	and.w	r3, r3, #4
 8001318:	2b00      	cmp	r3, #0
 800131a:	d005      	beq.n	8001328 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800131c:	4b59      	ldr	r3, [pc, #356]	@ (8001484 <HAL_RCC_ClockConfig+0x1c4>)
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	4a58      	ldr	r2, [pc, #352]	@ (8001484 <HAL_RCC_ClockConfig+0x1c4>)
 8001322:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001326:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 0308 	and.w	r3, r3, #8
 8001330:	2b00      	cmp	r3, #0
 8001332:	d005      	beq.n	8001340 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001334:	4b53      	ldr	r3, [pc, #332]	@ (8001484 <HAL_RCC_ClockConfig+0x1c4>)
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	4a52      	ldr	r2, [pc, #328]	@ (8001484 <HAL_RCC_ClockConfig+0x1c4>)
 800133a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800133e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001340:	4b50      	ldr	r3, [pc, #320]	@ (8001484 <HAL_RCC_ClockConfig+0x1c4>)
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	494d      	ldr	r1, [pc, #308]	@ (8001484 <HAL_RCC_ClockConfig+0x1c4>)
 800134e:	4313      	orrs	r3, r2
 8001350:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	2b00      	cmp	r3, #0
 800135c:	d040      	beq.n	80013e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	2b01      	cmp	r3, #1
 8001364:	d107      	bne.n	8001376 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001366:	4b47      	ldr	r3, [pc, #284]	@ (8001484 <HAL_RCC_ClockConfig+0x1c4>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d115      	bne.n	800139e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e07f      	b.n	8001476 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	2b02      	cmp	r3, #2
 800137c:	d107      	bne.n	800138e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800137e:	4b41      	ldr	r3, [pc, #260]	@ (8001484 <HAL_RCC_ClockConfig+0x1c4>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d109      	bne.n	800139e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e073      	b.n	8001476 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800138e:	4b3d      	ldr	r3, [pc, #244]	@ (8001484 <HAL_RCC_ClockConfig+0x1c4>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	2b00      	cmp	r3, #0
 8001398:	d101      	bne.n	800139e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e06b      	b.n	8001476 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800139e:	4b39      	ldr	r3, [pc, #228]	@ (8001484 <HAL_RCC_ClockConfig+0x1c4>)
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f023 0203 	bic.w	r2, r3, #3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	4936      	ldr	r1, [pc, #216]	@ (8001484 <HAL_RCC_ClockConfig+0x1c4>)
 80013ac:	4313      	orrs	r3, r2
 80013ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80013b0:	f7ff fc16 	bl	8000be0 <HAL_GetTick>
 80013b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013b6:	e00a      	b.n	80013ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013b8:	f7ff fc12 	bl	8000be0 <HAL_GetTick>
 80013bc:	4602      	mov	r2, r0
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d901      	bls.n	80013ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80013ca:	2303      	movs	r3, #3
 80013cc:	e053      	b.n	8001476 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013ce:	4b2d      	ldr	r3, [pc, #180]	@ (8001484 <HAL_RCC_ClockConfig+0x1c4>)
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f003 020c 	and.w	r2, r3, #12
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	429a      	cmp	r2, r3
 80013de:	d1eb      	bne.n	80013b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80013e0:	4b27      	ldr	r3, [pc, #156]	@ (8001480 <HAL_RCC_ClockConfig+0x1c0>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 0307 	and.w	r3, r3, #7
 80013e8:	683a      	ldr	r2, [r7, #0]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d210      	bcs.n	8001410 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013ee:	4b24      	ldr	r3, [pc, #144]	@ (8001480 <HAL_RCC_ClockConfig+0x1c0>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f023 0207 	bic.w	r2, r3, #7
 80013f6:	4922      	ldr	r1, [pc, #136]	@ (8001480 <HAL_RCC_ClockConfig+0x1c0>)
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013fe:	4b20      	ldr	r3, [pc, #128]	@ (8001480 <HAL_RCC_ClockConfig+0x1c0>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0307 	and.w	r3, r3, #7
 8001406:	683a      	ldr	r2, [r7, #0]
 8001408:	429a      	cmp	r2, r3
 800140a:	d001      	beq.n	8001410 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e032      	b.n	8001476 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 0304 	and.w	r3, r3, #4
 8001418:	2b00      	cmp	r3, #0
 800141a:	d008      	beq.n	800142e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800141c:	4b19      	ldr	r3, [pc, #100]	@ (8001484 <HAL_RCC_ClockConfig+0x1c4>)
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	4916      	ldr	r1, [pc, #88]	@ (8001484 <HAL_RCC_ClockConfig+0x1c4>)
 800142a:	4313      	orrs	r3, r2
 800142c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 0308 	and.w	r3, r3, #8
 8001436:	2b00      	cmp	r3, #0
 8001438:	d009      	beq.n	800144e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800143a:	4b12      	ldr	r3, [pc, #72]	@ (8001484 <HAL_RCC_ClockConfig+0x1c4>)
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	691b      	ldr	r3, [r3, #16]
 8001446:	00db      	lsls	r3, r3, #3
 8001448:	490e      	ldr	r1, [pc, #56]	@ (8001484 <HAL_RCC_ClockConfig+0x1c4>)
 800144a:	4313      	orrs	r3, r2
 800144c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800144e:	f000 f821 	bl	8001494 <HAL_RCC_GetSysClockFreq>
 8001452:	4602      	mov	r2, r0
 8001454:	4b0b      	ldr	r3, [pc, #44]	@ (8001484 <HAL_RCC_ClockConfig+0x1c4>)
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	091b      	lsrs	r3, r3, #4
 800145a:	f003 030f 	and.w	r3, r3, #15
 800145e:	490a      	ldr	r1, [pc, #40]	@ (8001488 <HAL_RCC_ClockConfig+0x1c8>)
 8001460:	5ccb      	ldrb	r3, [r1, r3]
 8001462:	fa22 f303 	lsr.w	r3, r2, r3
 8001466:	4a09      	ldr	r2, [pc, #36]	@ (800148c <HAL_RCC_ClockConfig+0x1cc>)
 8001468:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800146a:	4b09      	ldr	r3, [pc, #36]	@ (8001490 <HAL_RCC_ClockConfig+0x1d0>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff fb74 	bl	8000b5c <HAL_InitTick>

  return HAL_OK;
 8001474:	2300      	movs	r3, #0
}
 8001476:	4618      	mov	r0, r3
 8001478:	3710      	adds	r7, #16
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	40022000 	.word	0x40022000
 8001484:	40021000 	.word	0x40021000
 8001488:	08003384 	.word	0x08003384
 800148c:	20000000 	.word	0x20000000
 8001490:	20000004 	.word	0x20000004

08001494 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001494:	b480      	push	{r7}
 8001496:	b087      	sub	sp, #28
 8001498:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800149a:	2300      	movs	r3, #0
 800149c:	60fb      	str	r3, [r7, #12]
 800149e:	2300      	movs	r3, #0
 80014a0:	60bb      	str	r3, [r7, #8]
 80014a2:	2300      	movs	r3, #0
 80014a4:	617b      	str	r3, [r7, #20]
 80014a6:	2300      	movs	r3, #0
 80014a8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80014aa:	2300      	movs	r3, #0
 80014ac:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80014ae:	4b1e      	ldr	r3, [pc, #120]	@ (8001528 <HAL_RCC_GetSysClockFreq+0x94>)
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	f003 030c 	and.w	r3, r3, #12
 80014ba:	2b04      	cmp	r3, #4
 80014bc:	d002      	beq.n	80014c4 <HAL_RCC_GetSysClockFreq+0x30>
 80014be:	2b08      	cmp	r3, #8
 80014c0:	d003      	beq.n	80014ca <HAL_RCC_GetSysClockFreq+0x36>
 80014c2:	e027      	b.n	8001514 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80014c4:	4b19      	ldr	r3, [pc, #100]	@ (800152c <HAL_RCC_GetSysClockFreq+0x98>)
 80014c6:	613b      	str	r3, [r7, #16]
      break;
 80014c8:	e027      	b.n	800151a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	0c9b      	lsrs	r3, r3, #18
 80014ce:	f003 030f 	and.w	r3, r3, #15
 80014d2:	4a17      	ldr	r2, [pc, #92]	@ (8001530 <HAL_RCC_GetSysClockFreq+0x9c>)
 80014d4:	5cd3      	ldrb	r3, [r2, r3]
 80014d6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d010      	beq.n	8001504 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80014e2:	4b11      	ldr	r3, [pc, #68]	@ (8001528 <HAL_RCC_GetSysClockFreq+0x94>)
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	0c5b      	lsrs	r3, r3, #17
 80014e8:	f003 0301 	and.w	r3, r3, #1
 80014ec:	4a11      	ldr	r2, [pc, #68]	@ (8001534 <HAL_RCC_GetSysClockFreq+0xa0>)
 80014ee:	5cd3      	ldrb	r3, [r2, r3]
 80014f0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a0d      	ldr	r2, [pc, #52]	@ (800152c <HAL_RCC_GetSysClockFreq+0x98>)
 80014f6:	fb03 f202 	mul.w	r2, r3, r2
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001500:	617b      	str	r3, [r7, #20]
 8001502:	e004      	b.n	800150e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	4a0c      	ldr	r2, [pc, #48]	@ (8001538 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001508:	fb02 f303 	mul.w	r3, r2, r3
 800150c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	613b      	str	r3, [r7, #16]
      break;
 8001512:	e002      	b.n	800151a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001514:	4b05      	ldr	r3, [pc, #20]	@ (800152c <HAL_RCC_GetSysClockFreq+0x98>)
 8001516:	613b      	str	r3, [r7, #16]
      break;
 8001518:	bf00      	nop
    }
  }
  return sysclockfreq;
 800151a:	693b      	ldr	r3, [r7, #16]
}
 800151c:	4618      	mov	r0, r3
 800151e:	371c      	adds	r7, #28
 8001520:	46bd      	mov	sp, r7
 8001522:	bc80      	pop	{r7}
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	40021000 	.word	0x40021000
 800152c:	007a1200 	.word	0x007a1200
 8001530:	08003394 	.word	0x08003394
 8001534:	080033a4 	.word	0x080033a4
 8001538:	003d0900 	.word	0x003d0900

0800153c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001544:	4b0a      	ldr	r3, [pc, #40]	@ (8001570 <RCC_Delay+0x34>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a0a      	ldr	r2, [pc, #40]	@ (8001574 <RCC_Delay+0x38>)
 800154a:	fba2 2303 	umull	r2, r3, r2, r3
 800154e:	0a5b      	lsrs	r3, r3, #9
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	fb02 f303 	mul.w	r3, r2, r3
 8001556:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001558:	bf00      	nop
  }
  while (Delay --);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	1e5a      	subs	r2, r3, #1
 800155e:	60fa      	str	r2, [r7, #12]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d1f9      	bne.n	8001558 <RCC_Delay+0x1c>
}
 8001564:	bf00      	nop
 8001566:	bf00      	nop
 8001568:	3714      	adds	r7, #20
 800156a:	46bd      	mov	sp, r7
 800156c:	bc80      	pop	{r7}
 800156e:	4770      	bx	lr
 8001570:	20000000 	.word	0x20000000
 8001574:	10624dd3 	.word	0x10624dd3

08001578 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001578:	b480      	push	{r7}
 800157a:	b085      	sub	sp, #20
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001582:	2300      	movs	r3, #0
 8001584:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001586:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800158a:	2b84      	cmp	r3, #132	@ 0x84
 800158c:	d005      	beq.n	800159a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800158e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	4413      	add	r3, r2
 8001596:	3303      	adds	r3, #3
 8001598:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800159a:	68fb      	ldr	r3, [r7, #12]
}
 800159c:	4618      	mov	r0, r3
 800159e:	3714      	adds	r7, #20
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bc80      	pop	{r7}
 80015a4:	4770      	bx	lr

080015a6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80015aa:	f000 fadf 	bl	8001b6c <vTaskStartScheduler>
  
  return osOK;
 80015ae:	2300      	movs	r3, #0
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80015b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015b6:	b089      	sub	sp, #36	@ 0x24
 80015b8:	af04      	add	r7, sp, #16
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	695b      	ldr	r3, [r3, #20]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d020      	beq.n	8001608 <osThreadCreate+0x54>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	699b      	ldr	r3, [r3, #24]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d01c      	beq.n	8001608 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685c      	ldr	r4, [r3, #4]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	691e      	ldr	r6, [r3, #16]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff ffc9 	bl	8001578 <makeFreeRtosPriority>
 80015e6:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	695b      	ldr	r3, [r3, #20]
 80015ec:	687a      	ldr	r2, [r7, #4]
 80015ee:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80015f0:	9202      	str	r2, [sp, #8]
 80015f2:	9301      	str	r3, [sp, #4]
 80015f4:	9100      	str	r1, [sp, #0]
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	4632      	mov	r2, r6
 80015fa:	4629      	mov	r1, r5
 80015fc:	4620      	mov	r0, r4
 80015fe:	f000 f8e8 	bl	80017d2 <xTaskCreateStatic>
 8001602:	4603      	mov	r3, r0
 8001604:	60fb      	str	r3, [r7, #12]
 8001606:	e01c      	b.n	8001642 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	685c      	ldr	r4, [r3, #4]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001614:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff ffab 	bl	8001578 <makeFreeRtosPriority>
 8001622:	4602      	mov	r2, r0
 8001624:	f107 030c 	add.w	r3, r7, #12
 8001628:	9301      	str	r3, [sp, #4]
 800162a:	9200      	str	r2, [sp, #0]
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	4632      	mov	r2, r6
 8001630:	4629      	mov	r1, r5
 8001632:	4620      	mov	r0, r4
 8001634:	f000 f92d 	bl	8001892 <xTaskCreate>
 8001638:	4603      	mov	r3, r0
 800163a:	2b01      	cmp	r3, #1
 800163c:	d001      	beq.n	8001642 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800163e:	2300      	movs	r3, #0
 8001640:	e000      	b.n	8001644 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001642:	68fb      	ldr	r3, [r7, #12]
}
 8001644:	4618      	mov	r0, r3
 8001646:	3714      	adds	r7, #20
 8001648:	46bd      	mov	sp, r7
 800164a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800164c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <osDelay+0x16>
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	e000      	b.n	8001664 <osDelay+0x18>
 8001662:	2301      	movs	r3, #1
 8001664:	4618      	mov	r0, r3
 8001666:	f000 fa4b 	bl	8001b00 <vTaskDelay>
  
  return osOK;
 800166a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800166c:	4618      	mov	r0, r3
 800166e:	3710      	adds	r7, #16
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}

08001674 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f103 0208 	add.w	r2, r3, #8
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	f04f 32ff 	mov.w	r2, #4294967295
 800168c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f103 0208 	add.w	r2, r3, #8
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f103 0208 	add.w	r2, r3, #8
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80016a8:	bf00      	nop
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bc80      	pop	{r7}
 80016b0:	4770      	bx	lr

080016b2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80016b2:	b480      	push	{r7}
 80016b4:	b083      	sub	sp, #12
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2200      	movs	r2, #0
 80016be:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bc80      	pop	{r7}
 80016c8:	4770      	bx	lr

080016ca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80016ca:	b480      	push	{r7}
 80016cc:	b085      	sub	sp, #20
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
 80016d2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	68fa      	ldr	r2, [r7, #12]
 80016de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	689a      	ldr	r2, [r3, #8]
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	683a      	ldr	r2, [r7, #0]
 80016ee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	683a      	ldr	r2, [r7, #0]
 80016f4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	1c5a      	adds	r2, r3, #1
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	601a      	str	r2, [r3, #0]
}
 8001706:	bf00      	nop
 8001708:	3714      	adds	r7, #20
 800170a:	46bd      	mov	sp, r7
 800170c:	bc80      	pop	{r7}
 800170e:	4770      	bx	lr

08001710 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001710:	b480      	push	{r7}
 8001712:	b085      	sub	sp, #20
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001726:	d103      	bne.n	8001730 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	691b      	ldr	r3, [r3, #16]
 800172c:	60fb      	str	r3, [r7, #12]
 800172e:	e00c      	b.n	800174a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	3308      	adds	r3, #8
 8001734:	60fb      	str	r3, [r7, #12]
 8001736:	e002      	b.n	800173e <vListInsert+0x2e>
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	68ba      	ldr	r2, [r7, #8]
 8001746:	429a      	cmp	r2, r3
 8001748:	d2f6      	bcs.n	8001738 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	685a      	ldr	r2, [r3, #4]
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	683a      	ldr	r2, [r7, #0]
 8001758:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	68fa      	ldr	r2, [r7, #12]
 800175e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	683a      	ldr	r2, [r7, #0]
 8001764:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	1c5a      	adds	r2, r3, #1
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	601a      	str	r2, [r3, #0]
}
 8001776:	bf00      	nop
 8001778:	3714      	adds	r7, #20
 800177a:	46bd      	mov	sp, r7
 800177c:	bc80      	pop	{r7}
 800177e:	4770      	bx	lr

08001780 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001780:	b480      	push	{r7}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	691b      	ldr	r3, [r3, #16]
 800178c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	6892      	ldr	r2, [r2, #8]
 8001796:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	6852      	ldr	r2, [r2, #4]
 80017a0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d103      	bne.n	80017b4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	689a      	ldr	r2, [r3, #8]
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2200      	movs	r2, #0
 80017b8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	1e5a      	subs	r2, r3, #1
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3714      	adds	r7, #20
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bc80      	pop	{r7}
 80017d0:	4770      	bx	lr

080017d2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b08e      	sub	sp, #56	@ 0x38
 80017d6:	af04      	add	r7, sp, #16
 80017d8:	60f8      	str	r0, [r7, #12]
 80017da:	60b9      	str	r1, [r7, #8]
 80017dc:	607a      	str	r2, [r7, #4]
 80017de:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80017e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d10b      	bne.n	80017fe <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80017e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80017ea:	f383 8811 	msr	BASEPRI, r3
 80017ee:	f3bf 8f6f 	isb	sy
 80017f2:	f3bf 8f4f 	dsb	sy
 80017f6:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80017f8:	bf00      	nop
 80017fa:	bf00      	nop
 80017fc:	e7fd      	b.n	80017fa <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80017fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001800:	2b00      	cmp	r3, #0
 8001802:	d10b      	bne.n	800181c <xTaskCreateStatic+0x4a>
	__asm volatile
 8001804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001808:	f383 8811 	msr	BASEPRI, r3
 800180c:	f3bf 8f6f 	isb	sy
 8001810:	f3bf 8f4f 	dsb	sy
 8001814:	61fb      	str	r3, [r7, #28]
}
 8001816:	bf00      	nop
 8001818:	bf00      	nop
 800181a:	e7fd      	b.n	8001818 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800181c:	2354      	movs	r3, #84	@ 0x54
 800181e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	2b54      	cmp	r3, #84	@ 0x54
 8001824:	d00b      	beq.n	800183e <xTaskCreateStatic+0x6c>
	__asm volatile
 8001826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800182a:	f383 8811 	msr	BASEPRI, r3
 800182e:	f3bf 8f6f 	isb	sy
 8001832:	f3bf 8f4f 	dsb	sy
 8001836:	61bb      	str	r3, [r7, #24]
}
 8001838:	bf00      	nop
 800183a:	bf00      	nop
 800183c:	e7fd      	b.n	800183a <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800183e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8001840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001842:	2b00      	cmp	r3, #0
 8001844:	d01e      	beq.n	8001884 <xTaskCreateStatic+0xb2>
 8001846:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001848:	2b00      	cmp	r3, #0
 800184a:	d01b      	beq.n	8001884 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800184c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800184e:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001852:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001854:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8001856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001858:	2202      	movs	r2, #2
 800185a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800185e:	2300      	movs	r3, #0
 8001860:	9303      	str	r3, [sp, #12]
 8001862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001864:	9302      	str	r3, [sp, #8]
 8001866:	f107 0314 	add.w	r3, r7, #20
 800186a:	9301      	str	r3, [sp, #4]
 800186c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800186e:	9300      	str	r3, [sp, #0]
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	68b9      	ldr	r1, [r7, #8]
 8001876:	68f8      	ldr	r0, [r7, #12]
 8001878:	f000 f850 	bl	800191c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800187c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800187e:	f000 f8d5 	bl	8001a2c <prvAddNewTaskToReadyList>
 8001882:	e001      	b.n	8001888 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8001884:	2300      	movs	r3, #0
 8001886:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8001888:	697b      	ldr	r3, [r7, #20]
	}
 800188a:	4618      	mov	r0, r3
 800188c:	3728      	adds	r7, #40	@ 0x28
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001892:	b580      	push	{r7, lr}
 8001894:	b08c      	sub	sp, #48	@ 0x30
 8001896:	af04      	add	r7, sp, #16
 8001898:	60f8      	str	r0, [r7, #12]
 800189a:	60b9      	str	r1, [r7, #8]
 800189c:	603b      	str	r3, [r7, #0]
 800189e:	4613      	mov	r3, r2
 80018a0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80018a2:	88fb      	ldrh	r3, [r7, #6]
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	4618      	mov	r0, r3
 80018a8:	f000 fe92 	bl	80025d0 <pvPortMalloc>
 80018ac:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d00e      	beq.n	80018d2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80018b4:	2054      	movs	r0, #84	@ 0x54
 80018b6:	f000 fe8b 	bl	80025d0 <pvPortMalloc>
 80018ba:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d003      	beq.n	80018ca <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	697a      	ldr	r2, [r7, #20]
 80018c6:	631a      	str	r2, [r3, #48]	@ 0x30
 80018c8:	e005      	b.n	80018d6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80018ca:	6978      	ldr	r0, [r7, #20]
 80018cc:	f000 ff4e 	bl	800276c <vPortFree>
 80018d0:	e001      	b.n	80018d6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80018d2:	2300      	movs	r3, #0
 80018d4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d017      	beq.n	800190c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	2200      	movs	r2, #0
 80018e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80018e4:	88fa      	ldrh	r2, [r7, #6]
 80018e6:	2300      	movs	r3, #0
 80018e8:	9303      	str	r3, [sp, #12]
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	9302      	str	r3, [sp, #8]
 80018ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018f0:	9301      	str	r3, [sp, #4]
 80018f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018f4:	9300      	str	r3, [sp, #0]
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	68b9      	ldr	r1, [r7, #8]
 80018fa:	68f8      	ldr	r0, [r7, #12]
 80018fc:	f000 f80e 	bl	800191c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001900:	69f8      	ldr	r0, [r7, #28]
 8001902:	f000 f893 	bl	8001a2c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001906:	2301      	movs	r3, #1
 8001908:	61bb      	str	r3, [r7, #24]
 800190a:	e002      	b.n	8001912 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800190c:	f04f 33ff 	mov.w	r3, #4294967295
 8001910:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001912:	69bb      	ldr	r3, [r7, #24]
	}
 8001914:	4618      	mov	r0, r3
 8001916:	3720      	adds	r7, #32
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}

0800191c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b088      	sub	sp, #32
 8001920:	af00      	add	r7, sp, #0
 8001922:	60f8      	str	r0, [r7, #12]
 8001924:	60b9      	str	r1, [r7, #8]
 8001926:	607a      	str	r2, [r7, #4]
 8001928:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800192a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800192c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001934:	3b01      	subs	r3, #1
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	4413      	add	r3, r2
 800193a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	f023 0307 	bic.w	r3, r3, #7
 8001942:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	f003 0307 	and.w	r3, r3, #7
 800194a:	2b00      	cmp	r3, #0
 800194c:	d00b      	beq.n	8001966 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800194e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001952:	f383 8811 	msr	BASEPRI, r3
 8001956:	f3bf 8f6f 	isb	sy
 800195a:	f3bf 8f4f 	dsb	sy
 800195e:	617b      	str	r3, [r7, #20]
}
 8001960:	bf00      	nop
 8001962:	bf00      	nop
 8001964:	e7fd      	b.n	8001962 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d01f      	beq.n	80019ac <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800196c:	2300      	movs	r3, #0
 800196e:	61fb      	str	r3, [r7, #28]
 8001970:	e012      	b.n	8001998 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001972:	68ba      	ldr	r2, [r7, #8]
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	4413      	add	r3, r2
 8001978:	7819      	ldrb	r1, [r3, #0]
 800197a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	4413      	add	r3, r2
 8001980:	3334      	adds	r3, #52	@ 0x34
 8001982:	460a      	mov	r2, r1
 8001984:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8001986:	68ba      	ldr	r2, [r7, #8]
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	4413      	add	r3, r2
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d006      	beq.n	80019a0 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	3301      	adds	r3, #1
 8001996:	61fb      	str	r3, [r7, #28]
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	2b0f      	cmp	r3, #15
 800199c:	d9e9      	bls.n	8001972 <prvInitialiseNewTask+0x56>
 800199e:	e000      	b.n	80019a2 <prvInitialiseNewTask+0x86>
			{
				break;
 80019a0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80019a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019a4:	2200      	movs	r2, #0
 80019a6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80019aa:	e003      	b.n	80019b4 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80019ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019ae:	2200      	movs	r2, #0
 80019b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80019b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019b6:	2b06      	cmp	r3, #6
 80019b8:	d901      	bls.n	80019be <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80019ba:	2306      	movs	r3, #6
 80019bc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80019be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80019c2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80019c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80019c8:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80019ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019cc:	2200      	movs	r2, #0
 80019ce:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80019d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019d2:	3304      	adds	r3, #4
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7ff fe6c 	bl	80016b2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80019da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019dc:	3318      	adds	r3, #24
 80019de:	4618      	mov	r0, r3
 80019e0:	f7ff fe67 	bl	80016b2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80019e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80019e8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80019ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019ec:	f1c3 0207 	rsb	r2, r3, #7
 80019f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019f2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80019f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80019f8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80019fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019fc:	2200      	movs	r2, #0
 80019fe:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a02:	2200      	movs	r2, #0
 8001a04:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001a08:	683a      	ldr	r2, [r7, #0]
 8001a0a:	68f9      	ldr	r1, [r7, #12]
 8001a0c:	69b8      	ldr	r0, [r7, #24]
 8001a0e:	f000 fc2b 	bl	8002268 <pxPortInitialiseStack>
 8001a12:	4602      	mov	r2, r0
 8001a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a16:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8001a18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d002      	beq.n	8001a24 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001a1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001a22:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001a24:	bf00      	nop
 8001a26:	3720      	adds	r7, #32
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001a34:	f000 fd0a 	bl	800244c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001a38:	4b2a      	ldr	r3, [pc, #168]	@ (8001ae4 <prvAddNewTaskToReadyList+0xb8>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	4a29      	ldr	r2, [pc, #164]	@ (8001ae4 <prvAddNewTaskToReadyList+0xb8>)
 8001a40:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001a42:	4b29      	ldr	r3, [pc, #164]	@ (8001ae8 <prvAddNewTaskToReadyList+0xbc>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d109      	bne.n	8001a5e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001a4a:	4a27      	ldr	r2, [pc, #156]	@ (8001ae8 <prvAddNewTaskToReadyList+0xbc>)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001a50:	4b24      	ldr	r3, [pc, #144]	@ (8001ae4 <prvAddNewTaskToReadyList+0xb8>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d110      	bne.n	8001a7a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001a58:	f000 fac4 	bl	8001fe4 <prvInitialiseTaskLists>
 8001a5c:	e00d      	b.n	8001a7a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8001a5e:	4b23      	ldr	r3, [pc, #140]	@ (8001aec <prvAddNewTaskToReadyList+0xc0>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d109      	bne.n	8001a7a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001a66:	4b20      	ldr	r3, [pc, #128]	@ (8001ae8 <prvAddNewTaskToReadyList+0xbc>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d802      	bhi.n	8001a7a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001a74:	4a1c      	ldr	r2, [pc, #112]	@ (8001ae8 <prvAddNewTaskToReadyList+0xbc>)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001a7a:	4b1d      	ldr	r3, [pc, #116]	@ (8001af0 <prvAddNewTaskToReadyList+0xc4>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	3301      	adds	r3, #1
 8001a80:	4a1b      	ldr	r2, [pc, #108]	@ (8001af0 <prvAddNewTaskToReadyList+0xc4>)
 8001a82:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a88:	2201      	movs	r2, #1
 8001a8a:	409a      	lsls	r2, r3
 8001a8c:	4b19      	ldr	r3, [pc, #100]	@ (8001af4 <prvAddNewTaskToReadyList+0xc8>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	4a18      	ldr	r2, [pc, #96]	@ (8001af4 <prvAddNewTaskToReadyList+0xc8>)
 8001a94:	6013      	str	r3, [r2, #0]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	4413      	add	r3, r2
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	4a15      	ldr	r2, [pc, #84]	@ (8001af8 <prvAddNewTaskToReadyList+0xcc>)
 8001aa4:	441a      	add	r2, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	3304      	adds	r3, #4
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4610      	mov	r0, r2
 8001aae:	f7ff fe0c 	bl	80016ca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001ab2:	f000 fcfb 	bl	80024ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001ab6:	4b0d      	ldr	r3, [pc, #52]	@ (8001aec <prvAddNewTaskToReadyList+0xc0>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d00e      	beq.n	8001adc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001abe:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae8 <prvAddNewTaskToReadyList+0xbc>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d207      	bcs.n	8001adc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001acc:	4b0b      	ldr	r3, [pc, #44]	@ (8001afc <prvAddNewTaskToReadyList+0xd0>)
 8001ace:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	f3bf 8f4f 	dsb	sy
 8001ad8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001adc:	bf00      	nop
 8001ade:	3708      	adds	r7, #8
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	2000041c 	.word	0x2000041c
 8001ae8:	2000031c 	.word	0x2000031c
 8001aec:	20000428 	.word	0x20000428
 8001af0:	20000438 	.word	0x20000438
 8001af4:	20000424 	.word	0x20000424
 8001af8:	20000320 	.word	0x20000320
 8001afc:	e000ed04 	.word	0xe000ed04

08001b00 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d018      	beq.n	8001b44 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8001b12:	4b14      	ldr	r3, [pc, #80]	@ (8001b64 <vTaskDelay+0x64>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d00b      	beq.n	8001b32 <vTaskDelay+0x32>
	__asm volatile
 8001b1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001b1e:	f383 8811 	msr	BASEPRI, r3
 8001b22:	f3bf 8f6f 	isb	sy
 8001b26:	f3bf 8f4f 	dsb	sy
 8001b2a:	60bb      	str	r3, [r7, #8]
}
 8001b2c:	bf00      	nop
 8001b2e:	bf00      	nop
 8001b30:	e7fd      	b.n	8001b2e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8001b32:	f000 f87d 	bl	8001c30 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001b36:	2100      	movs	r1, #0
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f000 fb2f 	bl	800219c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8001b3e:	f000 f885 	bl	8001c4c <xTaskResumeAll>
 8001b42:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d107      	bne.n	8001b5a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8001b4a:	4b07      	ldr	r3, [pc, #28]	@ (8001b68 <vTaskDelay+0x68>)
 8001b4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001b50:	601a      	str	r2, [r3, #0]
 8001b52:	f3bf 8f4f 	dsb	sy
 8001b56:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001b5a:	bf00      	nop
 8001b5c:	3710      	adds	r7, #16
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	20000444 	.word	0x20000444
 8001b68:	e000ed04 	.word	0xe000ed04

08001b6c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b08a      	sub	sp, #40	@ 0x28
 8001b70:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8001b72:	2300      	movs	r3, #0
 8001b74:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8001b76:	2300      	movs	r3, #0
 8001b78:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8001b7a:	463a      	mov	r2, r7
 8001b7c:	1d39      	adds	r1, r7, #4
 8001b7e:	f107 0308 	add.w	r3, r7, #8
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7fe fd76 	bl	8000674 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8001b88:	6839      	ldr	r1, [r7, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	68ba      	ldr	r2, [r7, #8]
 8001b8e:	9202      	str	r2, [sp, #8]
 8001b90:	9301      	str	r3, [sp, #4]
 8001b92:	2300      	movs	r3, #0
 8001b94:	9300      	str	r3, [sp, #0]
 8001b96:	2300      	movs	r3, #0
 8001b98:	460a      	mov	r2, r1
 8001b9a:	491f      	ldr	r1, [pc, #124]	@ (8001c18 <vTaskStartScheduler+0xac>)
 8001b9c:	481f      	ldr	r0, [pc, #124]	@ (8001c1c <vTaskStartScheduler+0xb0>)
 8001b9e:	f7ff fe18 	bl	80017d2 <xTaskCreateStatic>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	4a1e      	ldr	r2, [pc, #120]	@ (8001c20 <vTaskStartScheduler+0xb4>)
 8001ba6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8001ba8:	4b1d      	ldr	r3, [pc, #116]	@ (8001c20 <vTaskStartScheduler+0xb4>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d002      	beq.n	8001bb6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	617b      	str	r3, [r7, #20]
 8001bb4:	e001      	b.n	8001bba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d116      	bne.n	8001bee <vTaskStartScheduler+0x82>
	__asm volatile
 8001bc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001bc4:	f383 8811 	msr	BASEPRI, r3
 8001bc8:	f3bf 8f6f 	isb	sy
 8001bcc:	f3bf 8f4f 	dsb	sy
 8001bd0:	613b      	str	r3, [r7, #16]
}
 8001bd2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001bd4:	4b13      	ldr	r3, [pc, #76]	@ (8001c24 <vTaskStartScheduler+0xb8>)
 8001bd6:	f04f 32ff 	mov.w	r2, #4294967295
 8001bda:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001bdc:	4b12      	ldr	r3, [pc, #72]	@ (8001c28 <vTaskStartScheduler+0xbc>)
 8001bde:	2201      	movs	r2, #1
 8001be0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001be2:	4b12      	ldr	r3, [pc, #72]	@ (8001c2c <vTaskStartScheduler+0xc0>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001be8:	f000 fbbe 	bl	8002368 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001bec:	e00f      	b.n	8001c0e <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bf4:	d10b      	bne.n	8001c0e <vTaskStartScheduler+0xa2>
	__asm volatile
 8001bf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001bfa:	f383 8811 	msr	BASEPRI, r3
 8001bfe:	f3bf 8f6f 	isb	sy
 8001c02:	f3bf 8f4f 	dsb	sy
 8001c06:	60fb      	str	r3, [r7, #12]
}
 8001c08:	bf00      	nop
 8001c0a:	bf00      	nop
 8001c0c:	e7fd      	b.n	8001c0a <vTaskStartScheduler+0x9e>
}
 8001c0e:	bf00      	nop
 8001c10:	3718      	adds	r7, #24
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	0800337c 	.word	0x0800337c
 8001c1c:	08001fb5 	.word	0x08001fb5
 8001c20:	20000440 	.word	0x20000440
 8001c24:	2000043c 	.word	0x2000043c
 8001c28:	20000428 	.word	0x20000428
 8001c2c:	20000420 	.word	0x20000420

08001c30 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8001c34:	4b04      	ldr	r3, [pc, #16]	@ (8001c48 <vTaskSuspendAll+0x18>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	3301      	adds	r3, #1
 8001c3a:	4a03      	ldr	r2, [pc, #12]	@ (8001c48 <vTaskSuspendAll+0x18>)
 8001c3c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8001c3e:	bf00      	nop
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bc80      	pop	{r7}
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	20000444 	.word	0x20000444

08001c4c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001c52:	2300      	movs	r3, #0
 8001c54:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001c56:	2300      	movs	r3, #0
 8001c58:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001c5a:	4b42      	ldr	r3, [pc, #264]	@ (8001d64 <xTaskResumeAll+0x118>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d10b      	bne.n	8001c7a <xTaskResumeAll+0x2e>
	__asm volatile
 8001c62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c66:	f383 8811 	msr	BASEPRI, r3
 8001c6a:	f3bf 8f6f 	isb	sy
 8001c6e:	f3bf 8f4f 	dsb	sy
 8001c72:	603b      	str	r3, [r7, #0]
}
 8001c74:	bf00      	nop
 8001c76:	bf00      	nop
 8001c78:	e7fd      	b.n	8001c76 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001c7a:	f000 fbe7 	bl	800244c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001c7e:	4b39      	ldr	r3, [pc, #228]	@ (8001d64 <xTaskResumeAll+0x118>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	3b01      	subs	r3, #1
 8001c84:	4a37      	ldr	r2, [pc, #220]	@ (8001d64 <xTaskResumeAll+0x118>)
 8001c86:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001c88:	4b36      	ldr	r3, [pc, #216]	@ (8001d64 <xTaskResumeAll+0x118>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d161      	bne.n	8001d54 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001c90:	4b35      	ldr	r3, [pc, #212]	@ (8001d68 <xTaskResumeAll+0x11c>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d05d      	beq.n	8001d54 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001c98:	e02e      	b.n	8001cf8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001c9a:	4b34      	ldr	r3, [pc, #208]	@ (8001d6c <xTaskResumeAll+0x120>)
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	3318      	adds	r3, #24
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7ff fd6a 	bl	8001780 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	3304      	adds	r3, #4
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff fd65 	bl	8001780 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cba:	2201      	movs	r2, #1
 8001cbc:	409a      	lsls	r2, r3
 8001cbe:	4b2c      	ldr	r3, [pc, #176]	@ (8001d70 <xTaskResumeAll+0x124>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	4a2a      	ldr	r2, [pc, #168]	@ (8001d70 <xTaskResumeAll+0x124>)
 8001cc6:	6013      	str	r3, [r2, #0]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ccc:	4613      	mov	r3, r2
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	4413      	add	r3, r2
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	4a27      	ldr	r2, [pc, #156]	@ (8001d74 <xTaskResumeAll+0x128>)
 8001cd6:	441a      	add	r2, r3
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	3304      	adds	r3, #4
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4610      	mov	r0, r2
 8001ce0:	f7ff fcf3 	bl	80016ca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ce8:	4b23      	ldr	r3, [pc, #140]	@ (8001d78 <xTaskResumeAll+0x12c>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d302      	bcc.n	8001cf8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8001cf2:	4b22      	ldr	r3, [pc, #136]	@ (8001d7c <xTaskResumeAll+0x130>)
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001cf8:	4b1c      	ldr	r3, [pc, #112]	@ (8001d6c <xTaskResumeAll+0x120>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d1cc      	bne.n	8001c9a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001d06:	f000 fa0b 	bl	8002120 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001d0a:	4b1d      	ldr	r3, [pc, #116]	@ (8001d80 <xTaskResumeAll+0x134>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d010      	beq.n	8001d38 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8001d16:	f000 f837 	bl	8001d88 <xTaskIncrementTick>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d002      	beq.n	8001d26 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8001d20:	4b16      	ldr	r3, [pc, #88]	@ (8001d7c <xTaskResumeAll+0x130>)
 8001d22:	2201      	movs	r2, #1
 8001d24:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	3b01      	subs	r3, #1
 8001d2a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d1f1      	bne.n	8001d16 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8001d32:	4b13      	ldr	r3, [pc, #76]	@ (8001d80 <xTaskResumeAll+0x134>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001d38:	4b10      	ldr	r3, [pc, #64]	@ (8001d7c <xTaskResumeAll+0x130>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d009      	beq.n	8001d54 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001d40:	2301      	movs	r3, #1
 8001d42:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001d44:	4b0f      	ldr	r3, [pc, #60]	@ (8001d84 <xTaskResumeAll+0x138>)
 8001d46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	f3bf 8f4f 	dsb	sy
 8001d50:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001d54:	f000 fbaa 	bl	80024ac <vPortExitCritical>

	return xAlreadyYielded;
 8001d58:	68bb      	ldr	r3, [r7, #8]
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3710      	adds	r7, #16
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	20000444 	.word	0x20000444
 8001d68:	2000041c 	.word	0x2000041c
 8001d6c:	200003dc 	.word	0x200003dc
 8001d70:	20000424 	.word	0x20000424
 8001d74:	20000320 	.word	0x20000320
 8001d78:	2000031c 	.word	0x2000031c
 8001d7c:	20000430 	.word	0x20000430
 8001d80:	2000042c 	.word	0x2000042c
 8001d84:	e000ed04 	.word	0xe000ed04

08001d88 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001d92:	4b4f      	ldr	r3, [pc, #316]	@ (8001ed0 <xTaskIncrementTick+0x148>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	f040 808f 	bne.w	8001eba <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001d9c:	4b4d      	ldr	r3, [pc, #308]	@ (8001ed4 <xTaskIncrementTick+0x14c>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	3301      	adds	r3, #1
 8001da2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001da4:	4a4b      	ldr	r2, [pc, #300]	@ (8001ed4 <xTaskIncrementTick+0x14c>)
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d121      	bne.n	8001df4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8001db0:	4b49      	ldr	r3, [pc, #292]	@ (8001ed8 <xTaskIncrementTick+0x150>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d00b      	beq.n	8001dd2 <xTaskIncrementTick+0x4a>
	__asm volatile
 8001dba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001dbe:	f383 8811 	msr	BASEPRI, r3
 8001dc2:	f3bf 8f6f 	isb	sy
 8001dc6:	f3bf 8f4f 	dsb	sy
 8001dca:	603b      	str	r3, [r7, #0]
}
 8001dcc:	bf00      	nop
 8001dce:	bf00      	nop
 8001dd0:	e7fd      	b.n	8001dce <xTaskIncrementTick+0x46>
 8001dd2:	4b41      	ldr	r3, [pc, #260]	@ (8001ed8 <xTaskIncrementTick+0x150>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	60fb      	str	r3, [r7, #12]
 8001dd8:	4b40      	ldr	r3, [pc, #256]	@ (8001edc <xTaskIncrementTick+0x154>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a3e      	ldr	r2, [pc, #248]	@ (8001ed8 <xTaskIncrementTick+0x150>)
 8001dde:	6013      	str	r3, [r2, #0]
 8001de0:	4a3e      	ldr	r2, [pc, #248]	@ (8001edc <xTaskIncrementTick+0x154>)
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	6013      	str	r3, [r2, #0]
 8001de6:	4b3e      	ldr	r3, [pc, #248]	@ (8001ee0 <xTaskIncrementTick+0x158>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	3301      	adds	r3, #1
 8001dec:	4a3c      	ldr	r2, [pc, #240]	@ (8001ee0 <xTaskIncrementTick+0x158>)
 8001dee:	6013      	str	r3, [r2, #0]
 8001df0:	f000 f996 	bl	8002120 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001df4:	4b3b      	ldr	r3, [pc, #236]	@ (8001ee4 <xTaskIncrementTick+0x15c>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	693a      	ldr	r2, [r7, #16]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d348      	bcc.n	8001e90 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001dfe:	4b36      	ldr	r3, [pc, #216]	@ (8001ed8 <xTaskIncrementTick+0x150>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d104      	bne.n	8001e12 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e08:	4b36      	ldr	r3, [pc, #216]	@ (8001ee4 <xTaskIncrementTick+0x15c>)
 8001e0a:	f04f 32ff 	mov.w	r2, #4294967295
 8001e0e:	601a      	str	r2, [r3, #0]
					break;
 8001e10:	e03e      	b.n	8001e90 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001e12:	4b31      	ldr	r3, [pc, #196]	@ (8001ed8 <xTaskIncrementTick+0x150>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001e22:	693a      	ldr	r2, [r7, #16]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d203      	bcs.n	8001e32 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001e2a:	4a2e      	ldr	r2, [pc, #184]	@ (8001ee4 <xTaskIncrementTick+0x15c>)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001e30:	e02e      	b.n	8001e90 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	3304      	adds	r3, #4
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7ff fca2 	bl	8001780 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d004      	beq.n	8001e4e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	3318      	adds	r3, #24
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7ff fc99 	bl	8001780 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e52:	2201      	movs	r2, #1
 8001e54:	409a      	lsls	r2, r3
 8001e56:	4b24      	ldr	r3, [pc, #144]	@ (8001ee8 <xTaskIncrementTick+0x160>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	4a22      	ldr	r2, [pc, #136]	@ (8001ee8 <xTaskIncrementTick+0x160>)
 8001e5e:	6013      	str	r3, [r2, #0]
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e64:	4613      	mov	r3, r2
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	4413      	add	r3, r2
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	4a1f      	ldr	r2, [pc, #124]	@ (8001eec <xTaskIncrementTick+0x164>)
 8001e6e:	441a      	add	r2, r3
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	3304      	adds	r3, #4
 8001e74:	4619      	mov	r1, r3
 8001e76:	4610      	mov	r0, r2
 8001e78:	f7ff fc27 	bl	80016ca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e80:	4b1b      	ldr	r3, [pc, #108]	@ (8001ef0 <xTaskIncrementTick+0x168>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d3b9      	bcc.n	8001dfe <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001e8e:	e7b6      	b.n	8001dfe <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001e90:	4b17      	ldr	r3, [pc, #92]	@ (8001ef0 <xTaskIncrementTick+0x168>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e96:	4915      	ldr	r1, [pc, #84]	@ (8001eec <xTaskIncrementTick+0x164>)
 8001e98:	4613      	mov	r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	4413      	add	r3, r2
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	440b      	add	r3, r1
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d901      	bls.n	8001eac <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8001eac:	4b11      	ldr	r3, [pc, #68]	@ (8001ef4 <xTaskIncrementTick+0x16c>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d007      	beq.n	8001ec4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	617b      	str	r3, [r7, #20]
 8001eb8:	e004      	b.n	8001ec4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8001eba:	4b0f      	ldr	r3, [pc, #60]	@ (8001ef8 <xTaskIncrementTick+0x170>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	4a0d      	ldr	r2, [pc, #52]	@ (8001ef8 <xTaskIncrementTick+0x170>)
 8001ec2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8001ec4:	697b      	ldr	r3, [r7, #20]
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3718      	adds	r7, #24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	20000444 	.word	0x20000444
 8001ed4:	20000420 	.word	0x20000420
 8001ed8:	200003d4 	.word	0x200003d4
 8001edc:	200003d8 	.word	0x200003d8
 8001ee0:	20000434 	.word	0x20000434
 8001ee4:	2000043c 	.word	0x2000043c
 8001ee8:	20000424 	.word	0x20000424
 8001eec:	20000320 	.word	0x20000320
 8001ef0:	2000031c 	.word	0x2000031c
 8001ef4:	20000430 	.word	0x20000430
 8001ef8:	2000042c 	.word	0x2000042c

08001efc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001efc:	b480      	push	{r7}
 8001efe:	b087      	sub	sp, #28
 8001f00:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001f02:	4b27      	ldr	r3, [pc, #156]	@ (8001fa0 <vTaskSwitchContext+0xa4>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d003      	beq.n	8001f12 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001f0a:	4b26      	ldr	r3, [pc, #152]	@ (8001fa4 <vTaskSwitchContext+0xa8>)
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001f10:	e040      	b.n	8001f94 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8001f12:	4b24      	ldr	r3, [pc, #144]	@ (8001fa4 <vTaskSwitchContext+0xa8>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001f18:	4b23      	ldr	r3, [pc, #140]	@ (8001fa8 <vTaskSwitchContext+0xac>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	fab3 f383 	clz	r3, r3
 8001f24:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8001f26:	7afb      	ldrb	r3, [r7, #11]
 8001f28:	f1c3 031f 	rsb	r3, r3, #31
 8001f2c:	617b      	str	r3, [r7, #20]
 8001f2e:	491f      	ldr	r1, [pc, #124]	@ (8001fac <vTaskSwitchContext+0xb0>)
 8001f30:	697a      	ldr	r2, [r7, #20]
 8001f32:	4613      	mov	r3, r2
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	4413      	add	r3, r2
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	440b      	add	r3, r1
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d10b      	bne.n	8001f5a <vTaskSwitchContext+0x5e>
	__asm volatile
 8001f42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f46:	f383 8811 	msr	BASEPRI, r3
 8001f4a:	f3bf 8f6f 	isb	sy
 8001f4e:	f3bf 8f4f 	dsb	sy
 8001f52:	607b      	str	r3, [r7, #4]
}
 8001f54:	bf00      	nop
 8001f56:	bf00      	nop
 8001f58:	e7fd      	b.n	8001f56 <vTaskSwitchContext+0x5a>
 8001f5a:	697a      	ldr	r2, [r7, #20]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	4413      	add	r3, r2
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	4a11      	ldr	r2, [pc, #68]	@ (8001fac <vTaskSwitchContext+0xb0>)
 8001f66:	4413      	add	r3, r2
 8001f68:	613b      	str	r3, [r7, #16]
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	685a      	ldr	r2, [r3, #4]
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	605a      	str	r2, [r3, #4]
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	685a      	ldr	r2, [r3, #4]
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	3308      	adds	r3, #8
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d104      	bne.n	8001f8a <vTaskSwitchContext+0x8e>
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	685a      	ldr	r2, [r3, #4]
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	605a      	str	r2, [r3, #4]
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	4a07      	ldr	r2, [pc, #28]	@ (8001fb0 <vTaskSwitchContext+0xb4>)
 8001f92:	6013      	str	r3, [r2, #0]
}
 8001f94:	bf00      	nop
 8001f96:	371c      	adds	r7, #28
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bc80      	pop	{r7}
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	20000444 	.word	0x20000444
 8001fa4:	20000430 	.word	0x20000430
 8001fa8:	20000424 	.word	0x20000424
 8001fac:	20000320 	.word	0x20000320
 8001fb0:	2000031c 	.word	0x2000031c

08001fb4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8001fbc:	f000 f852 	bl	8002064 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001fc0:	4b06      	ldr	r3, [pc, #24]	@ (8001fdc <prvIdleTask+0x28>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d9f9      	bls.n	8001fbc <prvIdleTask+0x8>
			{
				taskYIELD();
 8001fc8:	4b05      	ldr	r3, [pc, #20]	@ (8001fe0 <prvIdleTask+0x2c>)
 8001fca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	f3bf 8f4f 	dsb	sy
 8001fd4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8001fd8:	e7f0      	b.n	8001fbc <prvIdleTask+0x8>
 8001fda:	bf00      	nop
 8001fdc:	20000320 	.word	0x20000320
 8001fe0:	e000ed04 	.word	0xe000ed04

08001fe4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001fea:	2300      	movs	r3, #0
 8001fec:	607b      	str	r3, [r7, #4]
 8001fee:	e00c      	b.n	800200a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	4413      	add	r3, r2
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	4a12      	ldr	r2, [pc, #72]	@ (8002044 <prvInitialiseTaskLists+0x60>)
 8001ffc:	4413      	add	r3, r2
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7ff fb38 	bl	8001674 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	3301      	adds	r3, #1
 8002008:	607b      	str	r3, [r7, #4]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2b06      	cmp	r3, #6
 800200e:	d9ef      	bls.n	8001ff0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002010:	480d      	ldr	r0, [pc, #52]	@ (8002048 <prvInitialiseTaskLists+0x64>)
 8002012:	f7ff fb2f 	bl	8001674 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002016:	480d      	ldr	r0, [pc, #52]	@ (800204c <prvInitialiseTaskLists+0x68>)
 8002018:	f7ff fb2c 	bl	8001674 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800201c:	480c      	ldr	r0, [pc, #48]	@ (8002050 <prvInitialiseTaskLists+0x6c>)
 800201e:	f7ff fb29 	bl	8001674 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002022:	480c      	ldr	r0, [pc, #48]	@ (8002054 <prvInitialiseTaskLists+0x70>)
 8002024:	f7ff fb26 	bl	8001674 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002028:	480b      	ldr	r0, [pc, #44]	@ (8002058 <prvInitialiseTaskLists+0x74>)
 800202a:	f7ff fb23 	bl	8001674 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800202e:	4b0b      	ldr	r3, [pc, #44]	@ (800205c <prvInitialiseTaskLists+0x78>)
 8002030:	4a05      	ldr	r2, [pc, #20]	@ (8002048 <prvInitialiseTaskLists+0x64>)
 8002032:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002034:	4b0a      	ldr	r3, [pc, #40]	@ (8002060 <prvInitialiseTaskLists+0x7c>)
 8002036:	4a05      	ldr	r2, [pc, #20]	@ (800204c <prvInitialiseTaskLists+0x68>)
 8002038:	601a      	str	r2, [r3, #0]
}
 800203a:	bf00      	nop
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	20000320 	.word	0x20000320
 8002048:	200003ac 	.word	0x200003ac
 800204c:	200003c0 	.word	0x200003c0
 8002050:	200003dc 	.word	0x200003dc
 8002054:	200003f0 	.word	0x200003f0
 8002058:	20000408 	.word	0x20000408
 800205c:	200003d4 	.word	0x200003d4
 8002060:	200003d8 	.word	0x200003d8

08002064 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800206a:	e019      	b.n	80020a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800206c:	f000 f9ee 	bl	800244c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002070:	4b10      	ldr	r3, [pc, #64]	@ (80020b4 <prvCheckTasksWaitingTermination+0x50>)
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	3304      	adds	r3, #4
 800207c:	4618      	mov	r0, r3
 800207e:	f7ff fb7f 	bl	8001780 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002082:	4b0d      	ldr	r3, [pc, #52]	@ (80020b8 <prvCheckTasksWaitingTermination+0x54>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	3b01      	subs	r3, #1
 8002088:	4a0b      	ldr	r2, [pc, #44]	@ (80020b8 <prvCheckTasksWaitingTermination+0x54>)
 800208a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800208c:	4b0b      	ldr	r3, [pc, #44]	@ (80020bc <prvCheckTasksWaitingTermination+0x58>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	3b01      	subs	r3, #1
 8002092:	4a0a      	ldr	r2, [pc, #40]	@ (80020bc <prvCheckTasksWaitingTermination+0x58>)
 8002094:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002096:	f000 fa09 	bl	80024ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f000 f810 	bl	80020c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80020a0:	4b06      	ldr	r3, [pc, #24]	@ (80020bc <prvCheckTasksWaitingTermination+0x58>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d1e1      	bne.n	800206c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80020a8:	bf00      	nop
 80020aa:	bf00      	nop
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	200003f0 	.word	0x200003f0
 80020b8:	2000041c 	.word	0x2000041c
 80020bc:	20000404 	.word	0x20000404

080020c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d108      	bne.n	80020e4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d6:	4618      	mov	r0, r3
 80020d8:	f000 fb48 	bl	800276c <vPortFree>
				vPortFree( pxTCB );
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f000 fb45 	bl	800276c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80020e2:	e019      	b.n	8002118 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d103      	bne.n	80020f6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f000 fb3c 	bl	800276c <vPortFree>
	}
 80020f4:	e010      	b.n	8002118 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d00b      	beq.n	8002118 <prvDeleteTCB+0x58>
	__asm volatile
 8002100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002104:	f383 8811 	msr	BASEPRI, r3
 8002108:	f3bf 8f6f 	isb	sy
 800210c:	f3bf 8f4f 	dsb	sy
 8002110:	60fb      	str	r3, [r7, #12]
}
 8002112:	bf00      	nop
 8002114:	bf00      	nop
 8002116:	e7fd      	b.n	8002114 <prvDeleteTCB+0x54>
	}
 8002118:	bf00      	nop
 800211a:	3710      	adds	r7, #16
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}

08002120 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002126:	4b0c      	ldr	r3, [pc, #48]	@ (8002158 <prvResetNextTaskUnblockTime+0x38>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d104      	bne.n	800213a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002130:	4b0a      	ldr	r3, [pc, #40]	@ (800215c <prvResetNextTaskUnblockTime+0x3c>)
 8002132:	f04f 32ff 	mov.w	r2, #4294967295
 8002136:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002138:	e008      	b.n	800214c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800213a:	4b07      	ldr	r3, [pc, #28]	@ (8002158 <prvResetNextTaskUnblockTime+0x38>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	4a04      	ldr	r2, [pc, #16]	@ (800215c <prvResetNextTaskUnblockTime+0x3c>)
 800214a:	6013      	str	r3, [r2, #0]
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	bc80      	pop	{r7}
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	200003d4 	.word	0x200003d4
 800215c:	2000043c 	.word	0x2000043c

08002160 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002166:	4b0b      	ldr	r3, [pc, #44]	@ (8002194 <xTaskGetSchedulerState+0x34>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d102      	bne.n	8002174 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800216e:	2301      	movs	r3, #1
 8002170:	607b      	str	r3, [r7, #4]
 8002172:	e008      	b.n	8002186 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002174:	4b08      	ldr	r3, [pc, #32]	@ (8002198 <xTaskGetSchedulerState+0x38>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d102      	bne.n	8002182 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800217c:	2302      	movs	r3, #2
 800217e:	607b      	str	r3, [r7, #4]
 8002180:	e001      	b.n	8002186 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002182:	2300      	movs	r3, #0
 8002184:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002186:	687b      	ldr	r3, [r7, #4]
	}
 8002188:	4618      	mov	r0, r3
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	bc80      	pop	{r7}
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	20000428 	.word	0x20000428
 8002198:	20000444 	.word	0x20000444

0800219c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80021a6:	4b29      	ldr	r3, [pc, #164]	@ (800224c <prvAddCurrentTaskToDelayedList+0xb0>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80021ac:	4b28      	ldr	r3, [pc, #160]	@ (8002250 <prvAddCurrentTaskToDelayedList+0xb4>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	3304      	adds	r3, #4
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7ff fae4 	bl	8001780 <uxListRemove>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d10b      	bne.n	80021d6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80021be:	4b24      	ldr	r3, [pc, #144]	@ (8002250 <prvAddCurrentTaskToDelayedList+0xb4>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021c4:	2201      	movs	r2, #1
 80021c6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ca:	43da      	mvns	r2, r3
 80021cc:	4b21      	ldr	r3, [pc, #132]	@ (8002254 <prvAddCurrentTaskToDelayedList+0xb8>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4013      	ands	r3, r2
 80021d2:	4a20      	ldr	r2, [pc, #128]	@ (8002254 <prvAddCurrentTaskToDelayedList+0xb8>)
 80021d4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021dc:	d10a      	bne.n	80021f4 <prvAddCurrentTaskToDelayedList+0x58>
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d007      	beq.n	80021f4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80021e4:	4b1a      	ldr	r3, [pc, #104]	@ (8002250 <prvAddCurrentTaskToDelayedList+0xb4>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	3304      	adds	r3, #4
 80021ea:	4619      	mov	r1, r3
 80021ec:	481a      	ldr	r0, [pc, #104]	@ (8002258 <prvAddCurrentTaskToDelayedList+0xbc>)
 80021ee:	f7ff fa6c 	bl	80016ca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80021f2:	e026      	b.n	8002242 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80021f4:	68fa      	ldr	r2, [r7, #12]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4413      	add	r3, r2
 80021fa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80021fc:	4b14      	ldr	r3, [pc, #80]	@ (8002250 <prvAddCurrentTaskToDelayedList+0xb4>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	68ba      	ldr	r2, [r7, #8]
 8002202:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002204:	68ba      	ldr	r2, [r7, #8]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	429a      	cmp	r2, r3
 800220a:	d209      	bcs.n	8002220 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800220c:	4b13      	ldr	r3, [pc, #76]	@ (800225c <prvAddCurrentTaskToDelayedList+0xc0>)
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	4b0f      	ldr	r3, [pc, #60]	@ (8002250 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	3304      	adds	r3, #4
 8002216:	4619      	mov	r1, r3
 8002218:	4610      	mov	r0, r2
 800221a:	f7ff fa79 	bl	8001710 <vListInsert>
}
 800221e:	e010      	b.n	8002242 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002220:	4b0f      	ldr	r3, [pc, #60]	@ (8002260 <prvAddCurrentTaskToDelayedList+0xc4>)
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	4b0a      	ldr	r3, [pc, #40]	@ (8002250 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	3304      	adds	r3, #4
 800222a:	4619      	mov	r1, r3
 800222c:	4610      	mov	r0, r2
 800222e:	f7ff fa6f 	bl	8001710 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002232:	4b0c      	ldr	r3, [pc, #48]	@ (8002264 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	68ba      	ldr	r2, [r7, #8]
 8002238:	429a      	cmp	r2, r3
 800223a:	d202      	bcs.n	8002242 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800223c:	4a09      	ldr	r2, [pc, #36]	@ (8002264 <prvAddCurrentTaskToDelayedList+0xc8>)
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	6013      	str	r3, [r2, #0]
}
 8002242:	bf00      	nop
 8002244:	3710      	adds	r7, #16
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	20000420 	.word	0x20000420
 8002250:	2000031c 	.word	0x2000031c
 8002254:	20000424 	.word	0x20000424
 8002258:	20000408 	.word	0x20000408
 800225c:	200003d8 	.word	0x200003d8
 8002260:	200003d4 	.word	0x200003d4
 8002264:	2000043c 	.word	0x2000043c

08002268 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002268:	b480      	push	{r7}
 800226a:	b085      	sub	sp, #20
 800226c:	af00      	add	r7, sp, #0
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	3b04      	subs	r3, #4
 8002278:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002280:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	3b04      	subs	r3, #4
 8002286:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	f023 0201 	bic.w	r2, r3, #1
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	3b04      	subs	r3, #4
 8002296:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002298:	4a08      	ldr	r2, [pc, #32]	@ (80022bc <pxPortInitialiseStack+0x54>)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	3b14      	subs	r3, #20
 80022a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	3b20      	subs	r3, #32
 80022ae:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80022b0:	68fb      	ldr	r3, [r7, #12]
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3714      	adds	r7, #20
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bc80      	pop	{r7}
 80022ba:	4770      	bx	lr
 80022bc:	080022c1 	.word	0x080022c1

080022c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80022c0:	b480      	push	{r7}
 80022c2:	b085      	sub	sp, #20
 80022c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80022c6:	2300      	movs	r3, #0
 80022c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80022ca:	4b12      	ldr	r3, [pc, #72]	@ (8002314 <prvTaskExitError+0x54>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022d2:	d00b      	beq.n	80022ec <prvTaskExitError+0x2c>
	__asm volatile
 80022d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022d8:	f383 8811 	msr	BASEPRI, r3
 80022dc:	f3bf 8f6f 	isb	sy
 80022e0:	f3bf 8f4f 	dsb	sy
 80022e4:	60fb      	str	r3, [r7, #12]
}
 80022e6:	bf00      	nop
 80022e8:	bf00      	nop
 80022ea:	e7fd      	b.n	80022e8 <prvTaskExitError+0x28>
	__asm volatile
 80022ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022f0:	f383 8811 	msr	BASEPRI, r3
 80022f4:	f3bf 8f6f 	isb	sy
 80022f8:	f3bf 8f4f 	dsb	sy
 80022fc:	60bb      	str	r3, [r7, #8]
}
 80022fe:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002300:	bf00      	nop
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d0fc      	beq.n	8002302 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002308:	bf00      	nop
 800230a:	bf00      	nop
 800230c:	3714      	adds	r7, #20
 800230e:	46bd      	mov	sp, r7
 8002310:	bc80      	pop	{r7}
 8002312:	4770      	bx	lr
 8002314:	2000000c 	.word	0x2000000c
	...

08002320 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002320:	4b07      	ldr	r3, [pc, #28]	@ (8002340 <pxCurrentTCBConst2>)
 8002322:	6819      	ldr	r1, [r3, #0]
 8002324:	6808      	ldr	r0, [r1, #0]
 8002326:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800232a:	f380 8809 	msr	PSP, r0
 800232e:	f3bf 8f6f 	isb	sy
 8002332:	f04f 0000 	mov.w	r0, #0
 8002336:	f380 8811 	msr	BASEPRI, r0
 800233a:	f04e 0e0d 	orr.w	lr, lr, #13
 800233e:	4770      	bx	lr

08002340 <pxCurrentTCBConst2>:
 8002340:	2000031c 	.word	0x2000031c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002344:	bf00      	nop
 8002346:	bf00      	nop

08002348 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8002348:	4806      	ldr	r0, [pc, #24]	@ (8002364 <prvPortStartFirstTask+0x1c>)
 800234a:	6800      	ldr	r0, [r0, #0]
 800234c:	6800      	ldr	r0, [r0, #0]
 800234e:	f380 8808 	msr	MSP, r0
 8002352:	b662      	cpsie	i
 8002354:	b661      	cpsie	f
 8002356:	f3bf 8f4f 	dsb	sy
 800235a:	f3bf 8f6f 	isb	sy
 800235e:	df00      	svc	0
 8002360:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002362:	bf00      	nop
 8002364:	e000ed08 	.word	0xe000ed08

08002368 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800236e:	4b32      	ldr	r3, [pc, #200]	@ (8002438 <xPortStartScheduler+0xd0>)
 8002370:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	b2db      	uxtb	r3, r3
 8002378:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	22ff      	movs	r2, #255	@ 0xff
 800237e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	b2db      	uxtb	r3, r3
 8002386:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002388:	78fb      	ldrb	r3, [r7, #3]
 800238a:	b2db      	uxtb	r3, r3
 800238c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002390:	b2da      	uxtb	r2, r3
 8002392:	4b2a      	ldr	r3, [pc, #168]	@ (800243c <xPortStartScheduler+0xd4>)
 8002394:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002396:	4b2a      	ldr	r3, [pc, #168]	@ (8002440 <xPortStartScheduler+0xd8>)
 8002398:	2207      	movs	r2, #7
 800239a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800239c:	e009      	b.n	80023b2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800239e:	4b28      	ldr	r3, [pc, #160]	@ (8002440 <xPortStartScheduler+0xd8>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	3b01      	subs	r3, #1
 80023a4:	4a26      	ldr	r2, [pc, #152]	@ (8002440 <xPortStartScheduler+0xd8>)
 80023a6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80023a8:	78fb      	ldrb	r3, [r7, #3]
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80023b2:	78fb      	ldrb	r3, [r7, #3]
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023ba:	2b80      	cmp	r3, #128	@ 0x80
 80023bc:	d0ef      	beq.n	800239e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80023be:	4b20      	ldr	r3, [pc, #128]	@ (8002440 <xPortStartScheduler+0xd8>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f1c3 0307 	rsb	r3, r3, #7
 80023c6:	2b04      	cmp	r3, #4
 80023c8:	d00b      	beq.n	80023e2 <xPortStartScheduler+0x7a>
	__asm volatile
 80023ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023ce:	f383 8811 	msr	BASEPRI, r3
 80023d2:	f3bf 8f6f 	isb	sy
 80023d6:	f3bf 8f4f 	dsb	sy
 80023da:	60bb      	str	r3, [r7, #8]
}
 80023dc:	bf00      	nop
 80023de:	bf00      	nop
 80023e0:	e7fd      	b.n	80023de <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80023e2:	4b17      	ldr	r3, [pc, #92]	@ (8002440 <xPortStartScheduler+0xd8>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	021b      	lsls	r3, r3, #8
 80023e8:	4a15      	ldr	r2, [pc, #84]	@ (8002440 <xPortStartScheduler+0xd8>)
 80023ea:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80023ec:	4b14      	ldr	r3, [pc, #80]	@ (8002440 <xPortStartScheduler+0xd8>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80023f4:	4a12      	ldr	r2, [pc, #72]	@ (8002440 <xPortStartScheduler+0xd8>)
 80023f6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	b2da      	uxtb	r2, r3
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002400:	4b10      	ldr	r3, [pc, #64]	@ (8002444 <xPortStartScheduler+0xdc>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a0f      	ldr	r2, [pc, #60]	@ (8002444 <xPortStartScheduler+0xdc>)
 8002406:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800240a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800240c:	4b0d      	ldr	r3, [pc, #52]	@ (8002444 <xPortStartScheduler+0xdc>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a0c      	ldr	r2, [pc, #48]	@ (8002444 <xPortStartScheduler+0xdc>)
 8002412:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8002416:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002418:	f000 f8b8 	bl	800258c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800241c:	4b0a      	ldr	r3, [pc, #40]	@ (8002448 <xPortStartScheduler+0xe0>)
 800241e:	2200      	movs	r2, #0
 8002420:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002422:	f7ff ff91 	bl	8002348 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002426:	f7ff fd69 	bl	8001efc <vTaskSwitchContext>
	prvTaskExitError();
 800242a:	f7ff ff49 	bl	80022c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800242e:	2300      	movs	r3, #0
}
 8002430:	4618      	mov	r0, r3
 8002432:	3710      	adds	r7, #16
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	e000e400 	.word	0xe000e400
 800243c:	20000448 	.word	0x20000448
 8002440:	2000044c 	.word	0x2000044c
 8002444:	e000ed20 	.word	0xe000ed20
 8002448:	2000000c 	.word	0x2000000c

0800244c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
	__asm volatile
 8002452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002456:	f383 8811 	msr	BASEPRI, r3
 800245a:	f3bf 8f6f 	isb	sy
 800245e:	f3bf 8f4f 	dsb	sy
 8002462:	607b      	str	r3, [r7, #4]
}
 8002464:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002466:	4b0f      	ldr	r3, [pc, #60]	@ (80024a4 <vPortEnterCritical+0x58>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	3301      	adds	r3, #1
 800246c:	4a0d      	ldr	r2, [pc, #52]	@ (80024a4 <vPortEnterCritical+0x58>)
 800246e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002470:	4b0c      	ldr	r3, [pc, #48]	@ (80024a4 <vPortEnterCritical+0x58>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2b01      	cmp	r3, #1
 8002476:	d110      	bne.n	800249a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002478:	4b0b      	ldr	r3, [pc, #44]	@ (80024a8 <vPortEnterCritical+0x5c>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2b00      	cmp	r3, #0
 8002480:	d00b      	beq.n	800249a <vPortEnterCritical+0x4e>
	__asm volatile
 8002482:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002486:	f383 8811 	msr	BASEPRI, r3
 800248a:	f3bf 8f6f 	isb	sy
 800248e:	f3bf 8f4f 	dsb	sy
 8002492:	603b      	str	r3, [r7, #0]
}
 8002494:	bf00      	nop
 8002496:	bf00      	nop
 8002498:	e7fd      	b.n	8002496 <vPortEnterCritical+0x4a>
	}
}
 800249a:	bf00      	nop
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	bc80      	pop	{r7}
 80024a2:	4770      	bx	lr
 80024a4:	2000000c 	.word	0x2000000c
 80024a8:	e000ed04 	.word	0xe000ed04

080024ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80024b2:	4b12      	ldr	r3, [pc, #72]	@ (80024fc <vPortExitCritical+0x50>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d10b      	bne.n	80024d2 <vPortExitCritical+0x26>
	__asm volatile
 80024ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024be:	f383 8811 	msr	BASEPRI, r3
 80024c2:	f3bf 8f6f 	isb	sy
 80024c6:	f3bf 8f4f 	dsb	sy
 80024ca:	607b      	str	r3, [r7, #4]
}
 80024cc:	bf00      	nop
 80024ce:	bf00      	nop
 80024d0:	e7fd      	b.n	80024ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80024d2:	4b0a      	ldr	r3, [pc, #40]	@ (80024fc <vPortExitCritical+0x50>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	3b01      	subs	r3, #1
 80024d8:	4a08      	ldr	r2, [pc, #32]	@ (80024fc <vPortExitCritical+0x50>)
 80024da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80024dc:	4b07      	ldr	r3, [pc, #28]	@ (80024fc <vPortExitCritical+0x50>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d105      	bne.n	80024f0 <vPortExitCritical+0x44>
 80024e4:	2300      	movs	r3, #0
 80024e6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80024ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80024f0:	bf00      	nop
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bc80      	pop	{r7}
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	2000000c 	.word	0x2000000c

08002500 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002500:	f3ef 8009 	mrs	r0, PSP
 8002504:	f3bf 8f6f 	isb	sy
 8002508:	4b0d      	ldr	r3, [pc, #52]	@ (8002540 <pxCurrentTCBConst>)
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002510:	6010      	str	r0, [r2, #0]
 8002512:	e92d 4008 	stmdb	sp!, {r3, lr}
 8002516:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800251a:	f380 8811 	msr	BASEPRI, r0
 800251e:	f7ff fced 	bl	8001efc <vTaskSwitchContext>
 8002522:	f04f 0000 	mov.w	r0, #0
 8002526:	f380 8811 	msr	BASEPRI, r0
 800252a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800252e:	6819      	ldr	r1, [r3, #0]
 8002530:	6808      	ldr	r0, [r1, #0]
 8002532:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002536:	f380 8809 	msr	PSP, r0
 800253a:	f3bf 8f6f 	isb	sy
 800253e:	4770      	bx	lr

08002540 <pxCurrentTCBConst>:
 8002540:	2000031c 	.word	0x2000031c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002544:	bf00      	nop
 8002546:	bf00      	nop

08002548 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
	__asm volatile
 800254e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002552:	f383 8811 	msr	BASEPRI, r3
 8002556:	f3bf 8f6f 	isb	sy
 800255a:	f3bf 8f4f 	dsb	sy
 800255e:	607b      	str	r3, [r7, #4]
}
 8002560:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002562:	f7ff fc11 	bl	8001d88 <xTaskIncrementTick>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d003      	beq.n	8002574 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800256c:	4b06      	ldr	r3, [pc, #24]	@ (8002588 <xPortSysTickHandler+0x40>)
 800256e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002572:	601a      	str	r2, [r3, #0]
 8002574:	2300      	movs	r3, #0
 8002576:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	f383 8811 	msr	BASEPRI, r3
}
 800257e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8002580:	bf00      	nop
 8002582:	3708      	adds	r7, #8
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	e000ed04 	.word	0xe000ed04

0800258c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002590:	4b0a      	ldr	r3, [pc, #40]	@ (80025bc <vPortSetupTimerInterrupt+0x30>)
 8002592:	2200      	movs	r2, #0
 8002594:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002596:	4b0a      	ldr	r3, [pc, #40]	@ (80025c0 <vPortSetupTimerInterrupt+0x34>)
 8002598:	2200      	movs	r2, #0
 800259a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800259c:	4b09      	ldr	r3, [pc, #36]	@ (80025c4 <vPortSetupTimerInterrupt+0x38>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a09      	ldr	r2, [pc, #36]	@ (80025c8 <vPortSetupTimerInterrupt+0x3c>)
 80025a2:	fba2 2303 	umull	r2, r3, r2, r3
 80025a6:	099b      	lsrs	r3, r3, #6
 80025a8:	4a08      	ldr	r2, [pc, #32]	@ (80025cc <vPortSetupTimerInterrupt+0x40>)
 80025aa:	3b01      	subs	r3, #1
 80025ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80025ae:	4b03      	ldr	r3, [pc, #12]	@ (80025bc <vPortSetupTimerInterrupt+0x30>)
 80025b0:	2207      	movs	r2, #7
 80025b2:	601a      	str	r2, [r3, #0]
}
 80025b4:	bf00      	nop
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bc80      	pop	{r7}
 80025ba:	4770      	bx	lr
 80025bc:	e000e010 	.word	0xe000e010
 80025c0:	e000e018 	.word	0xe000e018
 80025c4:	20000000 	.word	0x20000000
 80025c8:	10624dd3 	.word	0x10624dd3
 80025cc:	e000e014 	.word	0xe000e014

080025d0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b08a      	sub	sp, #40	@ 0x28
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80025d8:	2300      	movs	r3, #0
 80025da:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80025dc:	f7ff fb28 	bl	8001c30 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80025e0:	4b5c      	ldr	r3, [pc, #368]	@ (8002754 <pvPortMalloc+0x184>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d101      	bne.n	80025ec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80025e8:	f000 f924 	bl	8002834 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80025ec:	4b5a      	ldr	r3, [pc, #360]	@ (8002758 <pvPortMalloc+0x188>)
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	4013      	ands	r3, r2
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	f040 8095 	bne.w	8002724 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d01e      	beq.n	800263e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8002600:	2208      	movs	r2, #8
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4413      	add	r3, r2
 8002606:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f003 0307 	and.w	r3, r3, #7
 800260e:	2b00      	cmp	r3, #0
 8002610:	d015      	beq.n	800263e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f023 0307 	bic.w	r3, r3, #7
 8002618:	3308      	adds	r3, #8
 800261a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f003 0307 	and.w	r3, r3, #7
 8002622:	2b00      	cmp	r3, #0
 8002624:	d00b      	beq.n	800263e <pvPortMalloc+0x6e>
	__asm volatile
 8002626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800262a:	f383 8811 	msr	BASEPRI, r3
 800262e:	f3bf 8f6f 	isb	sy
 8002632:	f3bf 8f4f 	dsb	sy
 8002636:	617b      	str	r3, [r7, #20]
}
 8002638:	bf00      	nop
 800263a:	bf00      	nop
 800263c:	e7fd      	b.n	800263a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d06f      	beq.n	8002724 <pvPortMalloc+0x154>
 8002644:	4b45      	ldr	r3, [pc, #276]	@ (800275c <pvPortMalloc+0x18c>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	429a      	cmp	r2, r3
 800264c:	d86a      	bhi.n	8002724 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800264e:	4b44      	ldr	r3, [pc, #272]	@ (8002760 <pvPortMalloc+0x190>)
 8002650:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002652:	4b43      	ldr	r3, [pc, #268]	@ (8002760 <pvPortMalloc+0x190>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002658:	e004      	b.n	8002664 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800265a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800265c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800265e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	429a      	cmp	r2, r3
 800266c:	d903      	bls.n	8002676 <pvPortMalloc+0xa6>
 800266e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d1f1      	bne.n	800265a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002676:	4b37      	ldr	r3, [pc, #220]	@ (8002754 <pvPortMalloc+0x184>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800267c:	429a      	cmp	r2, r3
 800267e:	d051      	beq.n	8002724 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002680:	6a3b      	ldr	r3, [r7, #32]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2208      	movs	r2, #8
 8002686:	4413      	add	r3, r2
 8002688:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800268a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	6a3b      	ldr	r3, [r7, #32]
 8002690:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002694:	685a      	ldr	r2, [r3, #4]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	1ad2      	subs	r2, r2, r3
 800269a:	2308      	movs	r3, #8
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	429a      	cmp	r2, r3
 80026a0:	d920      	bls.n	80026e4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80026a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	4413      	add	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	f003 0307 	and.w	r3, r3, #7
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d00b      	beq.n	80026cc <pvPortMalloc+0xfc>
	__asm volatile
 80026b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026b8:	f383 8811 	msr	BASEPRI, r3
 80026bc:	f3bf 8f6f 	isb	sy
 80026c0:	f3bf 8f4f 	dsb	sy
 80026c4:	613b      	str	r3, [r7, #16]
}
 80026c6:	bf00      	nop
 80026c8:	bf00      	nop
 80026ca:	e7fd      	b.n	80026c8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80026cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ce:	685a      	ldr	r2, [r3, #4]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	1ad2      	subs	r2, r2, r3
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80026d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80026de:	69b8      	ldr	r0, [r7, #24]
 80026e0:	f000 f90a 	bl	80028f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80026e4:	4b1d      	ldr	r3, [pc, #116]	@ (800275c <pvPortMalloc+0x18c>)
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	4a1b      	ldr	r2, [pc, #108]	@ (800275c <pvPortMalloc+0x18c>)
 80026f0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80026f2:	4b1a      	ldr	r3, [pc, #104]	@ (800275c <pvPortMalloc+0x18c>)
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	4b1b      	ldr	r3, [pc, #108]	@ (8002764 <pvPortMalloc+0x194>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d203      	bcs.n	8002706 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80026fe:	4b17      	ldr	r3, [pc, #92]	@ (800275c <pvPortMalloc+0x18c>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a18      	ldr	r2, [pc, #96]	@ (8002764 <pvPortMalloc+0x194>)
 8002704:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002708:	685a      	ldr	r2, [r3, #4]
 800270a:	4b13      	ldr	r3, [pc, #76]	@ (8002758 <pvPortMalloc+0x188>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	431a      	orrs	r2, r3
 8002710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002712:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002716:	2200      	movs	r2, #0
 8002718:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800271a:	4b13      	ldr	r3, [pc, #76]	@ (8002768 <pvPortMalloc+0x198>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	3301      	adds	r3, #1
 8002720:	4a11      	ldr	r2, [pc, #68]	@ (8002768 <pvPortMalloc+0x198>)
 8002722:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002724:	f7ff fa92 	bl	8001c4c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	f003 0307 	and.w	r3, r3, #7
 800272e:	2b00      	cmp	r3, #0
 8002730:	d00b      	beq.n	800274a <pvPortMalloc+0x17a>
	__asm volatile
 8002732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002736:	f383 8811 	msr	BASEPRI, r3
 800273a:	f3bf 8f6f 	isb	sy
 800273e:	f3bf 8f4f 	dsb	sy
 8002742:	60fb      	str	r3, [r7, #12]
}
 8002744:	bf00      	nop
 8002746:	bf00      	nop
 8002748:	e7fd      	b.n	8002746 <pvPortMalloc+0x176>
	return pvReturn;
 800274a:	69fb      	ldr	r3, [r7, #28]
}
 800274c:	4618      	mov	r0, r3
 800274e:	3728      	adds	r7, #40	@ 0x28
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	20001058 	.word	0x20001058
 8002758:	2000106c 	.word	0x2000106c
 800275c:	2000105c 	.word	0x2000105c
 8002760:	20001050 	.word	0x20001050
 8002764:	20001060 	.word	0x20001060
 8002768:	20001064 	.word	0x20001064

0800276c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b086      	sub	sp, #24
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d04f      	beq.n	800281e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800277e:	2308      	movs	r3, #8
 8002780:	425b      	negs	r3, r3
 8002782:	697a      	ldr	r2, [r7, #20]
 8002784:	4413      	add	r3, r2
 8002786:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	685a      	ldr	r2, [r3, #4]
 8002790:	4b25      	ldr	r3, [pc, #148]	@ (8002828 <vPortFree+0xbc>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4013      	ands	r3, r2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d10b      	bne.n	80027b2 <vPortFree+0x46>
	__asm volatile
 800279a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800279e:	f383 8811 	msr	BASEPRI, r3
 80027a2:	f3bf 8f6f 	isb	sy
 80027a6:	f3bf 8f4f 	dsb	sy
 80027aa:	60fb      	str	r3, [r7, #12]
}
 80027ac:	bf00      	nop
 80027ae:	bf00      	nop
 80027b0:	e7fd      	b.n	80027ae <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d00b      	beq.n	80027d2 <vPortFree+0x66>
	__asm volatile
 80027ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027be:	f383 8811 	msr	BASEPRI, r3
 80027c2:	f3bf 8f6f 	isb	sy
 80027c6:	f3bf 8f4f 	dsb	sy
 80027ca:	60bb      	str	r3, [r7, #8]
}
 80027cc:	bf00      	nop
 80027ce:	bf00      	nop
 80027d0:	e7fd      	b.n	80027ce <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	685a      	ldr	r2, [r3, #4]
 80027d6:	4b14      	ldr	r3, [pc, #80]	@ (8002828 <vPortFree+0xbc>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4013      	ands	r3, r2
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d01e      	beq.n	800281e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d11a      	bne.n	800281e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	685a      	ldr	r2, [r3, #4]
 80027ec:	4b0e      	ldr	r3, [pc, #56]	@ (8002828 <vPortFree+0xbc>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	43db      	mvns	r3, r3
 80027f2:	401a      	ands	r2, r3
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80027f8:	f7ff fa1a 	bl	8001c30 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	685a      	ldr	r2, [r3, #4]
 8002800:	4b0a      	ldr	r3, [pc, #40]	@ (800282c <vPortFree+0xc0>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4413      	add	r3, r2
 8002806:	4a09      	ldr	r2, [pc, #36]	@ (800282c <vPortFree+0xc0>)
 8002808:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800280a:	6938      	ldr	r0, [r7, #16]
 800280c:	f000 f874 	bl	80028f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8002810:	4b07      	ldr	r3, [pc, #28]	@ (8002830 <vPortFree+0xc4>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	3301      	adds	r3, #1
 8002816:	4a06      	ldr	r2, [pc, #24]	@ (8002830 <vPortFree+0xc4>)
 8002818:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800281a:	f7ff fa17 	bl	8001c4c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800281e:	bf00      	nop
 8002820:	3718      	adds	r7, #24
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	2000106c 	.word	0x2000106c
 800282c:	2000105c 	.word	0x2000105c
 8002830:	20001068 	.word	0x20001068

08002834 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002834:	b480      	push	{r7}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800283a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800283e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002840:	4b27      	ldr	r3, [pc, #156]	@ (80028e0 <prvHeapInit+0xac>)
 8002842:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f003 0307 	and.w	r3, r3, #7
 800284a:	2b00      	cmp	r3, #0
 800284c:	d00c      	beq.n	8002868 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	3307      	adds	r3, #7
 8002852:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f023 0307 	bic.w	r3, r3, #7
 800285a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800285c:	68ba      	ldr	r2, [r7, #8]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	4a1f      	ldr	r2, [pc, #124]	@ (80028e0 <prvHeapInit+0xac>)
 8002864:	4413      	add	r3, r2
 8002866:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800286c:	4a1d      	ldr	r2, [pc, #116]	@ (80028e4 <prvHeapInit+0xb0>)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002872:	4b1c      	ldr	r3, [pc, #112]	@ (80028e4 <prvHeapInit+0xb0>)
 8002874:	2200      	movs	r2, #0
 8002876:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	68ba      	ldr	r2, [r7, #8]
 800287c:	4413      	add	r3, r2
 800287e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002880:	2208      	movs	r2, #8
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	1a9b      	subs	r3, r3, r2
 8002886:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f023 0307 	bic.w	r3, r3, #7
 800288e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	4a15      	ldr	r2, [pc, #84]	@ (80028e8 <prvHeapInit+0xb4>)
 8002894:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002896:	4b14      	ldr	r3, [pc, #80]	@ (80028e8 <prvHeapInit+0xb4>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	2200      	movs	r2, #0
 800289c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800289e:	4b12      	ldr	r3, [pc, #72]	@ (80028e8 <prvHeapInit+0xb4>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	2200      	movs	r2, #0
 80028a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	68fa      	ldr	r2, [r7, #12]
 80028ae:	1ad2      	subs	r2, r2, r3
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80028b4:	4b0c      	ldr	r3, [pc, #48]	@ (80028e8 <prvHeapInit+0xb4>)
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	4a0a      	ldr	r2, [pc, #40]	@ (80028ec <prvHeapInit+0xb8>)
 80028c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	4a09      	ldr	r2, [pc, #36]	@ (80028f0 <prvHeapInit+0xbc>)
 80028ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80028cc:	4b09      	ldr	r3, [pc, #36]	@ (80028f4 <prvHeapInit+0xc0>)
 80028ce:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80028d2:	601a      	str	r2, [r3, #0]
}
 80028d4:	bf00      	nop
 80028d6:	3714      	adds	r7, #20
 80028d8:	46bd      	mov	sp, r7
 80028da:	bc80      	pop	{r7}
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	20000450 	.word	0x20000450
 80028e4:	20001050 	.word	0x20001050
 80028e8:	20001058 	.word	0x20001058
 80028ec:	20001060 	.word	0x20001060
 80028f0:	2000105c 	.word	0x2000105c
 80028f4:	2000106c 	.word	0x2000106c

080028f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80028f8:	b480      	push	{r7}
 80028fa:	b085      	sub	sp, #20
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002900:	4b27      	ldr	r3, [pc, #156]	@ (80029a0 <prvInsertBlockIntoFreeList+0xa8>)
 8002902:	60fb      	str	r3, [r7, #12]
 8002904:	e002      	b.n	800290c <prvInsertBlockIntoFreeList+0x14>
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	60fb      	str	r3, [r7, #12]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	429a      	cmp	r2, r3
 8002914:	d8f7      	bhi.n	8002906 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	68ba      	ldr	r2, [r7, #8]
 8002920:	4413      	add	r3, r2
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	429a      	cmp	r2, r3
 8002926:	d108      	bne.n	800293a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	685a      	ldr	r2, [r3, #4]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	441a      	add	r2, r3
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	68ba      	ldr	r2, [r7, #8]
 8002944:	441a      	add	r2, r3
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	429a      	cmp	r2, r3
 800294c:	d118      	bne.n	8002980 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	4b14      	ldr	r3, [pc, #80]	@ (80029a4 <prvInsertBlockIntoFreeList+0xac>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	429a      	cmp	r2, r3
 8002958:	d00d      	beq.n	8002976 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685a      	ldr	r2, [r3, #4]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	441a      	add	r2, r3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	601a      	str	r2, [r3, #0]
 8002974:	e008      	b.n	8002988 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002976:	4b0b      	ldr	r3, [pc, #44]	@ (80029a4 <prvInsertBlockIntoFreeList+0xac>)
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	601a      	str	r2, [r3, #0]
 800297e:	e003      	b.n	8002988 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002988:	68fa      	ldr	r2, [r7, #12]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	429a      	cmp	r2, r3
 800298e:	d002      	beq.n	8002996 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002996:	bf00      	nop
 8002998:	3714      	adds	r7, #20
 800299a:	46bd      	mov	sp, r7
 800299c:	bc80      	pop	{r7}
 800299e:	4770      	bx	lr
 80029a0:	20001050 	.word	0x20001050
 80029a4:	20001058 	.word	0x20001058

080029a8 <siprintf>:
 80029a8:	b40e      	push	{r1, r2, r3}
 80029aa:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80029ae:	b510      	push	{r4, lr}
 80029b0:	2400      	movs	r4, #0
 80029b2:	b09d      	sub	sp, #116	@ 0x74
 80029b4:	ab1f      	add	r3, sp, #124	@ 0x7c
 80029b6:	9002      	str	r0, [sp, #8]
 80029b8:	9006      	str	r0, [sp, #24]
 80029ba:	9107      	str	r1, [sp, #28]
 80029bc:	9104      	str	r1, [sp, #16]
 80029be:	4809      	ldr	r0, [pc, #36]	@ (80029e4 <siprintf+0x3c>)
 80029c0:	4909      	ldr	r1, [pc, #36]	@ (80029e8 <siprintf+0x40>)
 80029c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80029c6:	9105      	str	r1, [sp, #20]
 80029c8:	6800      	ldr	r0, [r0, #0]
 80029ca:	a902      	add	r1, sp, #8
 80029cc:	9301      	str	r3, [sp, #4]
 80029ce:	941b      	str	r4, [sp, #108]	@ 0x6c
 80029d0:	f000 f9a0 	bl	8002d14 <_svfiprintf_r>
 80029d4:	9b02      	ldr	r3, [sp, #8]
 80029d6:	701c      	strb	r4, [r3, #0]
 80029d8:	b01d      	add	sp, #116	@ 0x74
 80029da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80029de:	b003      	add	sp, #12
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	20000010 	.word	0x20000010
 80029e8:	ffff0208 	.word	0xffff0208

080029ec <memset>:
 80029ec:	4603      	mov	r3, r0
 80029ee:	4402      	add	r2, r0
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d100      	bne.n	80029f6 <memset+0xa>
 80029f4:	4770      	bx	lr
 80029f6:	f803 1b01 	strb.w	r1, [r3], #1
 80029fa:	e7f9      	b.n	80029f0 <memset+0x4>

080029fc <__errno>:
 80029fc:	4b01      	ldr	r3, [pc, #4]	@ (8002a04 <__errno+0x8>)
 80029fe:	6818      	ldr	r0, [r3, #0]
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	20000010 	.word	0x20000010

08002a08 <__libc_init_array>:
 8002a08:	b570      	push	{r4, r5, r6, lr}
 8002a0a:	2600      	movs	r6, #0
 8002a0c:	4d0c      	ldr	r5, [pc, #48]	@ (8002a40 <__libc_init_array+0x38>)
 8002a0e:	4c0d      	ldr	r4, [pc, #52]	@ (8002a44 <__libc_init_array+0x3c>)
 8002a10:	1b64      	subs	r4, r4, r5
 8002a12:	10a4      	asrs	r4, r4, #2
 8002a14:	42a6      	cmp	r6, r4
 8002a16:	d109      	bne.n	8002a2c <__libc_init_array+0x24>
 8002a18:	f000 fc76 	bl	8003308 <_init>
 8002a1c:	2600      	movs	r6, #0
 8002a1e:	4d0a      	ldr	r5, [pc, #40]	@ (8002a48 <__libc_init_array+0x40>)
 8002a20:	4c0a      	ldr	r4, [pc, #40]	@ (8002a4c <__libc_init_array+0x44>)
 8002a22:	1b64      	subs	r4, r4, r5
 8002a24:	10a4      	asrs	r4, r4, #2
 8002a26:	42a6      	cmp	r6, r4
 8002a28:	d105      	bne.n	8002a36 <__libc_init_array+0x2e>
 8002a2a:	bd70      	pop	{r4, r5, r6, pc}
 8002a2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a30:	4798      	blx	r3
 8002a32:	3601      	adds	r6, #1
 8002a34:	e7ee      	b.n	8002a14 <__libc_init_array+0xc>
 8002a36:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a3a:	4798      	blx	r3
 8002a3c:	3601      	adds	r6, #1
 8002a3e:	e7f2      	b.n	8002a26 <__libc_init_array+0x1e>
 8002a40:	080033dc 	.word	0x080033dc
 8002a44:	080033dc 	.word	0x080033dc
 8002a48:	080033dc 	.word	0x080033dc
 8002a4c:	080033e0 	.word	0x080033e0

08002a50 <__retarget_lock_acquire_recursive>:
 8002a50:	4770      	bx	lr

08002a52 <__retarget_lock_release_recursive>:
 8002a52:	4770      	bx	lr

08002a54 <memcpy>:
 8002a54:	440a      	add	r2, r1
 8002a56:	4291      	cmp	r1, r2
 8002a58:	f100 33ff 	add.w	r3, r0, #4294967295
 8002a5c:	d100      	bne.n	8002a60 <memcpy+0xc>
 8002a5e:	4770      	bx	lr
 8002a60:	b510      	push	{r4, lr}
 8002a62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002a66:	4291      	cmp	r1, r2
 8002a68:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002a6c:	d1f9      	bne.n	8002a62 <memcpy+0xe>
 8002a6e:	bd10      	pop	{r4, pc}

08002a70 <_free_r>:
 8002a70:	b538      	push	{r3, r4, r5, lr}
 8002a72:	4605      	mov	r5, r0
 8002a74:	2900      	cmp	r1, #0
 8002a76:	d040      	beq.n	8002afa <_free_r+0x8a>
 8002a78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002a7c:	1f0c      	subs	r4, r1, #4
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	bfb8      	it	lt
 8002a82:	18e4      	addlt	r4, r4, r3
 8002a84:	f000 f8de 	bl	8002c44 <__malloc_lock>
 8002a88:	4a1c      	ldr	r2, [pc, #112]	@ (8002afc <_free_r+0x8c>)
 8002a8a:	6813      	ldr	r3, [r2, #0]
 8002a8c:	b933      	cbnz	r3, 8002a9c <_free_r+0x2c>
 8002a8e:	6063      	str	r3, [r4, #4]
 8002a90:	6014      	str	r4, [r2, #0]
 8002a92:	4628      	mov	r0, r5
 8002a94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002a98:	f000 b8da 	b.w	8002c50 <__malloc_unlock>
 8002a9c:	42a3      	cmp	r3, r4
 8002a9e:	d908      	bls.n	8002ab2 <_free_r+0x42>
 8002aa0:	6820      	ldr	r0, [r4, #0]
 8002aa2:	1821      	adds	r1, r4, r0
 8002aa4:	428b      	cmp	r3, r1
 8002aa6:	bf01      	itttt	eq
 8002aa8:	6819      	ldreq	r1, [r3, #0]
 8002aaa:	685b      	ldreq	r3, [r3, #4]
 8002aac:	1809      	addeq	r1, r1, r0
 8002aae:	6021      	streq	r1, [r4, #0]
 8002ab0:	e7ed      	b.n	8002a8e <_free_r+0x1e>
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	b10b      	cbz	r3, 8002abc <_free_r+0x4c>
 8002ab8:	42a3      	cmp	r3, r4
 8002aba:	d9fa      	bls.n	8002ab2 <_free_r+0x42>
 8002abc:	6811      	ldr	r1, [r2, #0]
 8002abe:	1850      	adds	r0, r2, r1
 8002ac0:	42a0      	cmp	r0, r4
 8002ac2:	d10b      	bne.n	8002adc <_free_r+0x6c>
 8002ac4:	6820      	ldr	r0, [r4, #0]
 8002ac6:	4401      	add	r1, r0
 8002ac8:	1850      	adds	r0, r2, r1
 8002aca:	4283      	cmp	r3, r0
 8002acc:	6011      	str	r1, [r2, #0]
 8002ace:	d1e0      	bne.n	8002a92 <_free_r+0x22>
 8002ad0:	6818      	ldr	r0, [r3, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	4408      	add	r0, r1
 8002ad6:	6010      	str	r0, [r2, #0]
 8002ad8:	6053      	str	r3, [r2, #4]
 8002ada:	e7da      	b.n	8002a92 <_free_r+0x22>
 8002adc:	d902      	bls.n	8002ae4 <_free_r+0x74>
 8002ade:	230c      	movs	r3, #12
 8002ae0:	602b      	str	r3, [r5, #0]
 8002ae2:	e7d6      	b.n	8002a92 <_free_r+0x22>
 8002ae4:	6820      	ldr	r0, [r4, #0]
 8002ae6:	1821      	adds	r1, r4, r0
 8002ae8:	428b      	cmp	r3, r1
 8002aea:	bf01      	itttt	eq
 8002aec:	6819      	ldreq	r1, [r3, #0]
 8002aee:	685b      	ldreq	r3, [r3, #4]
 8002af0:	1809      	addeq	r1, r1, r0
 8002af2:	6021      	streq	r1, [r4, #0]
 8002af4:	6063      	str	r3, [r4, #4]
 8002af6:	6054      	str	r4, [r2, #4]
 8002af8:	e7cb      	b.n	8002a92 <_free_r+0x22>
 8002afa:	bd38      	pop	{r3, r4, r5, pc}
 8002afc:	200011b4 	.word	0x200011b4

08002b00 <sbrk_aligned>:
 8002b00:	b570      	push	{r4, r5, r6, lr}
 8002b02:	4e0f      	ldr	r6, [pc, #60]	@ (8002b40 <sbrk_aligned+0x40>)
 8002b04:	460c      	mov	r4, r1
 8002b06:	6831      	ldr	r1, [r6, #0]
 8002b08:	4605      	mov	r5, r0
 8002b0a:	b911      	cbnz	r1, 8002b12 <sbrk_aligned+0x12>
 8002b0c:	f000 fba8 	bl	8003260 <_sbrk_r>
 8002b10:	6030      	str	r0, [r6, #0]
 8002b12:	4621      	mov	r1, r4
 8002b14:	4628      	mov	r0, r5
 8002b16:	f000 fba3 	bl	8003260 <_sbrk_r>
 8002b1a:	1c43      	adds	r3, r0, #1
 8002b1c:	d103      	bne.n	8002b26 <sbrk_aligned+0x26>
 8002b1e:	f04f 34ff 	mov.w	r4, #4294967295
 8002b22:	4620      	mov	r0, r4
 8002b24:	bd70      	pop	{r4, r5, r6, pc}
 8002b26:	1cc4      	adds	r4, r0, #3
 8002b28:	f024 0403 	bic.w	r4, r4, #3
 8002b2c:	42a0      	cmp	r0, r4
 8002b2e:	d0f8      	beq.n	8002b22 <sbrk_aligned+0x22>
 8002b30:	1a21      	subs	r1, r4, r0
 8002b32:	4628      	mov	r0, r5
 8002b34:	f000 fb94 	bl	8003260 <_sbrk_r>
 8002b38:	3001      	adds	r0, #1
 8002b3a:	d1f2      	bne.n	8002b22 <sbrk_aligned+0x22>
 8002b3c:	e7ef      	b.n	8002b1e <sbrk_aligned+0x1e>
 8002b3e:	bf00      	nop
 8002b40:	200011b0 	.word	0x200011b0

08002b44 <_malloc_r>:
 8002b44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002b48:	1ccd      	adds	r5, r1, #3
 8002b4a:	f025 0503 	bic.w	r5, r5, #3
 8002b4e:	3508      	adds	r5, #8
 8002b50:	2d0c      	cmp	r5, #12
 8002b52:	bf38      	it	cc
 8002b54:	250c      	movcc	r5, #12
 8002b56:	2d00      	cmp	r5, #0
 8002b58:	4606      	mov	r6, r0
 8002b5a:	db01      	blt.n	8002b60 <_malloc_r+0x1c>
 8002b5c:	42a9      	cmp	r1, r5
 8002b5e:	d904      	bls.n	8002b6a <_malloc_r+0x26>
 8002b60:	230c      	movs	r3, #12
 8002b62:	6033      	str	r3, [r6, #0]
 8002b64:	2000      	movs	r0, #0
 8002b66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002b6a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002c40 <_malloc_r+0xfc>
 8002b6e:	f000 f869 	bl	8002c44 <__malloc_lock>
 8002b72:	f8d8 3000 	ldr.w	r3, [r8]
 8002b76:	461c      	mov	r4, r3
 8002b78:	bb44      	cbnz	r4, 8002bcc <_malloc_r+0x88>
 8002b7a:	4629      	mov	r1, r5
 8002b7c:	4630      	mov	r0, r6
 8002b7e:	f7ff ffbf 	bl	8002b00 <sbrk_aligned>
 8002b82:	1c43      	adds	r3, r0, #1
 8002b84:	4604      	mov	r4, r0
 8002b86:	d158      	bne.n	8002c3a <_malloc_r+0xf6>
 8002b88:	f8d8 4000 	ldr.w	r4, [r8]
 8002b8c:	4627      	mov	r7, r4
 8002b8e:	2f00      	cmp	r7, #0
 8002b90:	d143      	bne.n	8002c1a <_malloc_r+0xd6>
 8002b92:	2c00      	cmp	r4, #0
 8002b94:	d04b      	beq.n	8002c2e <_malloc_r+0xea>
 8002b96:	6823      	ldr	r3, [r4, #0]
 8002b98:	4639      	mov	r1, r7
 8002b9a:	4630      	mov	r0, r6
 8002b9c:	eb04 0903 	add.w	r9, r4, r3
 8002ba0:	f000 fb5e 	bl	8003260 <_sbrk_r>
 8002ba4:	4581      	cmp	r9, r0
 8002ba6:	d142      	bne.n	8002c2e <_malloc_r+0xea>
 8002ba8:	6821      	ldr	r1, [r4, #0]
 8002baa:	4630      	mov	r0, r6
 8002bac:	1a6d      	subs	r5, r5, r1
 8002bae:	4629      	mov	r1, r5
 8002bb0:	f7ff ffa6 	bl	8002b00 <sbrk_aligned>
 8002bb4:	3001      	adds	r0, #1
 8002bb6:	d03a      	beq.n	8002c2e <_malloc_r+0xea>
 8002bb8:	6823      	ldr	r3, [r4, #0]
 8002bba:	442b      	add	r3, r5
 8002bbc:	6023      	str	r3, [r4, #0]
 8002bbe:	f8d8 3000 	ldr.w	r3, [r8]
 8002bc2:	685a      	ldr	r2, [r3, #4]
 8002bc4:	bb62      	cbnz	r2, 8002c20 <_malloc_r+0xdc>
 8002bc6:	f8c8 7000 	str.w	r7, [r8]
 8002bca:	e00f      	b.n	8002bec <_malloc_r+0xa8>
 8002bcc:	6822      	ldr	r2, [r4, #0]
 8002bce:	1b52      	subs	r2, r2, r5
 8002bd0:	d420      	bmi.n	8002c14 <_malloc_r+0xd0>
 8002bd2:	2a0b      	cmp	r2, #11
 8002bd4:	d917      	bls.n	8002c06 <_malloc_r+0xc2>
 8002bd6:	1961      	adds	r1, r4, r5
 8002bd8:	42a3      	cmp	r3, r4
 8002bda:	6025      	str	r5, [r4, #0]
 8002bdc:	bf18      	it	ne
 8002bde:	6059      	strne	r1, [r3, #4]
 8002be0:	6863      	ldr	r3, [r4, #4]
 8002be2:	bf08      	it	eq
 8002be4:	f8c8 1000 	streq.w	r1, [r8]
 8002be8:	5162      	str	r2, [r4, r5]
 8002bea:	604b      	str	r3, [r1, #4]
 8002bec:	4630      	mov	r0, r6
 8002bee:	f000 f82f 	bl	8002c50 <__malloc_unlock>
 8002bf2:	f104 000b 	add.w	r0, r4, #11
 8002bf6:	1d23      	adds	r3, r4, #4
 8002bf8:	f020 0007 	bic.w	r0, r0, #7
 8002bfc:	1ac2      	subs	r2, r0, r3
 8002bfe:	bf1c      	itt	ne
 8002c00:	1a1b      	subne	r3, r3, r0
 8002c02:	50a3      	strne	r3, [r4, r2]
 8002c04:	e7af      	b.n	8002b66 <_malloc_r+0x22>
 8002c06:	6862      	ldr	r2, [r4, #4]
 8002c08:	42a3      	cmp	r3, r4
 8002c0a:	bf0c      	ite	eq
 8002c0c:	f8c8 2000 	streq.w	r2, [r8]
 8002c10:	605a      	strne	r2, [r3, #4]
 8002c12:	e7eb      	b.n	8002bec <_malloc_r+0xa8>
 8002c14:	4623      	mov	r3, r4
 8002c16:	6864      	ldr	r4, [r4, #4]
 8002c18:	e7ae      	b.n	8002b78 <_malloc_r+0x34>
 8002c1a:	463c      	mov	r4, r7
 8002c1c:	687f      	ldr	r7, [r7, #4]
 8002c1e:	e7b6      	b.n	8002b8e <_malloc_r+0x4a>
 8002c20:	461a      	mov	r2, r3
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	42a3      	cmp	r3, r4
 8002c26:	d1fb      	bne.n	8002c20 <_malloc_r+0xdc>
 8002c28:	2300      	movs	r3, #0
 8002c2a:	6053      	str	r3, [r2, #4]
 8002c2c:	e7de      	b.n	8002bec <_malloc_r+0xa8>
 8002c2e:	230c      	movs	r3, #12
 8002c30:	4630      	mov	r0, r6
 8002c32:	6033      	str	r3, [r6, #0]
 8002c34:	f000 f80c 	bl	8002c50 <__malloc_unlock>
 8002c38:	e794      	b.n	8002b64 <_malloc_r+0x20>
 8002c3a:	6005      	str	r5, [r0, #0]
 8002c3c:	e7d6      	b.n	8002bec <_malloc_r+0xa8>
 8002c3e:	bf00      	nop
 8002c40:	200011b4 	.word	0x200011b4

08002c44 <__malloc_lock>:
 8002c44:	4801      	ldr	r0, [pc, #4]	@ (8002c4c <__malloc_lock+0x8>)
 8002c46:	f7ff bf03 	b.w	8002a50 <__retarget_lock_acquire_recursive>
 8002c4a:	bf00      	nop
 8002c4c:	200011ac 	.word	0x200011ac

08002c50 <__malloc_unlock>:
 8002c50:	4801      	ldr	r0, [pc, #4]	@ (8002c58 <__malloc_unlock+0x8>)
 8002c52:	f7ff befe 	b.w	8002a52 <__retarget_lock_release_recursive>
 8002c56:	bf00      	nop
 8002c58:	200011ac 	.word	0x200011ac

08002c5c <__ssputs_r>:
 8002c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c60:	461f      	mov	r7, r3
 8002c62:	688e      	ldr	r6, [r1, #8]
 8002c64:	4682      	mov	sl, r0
 8002c66:	42be      	cmp	r6, r7
 8002c68:	460c      	mov	r4, r1
 8002c6a:	4690      	mov	r8, r2
 8002c6c:	680b      	ldr	r3, [r1, #0]
 8002c6e:	d82d      	bhi.n	8002ccc <__ssputs_r+0x70>
 8002c70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002c74:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002c78:	d026      	beq.n	8002cc8 <__ssputs_r+0x6c>
 8002c7a:	6965      	ldr	r5, [r4, #20]
 8002c7c:	6909      	ldr	r1, [r1, #16]
 8002c7e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002c82:	eba3 0901 	sub.w	r9, r3, r1
 8002c86:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002c8a:	1c7b      	adds	r3, r7, #1
 8002c8c:	444b      	add	r3, r9
 8002c8e:	106d      	asrs	r5, r5, #1
 8002c90:	429d      	cmp	r5, r3
 8002c92:	bf38      	it	cc
 8002c94:	461d      	movcc	r5, r3
 8002c96:	0553      	lsls	r3, r2, #21
 8002c98:	d527      	bpl.n	8002cea <__ssputs_r+0x8e>
 8002c9a:	4629      	mov	r1, r5
 8002c9c:	f7ff ff52 	bl	8002b44 <_malloc_r>
 8002ca0:	4606      	mov	r6, r0
 8002ca2:	b360      	cbz	r0, 8002cfe <__ssputs_r+0xa2>
 8002ca4:	464a      	mov	r2, r9
 8002ca6:	6921      	ldr	r1, [r4, #16]
 8002ca8:	f7ff fed4 	bl	8002a54 <memcpy>
 8002cac:	89a3      	ldrh	r3, [r4, #12]
 8002cae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002cb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002cb6:	81a3      	strh	r3, [r4, #12]
 8002cb8:	6126      	str	r6, [r4, #16]
 8002cba:	444e      	add	r6, r9
 8002cbc:	6026      	str	r6, [r4, #0]
 8002cbe:	463e      	mov	r6, r7
 8002cc0:	6165      	str	r5, [r4, #20]
 8002cc2:	eba5 0509 	sub.w	r5, r5, r9
 8002cc6:	60a5      	str	r5, [r4, #8]
 8002cc8:	42be      	cmp	r6, r7
 8002cca:	d900      	bls.n	8002cce <__ssputs_r+0x72>
 8002ccc:	463e      	mov	r6, r7
 8002cce:	4632      	mov	r2, r6
 8002cd0:	4641      	mov	r1, r8
 8002cd2:	6820      	ldr	r0, [r4, #0]
 8002cd4:	f000 faaa 	bl	800322c <memmove>
 8002cd8:	2000      	movs	r0, #0
 8002cda:	68a3      	ldr	r3, [r4, #8]
 8002cdc:	1b9b      	subs	r3, r3, r6
 8002cde:	60a3      	str	r3, [r4, #8]
 8002ce0:	6823      	ldr	r3, [r4, #0]
 8002ce2:	4433      	add	r3, r6
 8002ce4:	6023      	str	r3, [r4, #0]
 8002ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002cea:	462a      	mov	r2, r5
 8002cec:	f000 fad6 	bl	800329c <_realloc_r>
 8002cf0:	4606      	mov	r6, r0
 8002cf2:	2800      	cmp	r0, #0
 8002cf4:	d1e0      	bne.n	8002cb8 <__ssputs_r+0x5c>
 8002cf6:	4650      	mov	r0, sl
 8002cf8:	6921      	ldr	r1, [r4, #16]
 8002cfa:	f7ff feb9 	bl	8002a70 <_free_r>
 8002cfe:	230c      	movs	r3, #12
 8002d00:	f8ca 3000 	str.w	r3, [sl]
 8002d04:	89a3      	ldrh	r3, [r4, #12]
 8002d06:	f04f 30ff 	mov.w	r0, #4294967295
 8002d0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002d0e:	81a3      	strh	r3, [r4, #12]
 8002d10:	e7e9      	b.n	8002ce6 <__ssputs_r+0x8a>
	...

08002d14 <_svfiprintf_r>:
 8002d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d18:	4698      	mov	r8, r3
 8002d1a:	898b      	ldrh	r3, [r1, #12]
 8002d1c:	4607      	mov	r7, r0
 8002d1e:	061b      	lsls	r3, r3, #24
 8002d20:	460d      	mov	r5, r1
 8002d22:	4614      	mov	r4, r2
 8002d24:	b09d      	sub	sp, #116	@ 0x74
 8002d26:	d510      	bpl.n	8002d4a <_svfiprintf_r+0x36>
 8002d28:	690b      	ldr	r3, [r1, #16]
 8002d2a:	b973      	cbnz	r3, 8002d4a <_svfiprintf_r+0x36>
 8002d2c:	2140      	movs	r1, #64	@ 0x40
 8002d2e:	f7ff ff09 	bl	8002b44 <_malloc_r>
 8002d32:	6028      	str	r0, [r5, #0]
 8002d34:	6128      	str	r0, [r5, #16]
 8002d36:	b930      	cbnz	r0, 8002d46 <_svfiprintf_r+0x32>
 8002d38:	230c      	movs	r3, #12
 8002d3a:	603b      	str	r3, [r7, #0]
 8002d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d40:	b01d      	add	sp, #116	@ 0x74
 8002d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d46:	2340      	movs	r3, #64	@ 0x40
 8002d48:	616b      	str	r3, [r5, #20]
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8002d4e:	2320      	movs	r3, #32
 8002d50:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002d54:	2330      	movs	r3, #48	@ 0x30
 8002d56:	f04f 0901 	mov.w	r9, #1
 8002d5a:	f8cd 800c 	str.w	r8, [sp, #12]
 8002d5e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8002ef8 <_svfiprintf_r+0x1e4>
 8002d62:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002d66:	4623      	mov	r3, r4
 8002d68:	469a      	mov	sl, r3
 8002d6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002d6e:	b10a      	cbz	r2, 8002d74 <_svfiprintf_r+0x60>
 8002d70:	2a25      	cmp	r2, #37	@ 0x25
 8002d72:	d1f9      	bne.n	8002d68 <_svfiprintf_r+0x54>
 8002d74:	ebba 0b04 	subs.w	fp, sl, r4
 8002d78:	d00b      	beq.n	8002d92 <_svfiprintf_r+0x7e>
 8002d7a:	465b      	mov	r3, fp
 8002d7c:	4622      	mov	r2, r4
 8002d7e:	4629      	mov	r1, r5
 8002d80:	4638      	mov	r0, r7
 8002d82:	f7ff ff6b 	bl	8002c5c <__ssputs_r>
 8002d86:	3001      	adds	r0, #1
 8002d88:	f000 80a7 	beq.w	8002eda <_svfiprintf_r+0x1c6>
 8002d8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002d8e:	445a      	add	r2, fp
 8002d90:	9209      	str	r2, [sp, #36]	@ 0x24
 8002d92:	f89a 3000 	ldrb.w	r3, [sl]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	f000 809f 	beq.w	8002eda <_svfiprintf_r+0x1c6>
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	f04f 32ff 	mov.w	r2, #4294967295
 8002da2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002da6:	f10a 0a01 	add.w	sl, sl, #1
 8002daa:	9304      	str	r3, [sp, #16]
 8002dac:	9307      	str	r3, [sp, #28]
 8002dae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002db2:	931a      	str	r3, [sp, #104]	@ 0x68
 8002db4:	4654      	mov	r4, sl
 8002db6:	2205      	movs	r2, #5
 8002db8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002dbc:	484e      	ldr	r0, [pc, #312]	@ (8002ef8 <_svfiprintf_r+0x1e4>)
 8002dbe:	f000 fa5f 	bl	8003280 <memchr>
 8002dc2:	9a04      	ldr	r2, [sp, #16]
 8002dc4:	b9d8      	cbnz	r0, 8002dfe <_svfiprintf_r+0xea>
 8002dc6:	06d0      	lsls	r0, r2, #27
 8002dc8:	bf44      	itt	mi
 8002dca:	2320      	movmi	r3, #32
 8002dcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002dd0:	0711      	lsls	r1, r2, #28
 8002dd2:	bf44      	itt	mi
 8002dd4:	232b      	movmi	r3, #43	@ 0x2b
 8002dd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002dda:	f89a 3000 	ldrb.w	r3, [sl]
 8002dde:	2b2a      	cmp	r3, #42	@ 0x2a
 8002de0:	d015      	beq.n	8002e0e <_svfiprintf_r+0xfa>
 8002de2:	4654      	mov	r4, sl
 8002de4:	2000      	movs	r0, #0
 8002de6:	f04f 0c0a 	mov.w	ip, #10
 8002dea:	9a07      	ldr	r2, [sp, #28]
 8002dec:	4621      	mov	r1, r4
 8002dee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002df2:	3b30      	subs	r3, #48	@ 0x30
 8002df4:	2b09      	cmp	r3, #9
 8002df6:	d94b      	bls.n	8002e90 <_svfiprintf_r+0x17c>
 8002df8:	b1b0      	cbz	r0, 8002e28 <_svfiprintf_r+0x114>
 8002dfa:	9207      	str	r2, [sp, #28]
 8002dfc:	e014      	b.n	8002e28 <_svfiprintf_r+0x114>
 8002dfe:	eba0 0308 	sub.w	r3, r0, r8
 8002e02:	fa09 f303 	lsl.w	r3, r9, r3
 8002e06:	4313      	orrs	r3, r2
 8002e08:	46a2      	mov	sl, r4
 8002e0a:	9304      	str	r3, [sp, #16]
 8002e0c:	e7d2      	b.n	8002db4 <_svfiprintf_r+0xa0>
 8002e0e:	9b03      	ldr	r3, [sp, #12]
 8002e10:	1d19      	adds	r1, r3, #4
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	9103      	str	r1, [sp, #12]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	bfbb      	ittet	lt
 8002e1a:	425b      	neglt	r3, r3
 8002e1c:	f042 0202 	orrlt.w	r2, r2, #2
 8002e20:	9307      	strge	r3, [sp, #28]
 8002e22:	9307      	strlt	r3, [sp, #28]
 8002e24:	bfb8      	it	lt
 8002e26:	9204      	strlt	r2, [sp, #16]
 8002e28:	7823      	ldrb	r3, [r4, #0]
 8002e2a:	2b2e      	cmp	r3, #46	@ 0x2e
 8002e2c:	d10a      	bne.n	8002e44 <_svfiprintf_r+0x130>
 8002e2e:	7863      	ldrb	r3, [r4, #1]
 8002e30:	2b2a      	cmp	r3, #42	@ 0x2a
 8002e32:	d132      	bne.n	8002e9a <_svfiprintf_r+0x186>
 8002e34:	9b03      	ldr	r3, [sp, #12]
 8002e36:	3402      	adds	r4, #2
 8002e38:	1d1a      	adds	r2, r3, #4
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	9203      	str	r2, [sp, #12]
 8002e3e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002e42:	9305      	str	r3, [sp, #20]
 8002e44:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8002efc <_svfiprintf_r+0x1e8>
 8002e48:	2203      	movs	r2, #3
 8002e4a:	4650      	mov	r0, sl
 8002e4c:	7821      	ldrb	r1, [r4, #0]
 8002e4e:	f000 fa17 	bl	8003280 <memchr>
 8002e52:	b138      	cbz	r0, 8002e64 <_svfiprintf_r+0x150>
 8002e54:	2240      	movs	r2, #64	@ 0x40
 8002e56:	9b04      	ldr	r3, [sp, #16]
 8002e58:	eba0 000a 	sub.w	r0, r0, sl
 8002e5c:	4082      	lsls	r2, r0
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	3401      	adds	r4, #1
 8002e62:	9304      	str	r3, [sp, #16]
 8002e64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e68:	2206      	movs	r2, #6
 8002e6a:	4825      	ldr	r0, [pc, #148]	@ (8002f00 <_svfiprintf_r+0x1ec>)
 8002e6c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002e70:	f000 fa06 	bl	8003280 <memchr>
 8002e74:	2800      	cmp	r0, #0
 8002e76:	d036      	beq.n	8002ee6 <_svfiprintf_r+0x1d2>
 8002e78:	4b22      	ldr	r3, [pc, #136]	@ (8002f04 <_svfiprintf_r+0x1f0>)
 8002e7a:	bb1b      	cbnz	r3, 8002ec4 <_svfiprintf_r+0x1b0>
 8002e7c:	9b03      	ldr	r3, [sp, #12]
 8002e7e:	3307      	adds	r3, #7
 8002e80:	f023 0307 	bic.w	r3, r3, #7
 8002e84:	3308      	adds	r3, #8
 8002e86:	9303      	str	r3, [sp, #12]
 8002e88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002e8a:	4433      	add	r3, r6
 8002e8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8002e8e:	e76a      	b.n	8002d66 <_svfiprintf_r+0x52>
 8002e90:	460c      	mov	r4, r1
 8002e92:	2001      	movs	r0, #1
 8002e94:	fb0c 3202 	mla	r2, ip, r2, r3
 8002e98:	e7a8      	b.n	8002dec <_svfiprintf_r+0xd8>
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	f04f 0c0a 	mov.w	ip, #10
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	3401      	adds	r4, #1
 8002ea4:	9305      	str	r3, [sp, #20]
 8002ea6:	4620      	mov	r0, r4
 8002ea8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002eac:	3a30      	subs	r2, #48	@ 0x30
 8002eae:	2a09      	cmp	r2, #9
 8002eb0:	d903      	bls.n	8002eba <_svfiprintf_r+0x1a6>
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d0c6      	beq.n	8002e44 <_svfiprintf_r+0x130>
 8002eb6:	9105      	str	r1, [sp, #20]
 8002eb8:	e7c4      	b.n	8002e44 <_svfiprintf_r+0x130>
 8002eba:	4604      	mov	r4, r0
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	fb0c 2101 	mla	r1, ip, r1, r2
 8002ec2:	e7f0      	b.n	8002ea6 <_svfiprintf_r+0x192>
 8002ec4:	ab03      	add	r3, sp, #12
 8002ec6:	9300      	str	r3, [sp, #0]
 8002ec8:	462a      	mov	r2, r5
 8002eca:	4638      	mov	r0, r7
 8002ecc:	4b0e      	ldr	r3, [pc, #56]	@ (8002f08 <_svfiprintf_r+0x1f4>)
 8002ece:	a904      	add	r1, sp, #16
 8002ed0:	f3af 8000 	nop.w
 8002ed4:	1c42      	adds	r2, r0, #1
 8002ed6:	4606      	mov	r6, r0
 8002ed8:	d1d6      	bne.n	8002e88 <_svfiprintf_r+0x174>
 8002eda:	89ab      	ldrh	r3, [r5, #12]
 8002edc:	065b      	lsls	r3, r3, #25
 8002ede:	f53f af2d 	bmi.w	8002d3c <_svfiprintf_r+0x28>
 8002ee2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002ee4:	e72c      	b.n	8002d40 <_svfiprintf_r+0x2c>
 8002ee6:	ab03      	add	r3, sp, #12
 8002ee8:	9300      	str	r3, [sp, #0]
 8002eea:	462a      	mov	r2, r5
 8002eec:	4638      	mov	r0, r7
 8002eee:	4b06      	ldr	r3, [pc, #24]	@ (8002f08 <_svfiprintf_r+0x1f4>)
 8002ef0:	a904      	add	r1, sp, #16
 8002ef2:	f000 f87d 	bl	8002ff0 <_printf_i>
 8002ef6:	e7ed      	b.n	8002ed4 <_svfiprintf_r+0x1c0>
 8002ef8:	080033a6 	.word	0x080033a6
 8002efc:	080033ac 	.word	0x080033ac
 8002f00:	080033b0 	.word	0x080033b0
 8002f04:	00000000 	.word	0x00000000
 8002f08:	08002c5d 	.word	0x08002c5d

08002f0c <_printf_common>:
 8002f0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f10:	4616      	mov	r6, r2
 8002f12:	4698      	mov	r8, r3
 8002f14:	688a      	ldr	r2, [r1, #8]
 8002f16:	690b      	ldr	r3, [r1, #16]
 8002f18:	4607      	mov	r7, r0
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	bfb8      	it	lt
 8002f1e:	4613      	movlt	r3, r2
 8002f20:	6033      	str	r3, [r6, #0]
 8002f22:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002f26:	460c      	mov	r4, r1
 8002f28:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002f2c:	b10a      	cbz	r2, 8002f32 <_printf_common+0x26>
 8002f2e:	3301      	adds	r3, #1
 8002f30:	6033      	str	r3, [r6, #0]
 8002f32:	6823      	ldr	r3, [r4, #0]
 8002f34:	0699      	lsls	r1, r3, #26
 8002f36:	bf42      	ittt	mi
 8002f38:	6833      	ldrmi	r3, [r6, #0]
 8002f3a:	3302      	addmi	r3, #2
 8002f3c:	6033      	strmi	r3, [r6, #0]
 8002f3e:	6825      	ldr	r5, [r4, #0]
 8002f40:	f015 0506 	ands.w	r5, r5, #6
 8002f44:	d106      	bne.n	8002f54 <_printf_common+0x48>
 8002f46:	f104 0a19 	add.w	sl, r4, #25
 8002f4a:	68e3      	ldr	r3, [r4, #12]
 8002f4c:	6832      	ldr	r2, [r6, #0]
 8002f4e:	1a9b      	subs	r3, r3, r2
 8002f50:	42ab      	cmp	r3, r5
 8002f52:	dc2b      	bgt.n	8002fac <_printf_common+0xa0>
 8002f54:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002f58:	6822      	ldr	r2, [r4, #0]
 8002f5a:	3b00      	subs	r3, #0
 8002f5c:	bf18      	it	ne
 8002f5e:	2301      	movne	r3, #1
 8002f60:	0692      	lsls	r2, r2, #26
 8002f62:	d430      	bmi.n	8002fc6 <_printf_common+0xba>
 8002f64:	4641      	mov	r1, r8
 8002f66:	4638      	mov	r0, r7
 8002f68:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002f6c:	47c8      	blx	r9
 8002f6e:	3001      	adds	r0, #1
 8002f70:	d023      	beq.n	8002fba <_printf_common+0xae>
 8002f72:	6823      	ldr	r3, [r4, #0]
 8002f74:	6922      	ldr	r2, [r4, #16]
 8002f76:	f003 0306 	and.w	r3, r3, #6
 8002f7a:	2b04      	cmp	r3, #4
 8002f7c:	bf14      	ite	ne
 8002f7e:	2500      	movne	r5, #0
 8002f80:	6833      	ldreq	r3, [r6, #0]
 8002f82:	f04f 0600 	mov.w	r6, #0
 8002f86:	bf08      	it	eq
 8002f88:	68e5      	ldreq	r5, [r4, #12]
 8002f8a:	f104 041a 	add.w	r4, r4, #26
 8002f8e:	bf08      	it	eq
 8002f90:	1aed      	subeq	r5, r5, r3
 8002f92:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002f96:	bf08      	it	eq
 8002f98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	bfc4      	itt	gt
 8002fa0:	1a9b      	subgt	r3, r3, r2
 8002fa2:	18ed      	addgt	r5, r5, r3
 8002fa4:	42b5      	cmp	r5, r6
 8002fa6:	d11a      	bne.n	8002fde <_printf_common+0xd2>
 8002fa8:	2000      	movs	r0, #0
 8002faa:	e008      	b.n	8002fbe <_printf_common+0xb2>
 8002fac:	2301      	movs	r3, #1
 8002fae:	4652      	mov	r2, sl
 8002fb0:	4641      	mov	r1, r8
 8002fb2:	4638      	mov	r0, r7
 8002fb4:	47c8      	blx	r9
 8002fb6:	3001      	adds	r0, #1
 8002fb8:	d103      	bne.n	8002fc2 <_printf_common+0xb6>
 8002fba:	f04f 30ff 	mov.w	r0, #4294967295
 8002fbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fc2:	3501      	adds	r5, #1
 8002fc4:	e7c1      	b.n	8002f4a <_printf_common+0x3e>
 8002fc6:	2030      	movs	r0, #48	@ 0x30
 8002fc8:	18e1      	adds	r1, r4, r3
 8002fca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002fce:	1c5a      	adds	r2, r3, #1
 8002fd0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002fd4:	4422      	add	r2, r4
 8002fd6:	3302      	adds	r3, #2
 8002fd8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002fdc:	e7c2      	b.n	8002f64 <_printf_common+0x58>
 8002fde:	2301      	movs	r3, #1
 8002fe0:	4622      	mov	r2, r4
 8002fe2:	4641      	mov	r1, r8
 8002fe4:	4638      	mov	r0, r7
 8002fe6:	47c8      	blx	r9
 8002fe8:	3001      	adds	r0, #1
 8002fea:	d0e6      	beq.n	8002fba <_printf_common+0xae>
 8002fec:	3601      	adds	r6, #1
 8002fee:	e7d9      	b.n	8002fa4 <_printf_common+0x98>

08002ff0 <_printf_i>:
 8002ff0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002ff4:	7e0f      	ldrb	r7, [r1, #24]
 8002ff6:	4691      	mov	r9, r2
 8002ff8:	2f78      	cmp	r7, #120	@ 0x78
 8002ffa:	4680      	mov	r8, r0
 8002ffc:	460c      	mov	r4, r1
 8002ffe:	469a      	mov	sl, r3
 8003000:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003002:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003006:	d807      	bhi.n	8003018 <_printf_i+0x28>
 8003008:	2f62      	cmp	r7, #98	@ 0x62
 800300a:	d80a      	bhi.n	8003022 <_printf_i+0x32>
 800300c:	2f00      	cmp	r7, #0
 800300e:	f000 80d1 	beq.w	80031b4 <_printf_i+0x1c4>
 8003012:	2f58      	cmp	r7, #88	@ 0x58
 8003014:	f000 80b8 	beq.w	8003188 <_printf_i+0x198>
 8003018:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800301c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003020:	e03a      	b.n	8003098 <_printf_i+0xa8>
 8003022:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003026:	2b15      	cmp	r3, #21
 8003028:	d8f6      	bhi.n	8003018 <_printf_i+0x28>
 800302a:	a101      	add	r1, pc, #4	@ (adr r1, 8003030 <_printf_i+0x40>)
 800302c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003030:	08003089 	.word	0x08003089
 8003034:	0800309d 	.word	0x0800309d
 8003038:	08003019 	.word	0x08003019
 800303c:	08003019 	.word	0x08003019
 8003040:	08003019 	.word	0x08003019
 8003044:	08003019 	.word	0x08003019
 8003048:	0800309d 	.word	0x0800309d
 800304c:	08003019 	.word	0x08003019
 8003050:	08003019 	.word	0x08003019
 8003054:	08003019 	.word	0x08003019
 8003058:	08003019 	.word	0x08003019
 800305c:	0800319b 	.word	0x0800319b
 8003060:	080030c7 	.word	0x080030c7
 8003064:	08003155 	.word	0x08003155
 8003068:	08003019 	.word	0x08003019
 800306c:	08003019 	.word	0x08003019
 8003070:	080031bd 	.word	0x080031bd
 8003074:	08003019 	.word	0x08003019
 8003078:	080030c7 	.word	0x080030c7
 800307c:	08003019 	.word	0x08003019
 8003080:	08003019 	.word	0x08003019
 8003084:	0800315d 	.word	0x0800315d
 8003088:	6833      	ldr	r3, [r6, #0]
 800308a:	1d1a      	adds	r2, r3, #4
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	6032      	str	r2, [r6, #0]
 8003090:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003094:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003098:	2301      	movs	r3, #1
 800309a:	e09c      	b.n	80031d6 <_printf_i+0x1e6>
 800309c:	6833      	ldr	r3, [r6, #0]
 800309e:	6820      	ldr	r0, [r4, #0]
 80030a0:	1d19      	adds	r1, r3, #4
 80030a2:	6031      	str	r1, [r6, #0]
 80030a4:	0606      	lsls	r6, r0, #24
 80030a6:	d501      	bpl.n	80030ac <_printf_i+0xbc>
 80030a8:	681d      	ldr	r5, [r3, #0]
 80030aa:	e003      	b.n	80030b4 <_printf_i+0xc4>
 80030ac:	0645      	lsls	r5, r0, #25
 80030ae:	d5fb      	bpl.n	80030a8 <_printf_i+0xb8>
 80030b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80030b4:	2d00      	cmp	r5, #0
 80030b6:	da03      	bge.n	80030c0 <_printf_i+0xd0>
 80030b8:	232d      	movs	r3, #45	@ 0x2d
 80030ba:	426d      	negs	r5, r5
 80030bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80030c0:	230a      	movs	r3, #10
 80030c2:	4858      	ldr	r0, [pc, #352]	@ (8003224 <_printf_i+0x234>)
 80030c4:	e011      	b.n	80030ea <_printf_i+0xfa>
 80030c6:	6821      	ldr	r1, [r4, #0]
 80030c8:	6833      	ldr	r3, [r6, #0]
 80030ca:	0608      	lsls	r0, r1, #24
 80030cc:	f853 5b04 	ldr.w	r5, [r3], #4
 80030d0:	d402      	bmi.n	80030d8 <_printf_i+0xe8>
 80030d2:	0649      	lsls	r1, r1, #25
 80030d4:	bf48      	it	mi
 80030d6:	b2ad      	uxthmi	r5, r5
 80030d8:	2f6f      	cmp	r7, #111	@ 0x6f
 80030da:	6033      	str	r3, [r6, #0]
 80030dc:	bf14      	ite	ne
 80030de:	230a      	movne	r3, #10
 80030e0:	2308      	moveq	r3, #8
 80030e2:	4850      	ldr	r0, [pc, #320]	@ (8003224 <_printf_i+0x234>)
 80030e4:	2100      	movs	r1, #0
 80030e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80030ea:	6866      	ldr	r6, [r4, #4]
 80030ec:	2e00      	cmp	r6, #0
 80030ee:	60a6      	str	r6, [r4, #8]
 80030f0:	db05      	blt.n	80030fe <_printf_i+0x10e>
 80030f2:	6821      	ldr	r1, [r4, #0]
 80030f4:	432e      	orrs	r6, r5
 80030f6:	f021 0104 	bic.w	r1, r1, #4
 80030fa:	6021      	str	r1, [r4, #0]
 80030fc:	d04b      	beq.n	8003196 <_printf_i+0x1a6>
 80030fe:	4616      	mov	r6, r2
 8003100:	fbb5 f1f3 	udiv	r1, r5, r3
 8003104:	fb03 5711 	mls	r7, r3, r1, r5
 8003108:	5dc7      	ldrb	r7, [r0, r7]
 800310a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800310e:	462f      	mov	r7, r5
 8003110:	42bb      	cmp	r3, r7
 8003112:	460d      	mov	r5, r1
 8003114:	d9f4      	bls.n	8003100 <_printf_i+0x110>
 8003116:	2b08      	cmp	r3, #8
 8003118:	d10b      	bne.n	8003132 <_printf_i+0x142>
 800311a:	6823      	ldr	r3, [r4, #0]
 800311c:	07df      	lsls	r7, r3, #31
 800311e:	d508      	bpl.n	8003132 <_printf_i+0x142>
 8003120:	6923      	ldr	r3, [r4, #16]
 8003122:	6861      	ldr	r1, [r4, #4]
 8003124:	4299      	cmp	r1, r3
 8003126:	bfde      	ittt	le
 8003128:	2330      	movle	r3, #48	@ 0x30
 800312a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800312e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003132:	1b92      	subs	r2, r2, r6
 8003134:	6122      	str	r2, [r4, #16]
 8003136:	464b      	mov	r3, r9
 8003138:	4621      	mov	r1, r4
 800313a:	4640      	mov	r0, r8
 800313c:	f8cd a000 	str.w	sl, [sp]
 8003140:	aa03      	add	r2, sp, #12
 8003142:	f7ff fee3 	bl	8002f0c <_printf_common>
 8003146:	3001      	adds	r0, #1
 8003148:	d14a      	bne.n	80031e0 <_printf_i+0x1f0>
 800314a:	f04f 30ff 	mov.w	r0, #4294967295
 800314e:	b004      	add	sp, #16
 8003150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003154:	6823      	ldr	r3, [r4, #0]
 8003156:	f043 0320 	orr.w	r3, r3, #32
 800315a:	6023      	str	r3, [r4, #0]
 800315c:	2778      	movs	r7, #120	@ 0x78
 800315e:	4832      	ldr	r0, [pc, #200]	@ (8003228 <_printf_i+0x238>)
 8003160:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003164:	6823      	ldr	r3, [r4, #0]
 8003166:	6831      	ldr	r1, [r6, #0]
 8003168:	061f      	lsls	r7, r3, #24
 800316a:	f851 5b04 	ldr.w	r5, [r1], #4
 800316e:	d402      	bmi.n	8003176 <_printf_i+0x186>
 8003170:	065f      	lsls	r7, r3, #25
 8003172:	bf48      	it	mi
 8003174:	b2ad      	uxthmi	r5, r5
 8003176:	6031      	str	r1, [r6, #0]
 8003178:	07d9      	lsls	r1, r3, #31
 800317a:	bf44      	itt	mi
 800317c:	f043 0320 	orrmi.w	r3, r3, #32
 8003180:	6023      	strmi	r3, [r4, #0]
 8003182:	b11d      	cbz	r5, 800318c <_printf_i+0x19c>
 8003184:	2310      	movs	r3, #16
 8003186:	e7ad      	b.n	80030e4 <_printf_i+0xf4>
 8003188:	4826      	ldr	r0, [pc, #152]	@ (8003224 <_printf_i+0x234>)
 800318a:	e7e9      	b.n	8003160 <_printf_i+0x170>
 800318c:	6823      	ldr	r3, [r4, #0]
 800318e:	f023 0320 	bic.w	r3, r3, #32
 8003192:	6023      	str	r3, [r4, #0]
 8003194:	e7f6      	b.n	8003184 <_printf_i+0x194>
 8003196:	4616      	mov	r6, r2
 8003198:	e7bd      	b.n	8003116 <_printf_i+0x126>
 800319a:	6833      	ldr	r3, [r6, #0]
 800319c:	6825      	ldr	r5, [r4, #0]
 800319e:	1d18      	adds	r0, r3, #4
 80031a0:	6961      	ldr	r1, [r4, #20]
 80031a2:	6030      	str	r0, [r6, #0]
 80031a4:	062e      	lsls	r6, r5, #24
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	d501      	bpl.n	80031ae <_printf_i+0x1be>
 80031aa:	6019      	str	r1, [r3, #0]
 80031ac:	e002      	b.n	80031b4 <_printf_i+0x1c4>
 80031ae:	0668      	lsls	r0, r5, #25
 80031b0:	d5fb      	bpl.n	80031aa <_printf_i+0x1ba>
 80031b2:	8019      	strh	r1, [r3, #0]
 80031b4:	2300      	movs	r3, #0
 80031b6:	4616      	mov	r6, r2
 80031b8:	6123      	str	r3, [r4, #16]
 80031ba:	e7bc      	b.n	8003136 <_printf_i+0x146>
 80031bc:	6833      	ldr	r3, [r6, #0]
 80031be:	2100      	movs	r1, #0
 80031c0:	1d1a      	adds	r2, r3, #4
 80031c2:	6032      	str	r2, [r6, #0]
 80031c4:	681e      	ldr	r6, [r3, #0]
 80031c6:	6862      	ldr	r2, [r4, #4]
 80031c8:	4630      	mov	r0, r6
 80031ca:	f000 f859 	bl	8003280 <memchr>
 80031ce:	b108      	cbz	r0, 80031d4 <_printf_i+0x1e4>
 80031d0:	1b80      	subs	r0, r0, r6
 80031d2:	6060      	str	r0, [r4, #4]
 80031d4:	6863      	ldr	r3, [r4, #4]
 80031d6:	6123      	str	r3, [r4, #16]
 80031d8:	2300      	movs	r3, #0
 80031da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80031de:	e7aa      	b.n	8003136 <_printf_i+0x146>
 80031e0:	4632      	mov	r2, r6
 80031e2:	4649      	mov	r1, r9
 80031e4:	4640      	mov	r0, r8
 80031e6:	6923      	ldr	r3, [r4, #16]
 80031e8:	47d0      	blx	sl
 80031ea:	3001      	adds	r0, #1
 80031ec:	d0ad      	beq.n	800314a <_printf_i+0x15a>
 80031ee:	6823      	ldr	r3, [r4, #0]
 80031f0:	079b      	lsls	r3, r3, #30
 80031f2:	d413      	bmi.n	800321c <_printf_i+0x22c>
 80031f4:	68e0      	ldr	r0, [r4, #12]
 80031f6:	9b03      	ldr	r3, [sp, #12]
 80031f8:	4298      	cmp	r0, r3
 80031fa:	bfb8      	it	lt
 80031fc:	4618      	movlt	r0, r3
 80031fe:	e7a6      	b.n	800314e <_printf_i+0x15e>
 8003200:	2301      	movs	r3, #1
 8003202:	4632      	mov	r2, r6
 8003204:	4649      	mov	r1, r9
 8003206:	4640      	mov	r0, r8
 8003208:	47d0      	blx	sl
 800320a:	3001      	adds	r0, #1
 800320c:	d09d      	beq.n	800314a <_printf_i+0x15a>
 800320e:	3501      	adds	r5, #1
 8003210:	68e3      	ldr	r3, [r4, #12]
 8003212:	9903      	ldr	r1, [sp, #12]
 8003214:	1a5b      	subs	r3, r3, r1
 8003216:	42ab      	cmp	r3, r5
 8003218:	dcf2      	bgt.n	8003200 <_printf_i+0x210>
 800321a:	e7eb      	b.n	80031f4 <_printf_i+0x204>
 800321c:	2500      	movs	r5, #0
 800321e:	f104 0619 	add.w	r6, r4, #25
 8003222:	e7f5      	b.n	8003210 <_printf_i+0x220>
 8003224:	080033b7 	.word	0x080033b7
 8003228:	080033c8 	.word	0x080033c8

0800322c <memmove>:
 800322c:	4288      	cmp	r0, r1
 800322e:	b510      	push	{r4, lr}
 8003230:	eb01 0402 	add.w	r4, r1, r2
 8003234:	d902      	bls.n	800323c <memmove+0x10>
 8003236:	4284      	cmp	r4, r0
 8003238:	4623      	mov	r3, r4
 800323a:	d807      	bhi.n	800324c <memmove+0x20>
 800323c:	1e43      	subs	r3, r0, #1
 800323e:	42a1      	cmp	r1, r4
 8003240:	d008      	beq.n	8003254 <memmove+0x28>
 8003242:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003246:	f803 2f01 	strb.w	r2, [r3, #1]!
 800324a:	e7f8      	b.n	800323e <memmove+0x12>
 800324c:	4601      	mov	r1, r0
 800324e:	4402      	add	r2, r0
 8003250:	428a      	cmp	r2, r1
 8003252:	d100      	bne.n	8003256 <memmove+0x2a>
 8003254:	bd10      	pop	{r4, pc}
 8003256:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800325a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800325e:	e7f7      	b.n	8003250 <memmove+0x24>

08003260 <_sbrk_r>:
 8003260:	b538      	push	{r3, r4, r5, lr}
 8003262:	2300      	movs	r3, #0
 8003264:	4d05      	ldr	r5, [pc, #20]	@ (800327c <_sbrk_r+0x1c>)
 8003266:	4604      	mov	r4, r0
 8003268:	4608      	mov	r0, r1
 800326a:	602b      	str	r3, [r5, #0]
 800326c:	f7fd fbfe 	bl	8000a6c <_sbrk>
 8003270:	1c43      	adds	r3, r0, #1
 8003272:	d102      	bne.n	800327a <_sbrk_r+0x1a>
 8003274:	682b      	ldr	r3, [r5, #0]
 8003276:	b103      	cbz	r3, 800327a <_sbrk_r+0x1a>
 8003278:	6023      	str	r3, [r4, #0]
 800327a:	bd38      	pop	{r3, r4, r5, pc}
 800327c:	200011a8 	.word	0x200011a8

08003280 <memchr>:
 8003280:	4603      	mov	r3, r0
 8003282:	b510      	push	{r4, lr}
 8003284:	b2c9      	uxtb	r1, r1
 8003286:	4402      	add	r2, r0
 8003288:	4293      	cmp	r3, r2
 800328a:	4618      	mov	r0, r3
 800328c:	d101      	bne.n	8003292 <memchr+0x12>
 800328e:	2000      	movs	r0, #0
 8003290:	e003      	b.n	800329a <memchr+0x1a>
 8003292:	7804      	ldrb	r4, [r0, #0]
 8003294:	3301      	adds	r3, #1
 8003296:	428c      	cmp	r4, r1
 8003298:	d1f6      	bne.n	8003288 <memchr+0x8>
 800329a:	bd10      	pop	{r4, pc}

0800329c <_realloc_r>:
 800329c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032a0:	4607      	mov	r7, r0
 80032a2:	4614      	mov	r4, r2
 80032a4:	460d      	mov	r5, r1
 80032a6:	b921      	cbnz	r1, 80032b2 <_realloc_r+0x16>
 80032a8:	4611      	mov	r1, r2
 80032aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80032ae:	f7ff bc49 	b.w	8002b44 <_malloc_r>
 80032b2:	b92a      	cbnz	r2, 80032c0 <_realloc_r+0x24>
 80032b4:	f7ff fbdc 	bl	8002a70 <_free_r>
 80032b8:	4625      	mov	r5, r4
 80032ba:	4628      	mov	r0, r5
 80032bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80032c0:	f000 f81a 	bl	80032f8 <_malloc_usable_size_r>
 80032c4:	4284      	cmp	r4, r0
 80032c6:	4606      	mov	r6, r0
 80032c8:	d802      	bhi.n	80032d0 <_realloc_r+0x34>
 80032ca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80032ce:	d8f4      	bhi.n	80032ba <_realloc_r+0x1e>
 80032d0:	4621      	mov	r1, r4
 80032d2:	4638      	mov	r0, r7
 80032d4:	f7ff fc36 	bl	8002b44 <_malloc_r>
 80032d8:	4680      	mov	r8, r0
 80032da:	b908      	cbnz	r0, 80032e0 <_realloc_r+0x44>
 80032dc:	4645      	mov	r5, r8
 80032de:	e7ec      	b.n	80032ba <_realloc_r+0x1e>
 80032e0:	42b4      	cmp	r4, r6
 80032e2:	4622      	mov	r2, r4
 80032e4:	4629      	mov	r1, r5
 80032e6:	bf28      	it	cs
 80032e8:	4632      	movcs	r2, r6
 80032ea:	f7ff fbb3 	bl	8002a54 <memcpy>
 80032ee:	4629      	mov	r1, r5
 80032f0:	4638      	mov	r0, r7
 80032f2:	f7ff fbbd 	bl	8002a70 <_free_r>
 80032f6:	e7f1      	b.n	80032dc <_realloc_r+0x40>

080032f8 <_malloc_usable_size_r>:
 80032f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80032fc:	1f18      	subs	r0, r3, #4
 80032fe:	2b00      	cmp	r3, #0
 8003300:	bfbc      	itt	lt
 8003302:	580b      	ldrlt	r3, [r1, r0]
 8003304:	18c0      	addlt	r0, r0, r3
 8003306:	4770      	bx	lr

08003308 <_init>:
 8003308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800330a:	bf00      	nop
 800330c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800330e:	bc08      	pop	{r3}
 8003310:	469e      	mov	lr, r3
 8003312:	4770      	bx	lr

08003314 <_fini>:
 8003314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003316:	bf00      	nop
 8003318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800331a:	bc08      	pop	{r3}
 800331c:	469e      	mov	lr, r3
 800331e:	4770      	bx	lr
