
bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000880  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080009b0  080009b0  00002008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080009b0  080009b0  00002008  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080009b0  080009b0  00002008  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080009b0  080009b0  00002008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080009b0  080009b0  000019b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080009b4  080009b4  000019b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000008  20000000  080009b8  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000420  20000008  080009c0  00002008  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000428  080009c0  00002428  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00002008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000ff9  00000000  00000000  00002031  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000007ba  00000000  00000000  0000302a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001d8  00000000  00000000  000037e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000143  00000000  00000000  000039c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001503  00000000  00000000  00003b03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002bc2  00000000  00000000  00005006  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00004622  00000000  00000000  00007bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0000c1ea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000530  00000000  00000000  0000c230  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  0000c760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000008 	.word	0x20000008
 800014c:	00000000 	.word	0x00000000
 8000150:	08000998 	.word	0x08000998

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000000c 	.word	0x2000000c
 800016c:	08000998 	.word	0x08000998

08000170 <Flash_WriteHalfWord>:
 */

#include "Flash.h"

void Flash_WriteHalfWord(uint32_t address, uint16_t data)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
 8000178:	460b      	mov	r3, r1
 800017a:	807b      	strh	r3, [r7, #2]
	// Chờ hết busy
	while(FLASH->SR & SR_BSY);
 800017c:	bf00      	nop
 800017e:	4b19      	ldr	r3, [pc, #100]	@ (80001e4 <Flash_WriteHalfWord+0x74>)
 8000180:	68db      	ldr	r3, [r3, #12]
 8000182:	f003 0301 	and.w	r3, r3, #1
 8000186:	2b00      	cmp	r3, #0
 8000188:	d1f9      	bne.n	800017e <Flash_WriteHalfWord+0xe>

	// Check xem mở khóa chưa
	// key ở manual
	if(FLASH->CR & CR_LOCK)
 800018a:	4b16      	ldr	r3, [pc, #88]	@ (80001e4 <Flash_WriteHalfWord+0x74>)
 800018c:	691b      	ldr	r3, [r3, #16]
 800018e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000192:	2b00      	cmp	r3, #0
 8000194:	d005      	beq.n	80001a2 <Flash_WriteHalfWord+0x32>
	{
		FLASH->KEYR = 0x45670123;	// key1
 8000196:	4b13      	ldr	r3, [pc, #76]	@ (80001e4 <Flash_WriteHalfWord+0x74>)
 8000198:	4a13      	ldr	r2, [pc, #76]	@ (80001e8 <Flash_WriteHalfWord+0x78>)
 800019a:	605a      	str	r2, [r3, #4]
		FLASH->KEYR = 0xCDEF89AB;	// key2
 800019c:	4b11      	ldr	r3, [pc, #68]	@ (80001e4 <Flash_WriteHalfWord+0x74>)
 800019e:	4a13      	ldr	r2, [pc, #76]	@ (80001ec <Flash_WriteHalfWord+0x7c>)
 80001a0:	605a      	str	r2, [r3, #4]
	}

	FLASH->CR |= CR_PG;
 80001a2:	4b10      	ldr	r3, [pc, #64]	@ (80001e4 <Flash_WriteHalfWord+0x74>)
 80001a4:	691b      	ldr	r3, [r3, #16]
 80001a6:	4a0f      	ldr	r2, [pc, #60]	@ (80001e4 <Flash_WriteHalfWord+0x74>)
 80001a8:	f043 0301 	orr.w	r3, r3, #1
 80001ac:	6113      	str	r3, [r2, #16]

	*(volatile uint16_t*)address = data;
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	887a      	ldrh	r2, [r7, #2]
 80001b2:	801a      	strh	r2, [r3, #0]

	// Chờ hết busy
	while(FLASH->SR & SR_BSY);
 80001b4:	bf00      	nop
 80001b6:	4b0b      	ldr	r3, [pc, #44]	@ (80001e4 <Flash_WriteHalfWord+0x74>)
 80001b8:	68db      	ldr	r3, [r3, #12]
 80001ba:	f003 0301 	and.w	r3, r3, #1
 80001be:	2b00      	cmp	r3, #0
 80001c0:	d1f9      	bne.n	80001b6 <Flash_WriteHalfWord+0x46>

	// Unable write
	FLASH->CR &= ~CR_PG;
 80001c2:	4b08      	ldr	r3, [pc, #32]	@ (80001e4 <Flash_WriteHalfWord+0x74>)
 80001c4:	691b      	ldr	r3, [r3, #16]
 80001c6:	4a07      	ldr	r2, [pc, #28]	@ (80001e4 <Flash_WriteHalfWord+0x74>)
 80001c8:	f023 0301 	bic.w	r3, r3, #1
 80001cc:	6113      	str	r3, [r2, #16]

	// LOCK
	FLASH->CR |= CR_LOCK;
 80001ce:	4b05      	ldr	r3, [pc, #20]	@ (80001e4 <Flash_WriteHalfWord+0x74>)
 80001d0:	691b      	ldr	r3, [r3, #16]
 80001d2:	4a04      	ldr	r2, [pc, #16]	@ (80001e4 <Flash_WriteHalfWord+0x74>)
 80001d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80001d8:	6113      	str	r3, [r2, #16]
}
 80001da:	bf00      	nop
 80001dc:	370c      	adds	r7, #12
 80001de:	46bd      	mov	sp, r7
 80001e0:	bc80      	pop	{r7}
 80001e2:	4770      	bx	lr
 80001e4:	40022000 	.word	0x40022000
 80001e8:	45670123 	.word	0x45670123
 80001ec:	cdef89ab 	.word	0xcdef89ab

080001f0 <Flash_EraseOnePage>:

void Flash_EraseOnePage(uint32_t address)
{
 80001f0:	b480      	push	{r7}
 80001f2:	b083      	sub	sp, #12
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	6078      	str	r0, [r7, #4]
	// Chờ hết busy
	while(FLASH->SR & SR_BSY);
 80001f8:	bf00      	nop
 80001fa:	4b1c      	ldr	r3, [pc, #112]	@ (800026c <Flash_EraseOnePage+0x7c>)
 80001fc:	68db      	ldr	r3, [r3, #12]
 80001fe:	f003 0301 	and.w	r3, r3, #1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d1f9      	bne.n	80001fa <Flash_EraseOnePage+0xa>

	// Check xem mở khóa chưa
	// key ở manual
	if(FLASH->CR & CR_LOCK)
 8000206:	4b19      	ldr	r3, [pc, #100]	@ (800026c <Flash_EraseOnePage+0x7c>)
 8000208:	691b      	ldr	r3, [r3, #16]
 800020a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800020e:	2b00      	cmp	r3, #0
 8000210:	d005      	beq.n	800021e <Flash_EraseOnePage+0x2e>
	{
		FLASH->KEYR = 0x45670123;	// key1
 8000212:	4b16      	ldr	r3, [pc, #88]	@ (800026c <Flash_EraseOnePage+0x7c>)
 8000214:	4a16      	ldr	r2, [pc, #88]	@ (8000270 <Flash_EraseOnePage+0x80>)
 8000216:	605a      	str	r2, [r3, #4]
		FLASH->KEYR = 0xCDEF89AB;	// key2
 8000218:	4b14      	ldr	r3, [pc, #80]	@ (800026c <Flash_EraseOnePage+0x7c>)
 800021a:	4a16      	ldr	r2, [pc, #88]	@ (8000274 <Flash_EraseOnePage+0x84>)
 800021c:	605a      	str	r2, [r3, #4]
	}

	// Xóa 1 page
	FLASH->CR |= CR_PER;
 800021e:	4b13      	ldr	r3, [pc, #76]	@ (800026c <Flash_EraseOnePage+0x7c>)
 8000220:	691b      	ldr	r3, [r3, #16]
 8000222:	4a12      	ldr	r2, [pc, #72]	@ (800026c <Flash_EraseOnePage+0x7c>)
 8000224:	f043 0302 	orr.w	r3, r3, #2
 8000228:	6113      	str	r3, [r2, #16]

	// Page Address
	FLASH->AR = address;
 800022a:	4a10      	ldr	r2, [pc, #64]	@ (800026c <Flash_EraseOnePage+0x7c>)
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	6153      	str	r3, [r2, #20]

	// Start erase
	FLASH->CR |= CR_STRT;
 8000230:	4b0e      	ldr	r3, [pc, #56]	@ (800026c <Flash_EraseOnePage+0x7c>)
 8000232:	691b      	ldr	r3, [r3, #16]
 8000234:	4a0d      	ldr	r2, [pc, #52]	@ (800026c <Flash_EraseOnePage+0x7c>)
 8000236:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800023a:	6113      	str	r3, [r2, #16]

	// Chờ hết busy
	while(FLASH->SR & SR_BSY);
 800023c:	bf00      	nop
 800023e:	4b0b      	ldr	r3, [pc, #44]	@ (800026c <Flash_EraseOnePage+0x7c>)
 8000240:	68db      	ldr	r3, [r3, #12]
 8000242:	f003 0301 	and.w	r3, r3, #1
 8000246:	2b00      	cmp	r3, #0
 8000248:	d1f9      	bne.n	800023e <Flash_EraseOnePage+0x4e>

	// Disable Xóa 1 page
	FLASH->CR &= ~CR_PER;
 800024a:	4b08      	ldr	r3, [pc, #32]	@ (800026c <Flash_EraseOnePage+0x7c>)
 800024c:	691b      	ldr	r3, [r3, #16]
 800024e:	4a07      	ldr	r2, [pc, #28]	@ (800026c <Flash_EraseOnePage+0x7c>)
 8000250:	f023 0302 	bic.w	r3, r3, #2
 8000254:	6113      	str	r3, [r2, #16]

	// LOCK
	FLASH->CR |= CR_LOCK;
 8000256:	4b05      	ldr	r3, [pc, #20]	@ (800026c <Flash_EraseOnePage+0x7c>)
 8000258:	691b      	ldr	r3, [r3, #16]
 800025a:	4a04      	ldr	r2, [pc, #16]	@ (800026c <Flash_EraseOnePage+0x7c>)
 800025c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000260:	6113      	str	r3, [r2, #16]
}
 8000262:	bf00      	nop
 8000264:	370c      	adds	r7, #12
 8000266:	46bd      	mov	sp, r7
 8000268:	bc80      	pop	{r7}
 800026a:	4770      	bx	lr
 800026c:	40022000 	.word	0x40022000
 8000270:	45670123 	.word	0x45670123
 8000274:	cdef89ab 	.word	0xcdef89ab

08000278 <NVIC_Enable_IRQ>:
// Biến toàn cục để theo dõi địa chỉ Flash hiện tại

RingBuffer_Typedef ringbuffer;

void NVIC_Enable_IRQ(uint8_t EXTI_IRQ_NUM)
{
 8000278:	b480      	push	{r7}
 800027a:	b083      	sub	sp, #12
 800027c:	af00      	add	r7, sp, #0
 800027e:	4603      	mov	r3, r0
 8000280:	71fb      	strb	r3, [r7, #7]
	if(EXTI_IRQ_NUM < 32)
 8000282:	79fb      	ldrb	r3, [r7, #7]
 8000284:	2b1f      	cmp	r3, #31
 8000286:	d80a      	bhi.n	800029e <NVIC_Enable_IRQ+0x26>
	{
		NVIC_ISER0 |= (1 << EXTI_IRQ_NUM);
 8000288:	4b0e      	ldr	r3, [pc, #56]	@ (80002c4 <NVIC_Enable_IRQ+0x4c>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	79fa      	ldrb	r2, [r7, #7]
 800028e:	2101      	movs	r1, #1
 8000290:	fa01 f202 	lsl.w	r2, r1, r2
 8000294:	4611      	mov	r1, r2
 8000296:	4a0b      	ldr	r2, [pc, #44]	@ (80002c4 <NVIC_Enable_IRQ+0x4c>)
 8000298:	430b      	orrs	r3, r1
 800029a:	6013      	str	r3, [r2, #0]
	}
	else if(EXTI_IRQ_NUM < 64)
	{
		NVIC_ISER1 |= (1 << (EXTI_IRQ_NUM - 32));
	}
}
 800029c:	e00d      	b.n	80002ba <NVIC_Enable_IRQ+0x42>
	else if(EXTI_IRQ_NUM < 64)
 800029e:	79fb      	ldrb	r3, [r7, #7]
 80002a0:	2b3f      	cmp	r3, #63	@ 0x3f
 80002a2:	d80a      	bhi.n	80002ba <NVIC_Enable_IRQ+0x42>
		NVIC_ISER1 |= (1 << (EXTI_IRQ_NUM - 32));
 80002a4:	4b08      	ldr	r3, [pc, #32]	@ (80002c8 <NVIC_Enable_IRQ+0x50>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	79fa      	ldrb	r2, [r7, #7]
 80002aa:	3a20      	subs	r2, #32
 80002ac:	2101      	movs	r1, #1
 80002ae:	fa01 f202 	lsl.w	r2, r1, r2
 80002b2:	4611      	mov	r1, r2
 80002b4:	4a04      	ldr	r2, [pc, #16]	@ (80002c8 <NVIC_Enable_IRQ+0x50>)
 80002b6:	430b      	orrs	r3, r1
 80002b8:	6013      	str	r3, [r2, #0]
}
 80002ba:	bf00      	nop
 80002bc:	370c      	adds	r7, #12
 80002be:	46bd      	mov	sp, r7
 80002c0:	bc80      	pop	{r7}
 80002c2:	4770      	bx	lr
 80002c4:	e000e100 	.word	0xe000e100
 80002c8:	e000e104 	.word	0xe000e104

080002cc <USART1_RX_Int_init>:
		EXTI->RTSR |= (1 << pin);
	}
}

void USART1_RX_Int_init(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	UART1_RX_Int_setup();
 80002d0:	f000 f9c0 	bl	8000654 <UART1_RX_Int_setup>
	NVIC_Enable_IRQ(USART1);
 80002d4:	2025      	movs	r0, #37	@ 0x25
 80002d6:	f7ff ffcf 	bl	8000278 <NVIC_Enable_IRQ>
}
 80002da:	bf00      	nop
 80002dc:	bd80      	pop	{r7, pc}
	...

080002e0 <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b082      	sub	sp, #8
 80002e4:	af00      	add	r7, sp, #0
	if(UART1->SR & RXNE)
 80002e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000318 <USART1_IRQHandler+0x38>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	f003 0320 	and.w	r3, r3, #32
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d00d      	beq.n	800030e <USART1_IRQHandler+0x2e>
	{
		if((UART1->SR & (UART_ORE | UART_PE | UART_FE)) == 0)
 80002f2:	4b09      	ldr	r3, [pc, #36]	@ (8000318 <USART1_IRQHandler+0x38>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	f003 030b 	and.w	r3, r3, #11
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d107      	bne.n	800030e <USART1_IRQHandler+0x2e>
		{
			char data = (char)(UART1->DR);
 80002fe:	4b06      	ldr	r3, [pc, #24]	@ (8000318 <USART1_IRQHandler+0x38>)
 8000300:	685b      	ldr	r3, [r3, #4]
 8000302:	71fb      	strb	r3, [r7, #7]
			Ringbuffer_put(&ringbuffer, (uint8_t)data);
 8000304:	79fb      	ldrb	r3, [r7, #7]
 8000306:	4619      	mov	r1, r3
 8000308:	4804      	ldr	r0, [pc, #16]	@ (800031c <USART1_IRQHandler+0x3c>)
 800030a:	f000 f901 	bl	8000510 <Ringbuffer_put>
		}
	}
}
 800030e:	bf00      	nop
 8000310:	3708      	adds	r7, #8
 8000312:	46bd      	mov	sp, r7
 8000314:	bd80      	pop	{r7, pc}
 8000316:	bf00      	nop
 8000318:	40013800 	.word	0x40013800
 800031c:	20000024 	.word	0x20000024

08000320 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 8000320:	b480      	push	{r7}
 8000322:	af00      	add	r7, sp, #0
	if(EXTI->PR & (1 << 0))
 8000324:	4b07      	ldr	r3, [pc, #28]	@ (8000344 <EXTI0_IRQHandler+0x24>)
 8000326:	695b      	ldr	r3, [r3, #20]
 8000328:	f003 0301 	and.w	r3, r3, #1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d005      	beq.n	800033c <EXTI0_IRQHandler+0x1c>
	{
		// Clear interrupt flag
		EXTI->PR |= (1 << 0);
 8000330:	4b04      	ldr	r3, [pc, #16]	@ (8000344 <EXTI0_IRQHandler+0x24>)
 8000332:	695b      	ldr	r3, [r3, #20]
 8000334:	4a03      	ldr	r2, [pc, #12]	@ (8000344 <EXTI0_IRQHandler+0x24>)
 8000336:	f043 0301 	orr.w	r3, r3, #1
 800033a:	6153      	str	r3, [r2, #20]
		// Do something
		//GPIO_toggle_pin(GPIOC, 13);

	}
}
 800033c:	bf00      	nop
 800033e:	46bd      	mov	sp, r7
 8000340:	bc80      	pop	{r7}
 8000342:	4770      	bx	lr
 8000344:	40010400 	.word	0x40010400

08000348 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000348:	b480      	push	{r7}
 800034a:	af00      	add	r7, sp, #0
	if(EXTI->PR & (1 << 1))
 800034c:	4b07      	ldr	r3, [pc, #28]	@ (800036c <EXTI1_IRQHandler+0x24>)
 800034e:	695b      	ldr	r3, [r3, #20]
 8000350:	f003 0302 	and.w	r3, r3, #2
 8000354:	2b00      	cmp	r3, #0
 8000356:	d005      	beq.n	8000364 <EXTI1_IRQHandler+0x1c>
	{
		// Clear interrupt flag
		EXTI->PR |= (1 << 1);
 8000358:	4b04      	ldr	r3, [pc, #16]	@ (800036c <EXTI1_IRQHandler+0x24>)
 800035a:	695b      	ldr	r3, [r3, #20]
 800035c:	4a03      	ldr	r2, [pc, #12]	@ (800036c <EXTI1_IRQHandler+0x24>)
 800035e:	f043 0302 	orr.w	r3, r3, #2
 8000362:	6153      	str	r3, [r2, #20]
		// Do something
		//GPIO_toggle_pin(GPIOC, 13);

	}
}
 8000364:	bf00      	nop
 8000366:	46bd      	mov	sp, r7
 8000368:	bc80      	pop	{r7}
 800036a:	4770      	bx	lr
 800036c:	40010400 	.word	0x40010400

08000370 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0
	if(EXTI->PR & (1 << 2))
 8000374:	4b07      	ldr	r3, [pc, #28]	@ (8000394 <EXTI2_IRQHandler+0x24>)
 8000376:	695b      	ldr	r3, [r3, #20]
 8000378:	f003 0304 	and.w	r3, r3, #4
 800037c:	2b00      	cmp	r3, #0
 800037e:	d005      	beq.n	800038c <EXTI2_IRQHandler+0x1c>
	{
		// Clear interrupt flag
		EXTI->PR |= (1 << 2);
 8000380:	4b04      	ldr	r3, [pc, #16]	@ (8000394 <EXTI2_IRQHandler+0x24>)
 8000382:	695b      	ldr	r3, [r3, #20]
 8000384:	4a03      	ldr	r2, [pc, #12]	@ (8000394 <EXTI2_IRQHandler+0x24>)
 8000386:	f043 0304 	orr.w	r3, r3, #4
 800038a:	6153      	str	r3, [r2, #20]

		// Do something
		//GPIO_toggle_pin(GPIOC, 13);

	}
}
 800038c:	bf00      	nop
 800038e:	46bd      	mov	sp, r7
 8000390:	bc80      	pop	{r7}
 8000392:	4770      	bx	lr
 8000394:	40010400 	.word	0x40010400

08000398 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8000398:	b480      	push	{r7}
 800039a:	af00      	add	r7, sp, #0
	if(EXTI->PR & (1 << 3))
 800039c:	4b07      	ldr	r3, [pc, #28]	@ (80003bc <EXTI3_IRQHandler+0x24>)
 800039e:	695b      	ldr	r3, [r3, #20]
 80003a0:	f003 0308 	and.w	r3, r3, #8
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d005      	beq.n	80003b4 <EXTI3_IRQHandler+0x1c>
	{
		// Clear interrupt flag
		EXTI->PR |= (1 << 3);
 80003a8:	4b04      	ldr	r3, [pc, #16]	@ (80003bc <EXTI3_IRQHandler+0x24>)
 80003aa:	695b      	ldr	r3, [r3, #20]
 80003ac:	4a03      	ldr	r2, [pc, #12]	@ (80003bc <EXTI3_IRQHandler+0x24>)
 80003ae:	f043 0308 	orr.w	r3, r3, #8
 80003b2:	6153      	str	r3, [r2, #20]
		// Do something
		//GPIO_toggle_pin(GPIOC, 13);

	}
}
 80003b4:	bf00      	nop
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bc80      	pop	{r7}
 80003ba:	4770      	bx	lr
 80003bc:	40010400 	.word	0x40010400

080003c0 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 80003c0:	b480      	push	{r7}
 80003c2:	af00      	add	r7, sp, #0
	if(EXTI->PR & (1 << 4))
 80003c4:	4b07      	ldr	r3, [pc, #28]	@ (80003e4 <EXTI4_IRQHandler+0x24>)
 80003c6:	695b      	ldr	r3, [r3, #20]
 80003c8:	f003 0310 	and.w	r3, r3, #16
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d005      	beq.n	80003dc <EXTI4_IRQHandler+0x1c>
	{
		// Clear interrupt flag
		EXTI->PR |= (1 << 4);
 80003d0:	4b04      	ldr	r3, [pc, #16]	@ (80003e4 <EXTI4_IRQHandler+0x24>)
 80003d2:	695b      	ldr	r3, [r3, #20]
 80003d4:	4a03      	ldr	r2, [pc, #12]	@ (80003e4 <EXTI4_IRQHandler+0x24>)
 80003d6:	f043 0310 	orr.w	r3, r3, #16
 80003da:	6153      	str	r3, [r2, #20]
		//GPIO_toggle_pin(GPIOC, 13);

	}
}
 80003dc:	bf00      	nop
 80003de:	46bd      	mov	sp, r7
 80003e0:	bc80      	pop	{r7}
 80003e2:	4770      	bx	lr
 80003e4:	40010400 	.word	0x40010400

080003e8 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 80003e8:	b480      	push	{r7}
 80003ea:	b083      	sub	sp, #12
 80003ec:	af00      	add	r7, sp, #0
	for(int i = 5; i < 10; i++)
 80003ee:	2305      	movs	r3, #5
 80003f0:	607b      	str	r3, [r7, #4]
 80003f2:	e015      	b.n	8000420 <EXTI9_5_IRQHandler+0x38>
	{
		if(EXTI->PR & (1 << i))
 80003f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000434 <EXTI9_5_IRQHandler+0x4c>)
 80003f6:	695b      	ldr	r3, [r3, #20]
 80003f8:	2101      	movs	r1, #1
 80003fa:	687a      	ldr	r2, [r7, #4]
 80003fc:	fa01 f202 	lsl.w	r2, r1, r2
 8000400:	4013      	ands	r3, r2
 8000402:	2b00      	cmp	r3, #0
 8000404:	d009      	beq.n	800041a <EXTI9_5_IRQHandler+0x32>
		{
			// CLEAR FLAG
			EXTI->PR |= (1 << i);
 8000406:	4b0b      	ldr	r3, [pc, #44]	@ (8000434 <EXTI9_5_IRQHandler+0x4c>)
 8000408:	695b      	ldr	r3, [r3, #20]
 800040a:	2101      	movs	r1, #1
 800040c:	687a      	ldr	r2, [r7, #4]
 800040e:	fa01 f202 	lsl.w	r2, r1, r2
 8000412:	4611      	mov	r1, r2
 8000414:	4a07      	ldr	r2, [pc, #28]	@ (8000434 <EXTI9_5_IRQHandler+0x4c>)
 8000416:	430b      	orrs	r3, r1
 8000418:	6153      	str	r3, [r2, #20]
	for(int i = 5; i < 10; i++)
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	3301      	adds	r3, #1
 800041e:	607b      	str	r3, [r7, #4]
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	2b09      	cmp	r3, #9
 8000424:	dde6      	ble.n	80003f4 <EXTI9_5_IRQHandler+0xc>
			//GPIO_toggle_pin(GPIOC, 13);
		}
	}
}
 8000426:	bf00      	nop
 8000428:	bf00      	nop
 800042a:	370c      	adds	r7, #12
 800042c:	46bd      	mov	sp, r7
 800042e:	bc80      	pop	{r7}
 8000430:	4770      	bx	lr
 8000432:	bf00      	nop
 8000434:	40010400 	.word	0x40010400

08000438 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8000438:	b480      	push	{r7}
 800043a:	b083      	sub	sp, #12
 800043c:	af00      	add	r7, sp, #0
	for(int i = 10; i < 16; i++)
 800043e:	230a      	movs	r3, #10
 8000440:	607b      	str	r3, [r7, #4]
 8000442:	e015      	b.n	8000470 <EXTI15_10_IRQHandler+0x38>
	{
		if(EXTI->PR & (1 << i))
 8000444:	4b0f      	ldr	r3, [pc, #60]	@ (8000484 <EXTI15_10_IRQHandler+0x4c>)
 8000446:	695b      	ldr	r3, [r3, #20]
 8000448:	2101      	movs	r1, #1
 800044a:	687a      	ldr	r2, [r7, #4]
 800044c:	fa01 f202 	lsl.w	r2, r1, r2
 8000450:	4013      	ands	r3, r2
 8000452:	2b00      	cmp	r3, #0
 8000454:	d009      	beq.n	800046a <EXTI15_10_IRQHandler+0x32>
		{
			// CLEAR FLAG
			EXTI->PR |= (1 << i);
 8000456:	4b0b      	ldr	r3, [pc, #44]	@ (8000484 <EXTI15_10_IRQHandler+0x4c>)
 8000458:	695b      	ldr	r3, [r3, #20]
 800045a:	2101      	movs	r1, #1
 800045c:	687a      	ldr	r2, [r7, #4]
 800045e:	fa01 f202 	lsl.w	r2, r1, r2
 8000462:	4611      	mov	r1, r2
 8000464:	4a07      	ldr	r2, [pc, #28]	@ (8000484 <EXTI15_10_IRQHandler+0x4c>)
 8000466:	430b      	orrs	r3, r1
 8000468:	6153      	str	r3, [r2, #20]
	for(int i = 10; i < 16; i++)
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	3301      	adds	r3, #1
 800046e:	607b      	str	r3, [r7, #4]
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	2b0f      	cmp	r3, #15
 8000474:	dde6      	ble.n	8000444 <EXTI15_10_IRQHandler+0xc>
			//GPIO_toggle_pin(GPIOC, 13);
		}
	}
}
 8000476:	bf00      	nop
 8000478:	bf00      	nop
 800047a:	370c      	adds	r7, #12
 800047c:	46bd      	mov	sp, r7
 800047e:	bc80      	pop	{r7}
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop
 8000484:	40010400 	.word	0x40010400

08000488 <RCC_Config_HSI_8MHz>:
	RCC->CR |= PLLON;
	while(!(RCC->CR & PLLRDY));
}

void RCC_Config_HSI_8MHz(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
	// FLASH CONFIG
	FLASH_ACR |= PRFTBE;
 800048c:	4b1e      	ldr	r3, [pc, #120]	@ (8000508 <RCC_Config_HSI_8MHz+0x80>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4a1d      	ldr	r2, [pc, #116]	@ (8000508 <RCC_Config_HSI_8MHz+0x80>)
 8000492:	f043 0310 	orr.w	r3, r3, #16
 8000496:	6013      	str	r3, [r2, #0]
	FLASH_ACR &= ~(0b111 << 0);
 8000498:	4b1b      	ldr	r3, [pc, #108]	@ (8000508 <RCC_Config_HSI_8MHz+0x80>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	4a1a      	ldr	r2, [pc, #104]	@ (8000508 <RCC_Config_HSI_8MHz+0x80>)
 800049e:	f023 0307 	bic.w	r3, r3, #7
 80004a2:	6013      	str	r3, [r2, #0]
	FLASH_ACR |= LATENCY_ZERO;
 80004a4:	4b18      	ldr	r3, [pc, #96]	@ (8000508 <RCC_Config_HSI_8MHz+0x80>)
 80004a6:	4a18      	ldr	r2, [pc, #96]	@ (8000508 <RCC_Config_HSI_8MHz+0x80>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	6013      	str	r3, [r2, #0]

	// CLOCK CONFIG
	// ENABLE HSI
	RCC->CR |= HSION;
 80004ac:	4b17      	ldr	r3, [pc, #92]	@ (800050c <RCC_Config_HSI_8MHz+0x84>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	4a16      	ldr	r2, [pc, #88]	@ (800050c <RCC_Config_HSI_8MHz+0x84>)
 80004b2:	f043 0301 	orr.w	r3, r3, #1
 80004b6:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & HSIRDY));
 80004b8:	bf00      	nop
 80004ba:	4b14      	ldr	r3, [pc, #80]	@ (800050c <RCC_Config_HSI_8MHz+0x84>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	f003 0302 	and.w	r3, r3, #2
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d0f9      	beq.n	80004ba <RCC_Config_HSI_8MHz+0x32>

	// AHB CLOCK = SYSCLK
	RCC->CFGR &= ~(0xF << 4);
 80004c6:	4b11      	ldr	r3, [pc, #68]	@ (800050c <RCC_Config_HSI_8MHz+0x84>)
 80004c8:	685b      	ldr	r3, [r3, #4]
 80004ca:	4a10      	ldr	r2, [pc, #64]	@ (800050c <RCC_Config_HSI_8MHz+0x84>)
 80004cc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80004d0:	6053      	str	r3, [r2, #4]

	// APB1 = AHB = 8
	RCC->CFGR &= ~(0b111 << 8);
 80004d2:	4b0e      	ldr	r3, [pc, #56]	@ (800050c <RCC_Config_HSI_8MHz+0x84>)
 80004d4:	685b      	ldr	r3, [r3, #4]
 80004d6:	4a0d      	ldr	r2, [pc, #52]	@ (800050c <RCC_Config_HSI_8MHz+0x84>)
 80004d8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80004dc:	6053      	str	r3, [r2, #4]

	// APB2 = AHB = 8
	RCC->CFGR &= ~(0xF << 11);
 80004de:	4b0b      	ldr	r3, [pc, #44]	@ (800050c <RCC_Config_HSI_8MHz+0x84>)
 80004e0:	685b      	ldr	r3, [r3, #4]
 80004e2:	4a0a      	ldr	r2, [pc, #40]	@ (800050c <RCC_Config_HSI_8MHz+0x84>)
 80004e4:	f423 43f0 	bic.w	r3, r3, #30720	@ 0x7800
 80004e8:	6053      	str	r3, [r2, #4]

	// Source clock as HSI
	RCC->CFGR &= ~(0b11 << 0);
 80004ea:	4b08      	ldr	r3, [pc, #32]	@ (800050c <RCC_Config_HSI_8MHz+0x84>)
 80004ec:	685b      	ldr	r3, [r3, #4]
 80004ee:	4a07      	ldr	r2, [pc, #28]	@ (800050c <RCC_Config_HSI_8MHz+0x84>)
 80004f0:	f023 0303 	bic.w	r3, r3, #3
 80004f4:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= SW_HSI;
 80004f6:	4b05      	ldr	r3, [pc, #20]	@ (800050c <RCC_Config_HSI_8MHz+0x84>)
 80004f8:	4a04      	ldr	r2, [pc, #16]	@ (800050c <RCC_Config_HSI_8MHz+0x84>)
 80004fa:	685b      	ldr	r3, [r3, #4]
 80004fc:	6053      	str	r3, [r2, #4]
}
 80004fe:	bf00      	nop
 8000500:	46bd      	mov	sp, r7
 8000502:	bc80      	pop	{r7}
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	40022000 	.word	0x40022000
 800050c:	40021000 	.word	0x40021000

08000510 <Ringbuffer_put>:
 */

#include "Ringbuffer.h"

void Ringbuffer_put(RingBuffer_Typedef* ring, uint8_t data)
{
 8000510:	b480      	push	{r7}
 8000512:	b085      	sub	sp, #20
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
 8000518:	460b      	mov	r3, r1
 800051a:	70fb      	strb	r3, [r7, #3]
	uint16_t next = (ring->head + 1) % RX_BUFFERSIZE;	// nếu đạt max thì reset về 0
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	@ 0x402
 8000522:	b29b      	uxth	r3, r3
 8000524:	3301      	adds	r3, #1
 8000526:	425a      	negs	r2, r3
 8000528:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800052c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8000530:	bf58      	it	pl
 8000532:	4253      	negpl	r3, r2
 8000534:	81fb      	strh	r3, [r7, #14]
	if(next != ring->tail)
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 800053c:	b29b      	uxth	r3, r3
 800053e:	89fa      	ldrh	r2, [r7, #14]
 8000540:	429a      	cmp	r2, r3
 8000542:	d00b      	beq.n	800055c <Ringbuffer_put+0x4c>
	{
		ring->buffer[ring->head] = data;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	@ 0x402
 800054a:	b29b      	uxth	r3, r3
 800054c:	4619      	mov	r1, r3
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	78fa      	ldrb	r2, [r7, #3]
 8000552:	545a      	strb	r2, [r3, r1]
		ring->head = next;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	89fa      	ldrh	r2, [r7, #14]
 8000558:	f8a3 2402 	strh.w	r2, [r3, #1026]	@ 0x402
	}
}
 800055c:	bf00      	nop
 800055e:	3714      	adds	r7, #20
 8000560:	46bd      	mov	sp, r7
 8000562:	bc80      	pop	{r7}
 8000564:	4770      	bx	lr

08000566 <Ringbuffer_get>:

int Ringbuffer_get(RingBuffer_Typedef* ring, uint8_t* data)
{
 8000566:	b480      	push	{r7}
 8000568:	b083      	sub	sp, #12
 800056a:	af00      	add	r7, sp, #0
 800056c:	6078      	str	r0, [r7, #4]
 800056e:	6039      	str	r1, [r7, #0]
	if(ring->head == ring->tail) return 0;	// check buffer có dữ liệu hay không
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	@ 0x402
 8000576:	b29a      	uxth	r2, r3
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 800057e:	b29b      	uxth	r3, r3
 8000580:	429a      	cmp	r2, r3
 8000582:	d101      	bne.n	8000588 <Ringbuffer_get+0x22>
 8000584:	2300      	movs	r3, #0
 8000586:	e01a      	b.n	80005be <Ringbuffer_get+0x58>
	*data = ring->buffer[ring->tail];
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 800058e:	b29b      	uxth	r3, r3
 8000590:	461a      	mov	r2, r3
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	5c9b      	ldrb	r3, [r3, r2]
 8000596:	b2da      	uxtb	r2, r3
 8000598:	683b      	ldr	r3, [r7, #0]
 800059a:	701a      	strb	r2, [r3, #0]
	ring->tail = (ring->tail + 1) % RX_BUFFERSIZE;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 80005a2:	b29b      	uxth	r3, r3
 80005a4:	3301      	adds	r3, #1
 80005a6:	425a      	negs	r2, r3
 80005a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80005ac:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80005b0:	bf58      	it	pl
 80005b2:	4253      	negpl	r3, r2
 80005b4:	b29a      	uxth	r2, r3
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	f8a3 2400 	strh.w	r2, [r3, #1024]	@ 0x400
	return 1;
 80005bc:	2301      	movs	r3, #1
}
 80005be:	4618      	mov	r0, r3
 80005c0:	370c      	adds	r7, #12
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bc80      	pop	{r7}
 80005c6:	4770      	bx	lr

080005c8 <Ringbuffer_init>:

void Ringbuffer_init(RingBuffer_Typedef* ring)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
	ring->head = 0;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	2200      	movs	r2, #0
 80005d4:	f8a3 2402 	strh.w	r2, [r3, #1026]	@ 0x402
	ring->tail = 0;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	2200      	movs	r2, #0
 80005dc:	f8a3 2400 	strh.w	r2, [r3, #1024]	@ 0x400
}
 80005e0:	bf00      	nop
 80005e2:	370c      	adds	r7, #12
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bc80      	pop	{r7}
 80005e8:	4770      	bx	lr
	...

080005ec <UART1_gpio_init>:
#include "UART.h"
#include "RCC.h"
#include "gpio.h"

void UART1_gpio_init(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
	// Clock Init
	RCC->APB2ENR |= (1 << 2);	// GPIOA
 80005f0:	4b16      	ldr	r3, [pc, #88]	@ (800064c <UART1_gpio_init+0x60>)
 80005f2:	699b      	ldr	r3, [r3, #24]
 80005f4:	4a15      	ldr	r2, [pc, #84]	@ (800064c <UART1_gpio_init+0x60>)
 80005f6:	f043 0304 	orr.w	r3, r3, #4
 80005fa:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= (1 << 14);	// USART1
 80005fc:	4b13      	ldr	r3, [pc, #76]	@ (800064c <UART1_gpio_init+0x60>)
 80005fe:	699b      	ldr	r3, [r3, #24]
 8000600:	4a12      	ldr	r2, [pc, #72]	@ (800064c <UART1_gpio_init+0x60>)
 8000602:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000606:	6193      	str	r3, [r2, #24]

	// GPIOA9 - TX - Output max 10mhz, AF push pull
	GPIOA->CRH &= ~(0b1111 << 4);
 8000608:	4b11      	ldr	r3, [pc, #68]	@ (8000650 <UART1_gpio_init+0x64>)
 800060a:	685b      	ldr	r3, [r3, #4]
 800060c:	4a10      	ldr	r2, [pc, #64]	@ (8000650 <UART1_gpio_init+0x64>)
 800060e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000612:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= (0b1001 << 4);
 8000614:	4b0e      	ldr	r3, [pc, #56]	@ (8000650 <UART1_gpio_init+0x64>)
 8000616:	685b      	ldr	r3, [r3, #4]
 8000618:	4a0d      	ldr	r2, [pc, #52]	@ (8000650 <UART1_gpio_init+0x64>)
 800061a:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800061e:	6053      	str	r3, [r2, #4]

	// GPIOA10 - RX - Input, pullup
	GPIOA->CRH &= ~(0b1111 << 8);
 8000620:	4b0b      	ldr	r3, [pc, #44]	@ (8000650 <UART1_gpio_init+0x64>)
 8000622:	685b      	ldr	r3, [r3, #4]
 8000624:	4a0a      	ldr	r2, [pc, #40]	@ (8000650 <UART1_gpio_init+0x64>)
 8000626:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800062a:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= (0b1000 << 8);
 800062c:	4b08      	ldr	r3, [pc, #32]	@ (8000650 <UART1_gpio_init+0x64>)
 800062e:	685b      	ldr	r3, [r3, #4]
 8000630:	4a07      	ldr	r2, [pc, #28]	@ (8000650 <UART1_gpio_init+0x64>)
 8000632:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000636:	6053      	str	r3, [r2, #4]
	GPIOA->ODR |= (1 << 10);
 8000638:	4b05      	ldr	r3, [pc, #20]	@ (8000650 <UART1_gpio_init+0x64>)
 800063a:	68db      	ldr	r3, [r3, #12]
 800063c:	4a04      	ldr	r2, [pc, #16]	@ (8000650 <UART1_gpio_init+0x64>)
 800063e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000642:	60d3      	str	r3, [r2, #12]
}
 8000644:	bf00      	nop
 8000646:	46bd      	mov	sp, r7
 8000648:	bc80      	pop	{r7}
 800064a:	4770      	bx	lr
 800064c:	40021000 	.word	0x40021000
 8000650:	40010800 	.word	0x40010800

08000654 <UART1_RX_Int_setup>:
	// Enable TX RX Uart
	UART1->CR1 |= UE | TE | RE;
}

void UART1_RX_Int_setup(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
	// Baud 9600
	UART1->BRR = (52 << 4) | 1;
 8000658:	4b07      	ldr	r3, [pc, #28]	@ (8000678 <UART1_RX_Int_setup+0x24>)
 800065a:	f240 3241 	movw	r2, #833	@ 0x341
 800065e:	609a      	str	r2, [r3, #8]

	// Enable TX RX Uart
	UART1->CR1 |= UE | RE | RXNEIE;
 8000660:	4b05      	ldr	r3, [pc, #20]	@ (8000678 <UART1_RX_Int_setup+0x24>)
 8000662:	68db      	ldr	r3, [r3, #12]
 8000664:	4a04      	ldr	r2, [pc, #16]	@ (8000678 <UART1_RX_Int_setup+0x24>)
 8000666:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800066a:	f043 0324 	orr.w	r3, r3, #36	@ 0x24
 800066e:	60d3      	str	r3, [r2, #12]
}
 8000670:	bf00      	nop
 8000672:	46bd      	mov	sp, r7
 8000674:	bc80      	pop	{r7}
 8000676:	4770      	bx	lr
 8000678:	40013800 	.word	0x40013800

0800067c <GPIO_init_output>:

#include "gpio.h"
#include "RCC.h"

void GPIO_init_output(GPIO_Typedef* gpio, uint8_t pin)
{
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
 8000684:	460b      	mov	r3, r1
 8000686:	70fb      	strb	r3, [r7, #3]
	// Set clock for GPIO_X
	if(gpio == GPIOA)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	4a31      	ldr	r2, [pc, #196]	@ (8000750 <GPIO_init_output+0xd4>)
 800068c:	4293      	cmp	r3, r2
 800068e:	d106      	bne.n	800069e <GPIO_init_output+0x22>
	{
		(RCC_APB2ENR) |= (1 << 2);
 8000690:	4b30      	ldr	r3, [pc, #192]	@ (8000754 <GPIO_init_output+0xd8>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a2f      	ldr	r2, [pc, #188]	@ (8000754 <GPIO_init_output+0xd8>)
 8000696:	f043 0304 	orr.w	r3, r3, #4
 800069a:	6013      	str	r3, [r2, #0]
 800069c:	e01f      	b.n	80006de <GPIO_init_output+0x62>
	}
	else if(gpio == GPIOB)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	4a2d      	ldr	r2, [pc, #180]	@ (8000758 <GPIO_init_output+0xdc>)
 80006a2:	4293      	cmp	r3, r2
 80006a4:	d106      	bne.n	80006b4 <GPIO_init_output+0x38>
	{
		(RCC_APB2ENR) |= (1 << 3);
 80006a6:	4b2b      	ldr	r3, [pc, #172]	@ (8000754 <GPIO_init_output+0xd8>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	4a2a      	ldr	r2, [pc, #168]	@ (8000754 <GPIO_init_output+0xd8>)
 80006ac:	f043 0308 	orr.w	r3, r3, #8
 80006b0:	6013      	str	r3, [r2, #0]
 80006b2:	e014      	b.n	80006de <GPIO_init_output+0x62>
	}
	else if(gpio == GPIOC)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	4a29      	ldr	r2, [pc, #164]	@ (800075c <GPIO_init_output+0xe0>)
 80006b8:	4293      	cmp	r3, r2
 80006ba:	d106      	bne.n	80006ca <GPIO_init_output+0x4e>
	{
		(RCC_APB2ENR) |= (1 << 4);
 80006bc:	4b25      	ldr	r3, [pc, #148]	@ (8000754 <GPIO_init_output+0xd8>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a24      	ldr	r2, [pc, #144]	@ (8000754 <GPIO_init_output+0xd8>)
 80006c2:	f043 0310 	orr.w	r3, r3, #16
 80006c6:	6013      	str	r3, [r2, #0]
 80006c8:	e009      	b.n	80006de <GPIO_init_output+0x62>
	}
	else if(gpio == GPIOD)
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	4a24      	ldr	r2, [pc, #144]	@ (8000760 <GPIO_init_output+0xe4>)
 80006ce:	4293      	cmp	r3, r2
 80006d0:	d105      	bne.n	80006de <GPIO_init_output+0x62>
	{
		(RCC_APB2ENR) |= (1 << 5);
 80006d2:	4b20      	ldr	r3, [pc, #128]	@ (8000754 <GPIO_init_output+0xd8>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	4a1f      	ldr	r2, [pc, #124]	@ (8000754 <GPIO_init_output+0xd8>)
 80006d8:	f043 0320 	orr.w	r3, r3, #32
 80006dc:	6013      	str	r3, [r2, #0]
	}


	// output max speed 2mHz
	if(pin < 8)
 80006de:	78fb      	ldrb	r3, [r7, #3]
 80006e0:	2b07      	cmp	r3, #7
 80006e2:	d815      	bhi.n	8000710 <GPIO_init_output+0x94>
	{
		gpio->CRL &= ~(0xF << (pin*4));		// Reset MODE and CNF bit to 0
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	78fa      	ldrb	r2, [r7, #3]
 80006ea:	0092      	lsls	r2, r2, #2
 80006ec:	210f      	movs	r1, #15
 80006ee:	fa01 f202 	lsl.w	r2, r1, r2
 80006f2:	43d2      	mvns	r2, r2
 80006f4:	401a      	ands	r2, r3
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	601a      	str	r2, [r3, #0]
		gpio->CRL |= (0x2 << (pin*4));			// Set MODE and CNF bit to 0010
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	78fa      	ldrb	r2, [r7, #3]
 8000700:	0092      	lsls	r2, r2, #2
 8000702:	2102      	movs	r1, #2
 8000704:	fa01 f202 	lsl.w	r2, r1, r2
 8000708:	431a      	orrs	r2, r3
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	601a      	str	r2, [r3, #0]
	{
		pin -= 8;
		gpio->CRH &= ~(0xF << (pin*4));
		gpio->CRH |= (0x2 << (pin*4));
	}
}
 800070e:	e01a      	b.n	8000746 <GPIO_init_output+0xca>
	else if(pin >= 8)
 8000710:	78fb      	ldrb	r3, [r7, #3]
 8000712:	2b07      	cmp	r3, #7
 8000714:	d917      	bls.n	8000746 <GPIO_init_output+0xca>
		pin -= 8;
 8000716:	78fb      	ldrb	r3, [r7, #3]
 8000718:	3b08      	subs	r3, #8
 800071a:	70fb      	strb	r3, [r7, #3]
		gpio->CRH &= ~(0xF << (pin*4));
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	685b      	ldr	r3, [r3, #4]
 8000720:	78fa      	ldrb	r2, [r7, #3]
 8000722:	0092      	lsls	r2, r2, #2
 8000724:	210f      	movs	r1, #15
 8000726:	fa01 f202 	lsl.w	r2, r1, r2
 800072a:	43d2      	mvns	r2, r2
 800072c:	401a      	ands	r2, r3
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	605a      	str	r2, [r3, #4]
		gpio->CRH |= (0x2 << (pin*4));
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	685b      	ldr	r3, [r3, #4]
 8000736:	78fa      	ldrb	r2, [r7, #3]
 8000738:	0092      	lsls	r2, r2, #2
 800073a:	2102      	movs	r1, #2
 800073c:	fa01 f202 	lsl.w	r2, r1, r2
 8000740:	431a      	orrs	r2, r3
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	605a      	str	r2, [r3, #4]
}
 8000746:	bf00      	nop
 8000748:	370c      	adds	r7, #12
 800074a:	46bd      	mov	sp, r7
 800074c:	bc80      	pop	{r7}
 800074e:	4770      	bx	lr
 8000750:	40010800 	.word	0x40010800
 8000754:	40021018 	.word	0x40021018
 8000758:	40010c00 	.word	0x40010c00
 800075c:	40011000 	.word	0x40011000
 8000760:	40011400 	.word	0x40011400

08000764 <GPIO_toggle_pin>:
{
	gpio->BSRR = (1 << (pin + 16));
}

void GPIO_toggle_pin(GPIO_Typedef* gpio, uint8_t pin)
{
 8000764:	b480      	push	{r7}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
 800076c:	460b      	mov	r3, r1
 800076e:	70fb      	strb	r3, [r7, #3]
	if(gpio->ODR & (1 << pin))
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	68db      	ldr	r3, [r3, #12]
 8000774:	78fa      	ldrb	r2, [r7, #3]
 8000776:	2101      	movs	r1, #1
 8000778:	fa01 f202 	lsl.w	r2, r1, r2
 800077c:	4013      	ands	r3, r2
 800077e:	2b00      	cmp	r3, #0
 8000780:	d008      	beq.n	8000794 <GPIO_toggle_pin+0x30>
	{
		gpio->BSRR = (1 << (pin + 16));
 8000782:	78fb      	ldrb	r3, [r7, #3]
 8000784:	3310      	adds	r3, #16
 8000786:	2201      	movs	r2, #1
 8000788:	fa02 f303 	lsl.w	r3, r2, r3
 800078c:	461a      	mov	r2, r3
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	611a      	str	r2, [r3, #16]
	}
	else
	{
		gpio->BSRR = (1 << pin);
	}
}
 8000792:	e006      	b.n	80007a2 <GPIO_toggle_pin+0x3e>
		gpio->BSRR = (1 << pin);
 8000794:	78fb      	ldrb	r3, [r7, #3]
 8000796:	2201      	movs	r2, #1
 8000798:	fa02 f303 	lsl.w	r3, r2, r3
 800079c:	461a      	mov	r2, r3
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	611a      	str	r2, [r3, #16]
}
 80007a2:	bf00      	nop
 80007a4:	370c      	adds	r7, #12
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bc80      	pop	{r7}
 80007aa:	4770      	bx	lr

080007ac <main>:
void goto_app();

void setup_boot_pin(void);

int main(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
	RCC_Config_HSI_8MHz();
 80007b2:	f7ff fe69 	bl	8000488 <RCC_Config_HSI_8MHz>
	// Khởi tạo PC13
	GPIO_init_output(GPIOC, 13);
 80007b6:	210d      	movs	r1, #13
 80007b8:	4829      	ldr	r0, [pc, #164]	@ (8000860 <main+0xb4>)
 80007ba:	f7ff ff5f 	bl	800067c <GPIO_init_output>
	// Khởi tạo gpio
	UART1_gpio_init();
 80007be:	f7ff ff15 	bl	80005ec <UART1_gpio_init>
	// Khởi tạo ringbuffer
	Ringbuffer_init(&ringbuffer);
 80007c2:	4828      	ldr	r0, [pc, #160]	@ (8000864 <main+0xb8>)
 80007c4:	f7ff ff00 	bl	80005c8 <Ringbuffer_init>
	// bật baud, ngắt nvic table
	USART1_RX_Int_init();
 80007c8:	f7ff fd80 	bl	80002cc <USART1_RX_Int_init>

	setup_boot_pin();
 80007cc:	f000 f874 	bl	80008b8 <setup_boot_pin>

	uint8_t data;
	uint8_t tmp_data;
	uint8_t has_tmp_data = 0;
 80007d0:	2300      	movs	r3, #0
 80007d2:	71bb      	strb	r3, [r7, #6]
	while(1)
	{
		if((GPIOA->IDR & (1 << 5)) == 0)
 80007d4:	4b24      	ldr	r3, [pc, #144]	@ (8000868 <main+0xbc>)
 80007d6:	689b      	ldr	r3, [r3, #8]
 80007d8:	f003 0320 	and.w	r3, r3, #32
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d13b      	bne.n	8000858 <main+0xac>
		{
			if(Ringbuffer_get(&ringbuffer, &data))
 80007e0:	1cfb      	adds	r3, r7, #3
 80007e2:	4619      	mov	r1, r3
 80007e4:	481f      	ldr	r0, [pc, #124]	@ (8000864 <main+0xb8>)
 80007e6:	f7ff febe 	bl	8000566 <Ringbuffer_get>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d0f1      	beq.n	80007d4 <main+0x28>
			{
				if(is_first_write == 1)
 80007f0:	4b1e      	ldr	r3, [pc, #120]	@ (800086c <main+0xc0>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	2b01      	cmp	r3, #1
 80007f6:	d10b      	bne.n	8000810 <main+0x64>
				{
					// Xóa 3 page (3kb) mỗi kb ~ 0x400
					Flash_EraseOnePage(0x08002000);
 80007f8:	481d      	ldr	r0, [pc, #116]	@ (8000870 <main+0xc4>)
 80007fa:	f7ff fcf9 	bl	80001f0 <Flash_EraseOnePage>
					Flash_EraseOnePage(0x08002400);
 80007fe:	481d      	ldr	r0, [pc, #116]	@ (8000874 <main+0xc8>)
 8000800:	f7ff fcf6 	bl	80001f0 <Flash_EraseOnePage>
					Flash_EraseOnePage(0x08002800);
 8000804:	481c      	ldr	r0, [pc, #112]	@ (8000878 <main+0xcc>)
 8000806:	f7ff fcf3 	bl	80001f0 <Flash_EraseOnePage>
					is_first_write = 0;
 800080a:	4b18      	ldr	r3, [pc, #96]	@ (800086c <main+0xc0>)
 800080c:	2200      	movs	r2, #0
 800080e:	701a      	strb	r2, [r3, #0]
				}
				if(!has_tmp_data)
 8000810:	79bb      	ldrb	r3, [r7, #6]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d104      	bne.n	8000820 <main+0x74>
				{
					tmp_data = data;
 8000816:	78fb      	ldrb	r3, [r7, #3]
 8000818:	71fb      	strb	r3, [r7, #7]
					has_tmp_data = 1;
 800081a:	2301      	movs	r3, #1
 800081c:	71bb      	strb	r3, [r7, #6]
 800081e:	e7d9      	b.n	80007d4 <main+0x28>
				}
				else
				{
					// Ghép temp_data và data thành 16bit
					uint16_t halfword = ((uint16_t)data << 8) | tmp_data;
 8000820:	78fb      	ldrb	r3, [r7, #3]
 8000822:	b21b      	sxth	r3, r3
 8000824:	021b      	lsls	r3, r3, #8
 8000826:	b21a      	sxth	r2, r3
 8000828:	79fb      	ldrb	r3, [r7, #7]
 800082a:	b21b      	sxth	r3, r3
 800082c:	4313      	orrs	r3, r2
 800082e:	b21b      	sxth	r3, r3
 8000830:	80bb      	strh	r3, [r7, #4]
					Flash_WriteHalfWord(current_flash_address, halfword);
 8000832:	4b12      	ldr	r3, [pc, #72]	@ (800087c <main+0xd0>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	88ba      	ldrh	r2, [r7, #4]
 8000838:	4611      	mov	r1, r2
 800083a:	4618      	mov	r0, r3
 800083c:	f7ff fc98 	bl	8000170 <Flash_WriteHalfWord>
					current_flash_address += 2;
 8000840:	4b0e      	ldr	r3, [pc, #56]	@ (800087c <main+0xd0>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	3302      	adds	r3, #2
 8000846:	4a0d      	ldr	r2, [pc, #52]	@ (800087c <main+0xd0>)
 8000848:	6013      	str	r3, [r2, #0]
					has_tmp_data = 0;
 800084a:	2300      	movs	r3, #0
 800084c:	71bb      	strb	r3, [r7, #6]
					GPIO_toggle_pin(GPIOC, 13);
 800084e:	210d      	movs	r1, #13
 8000850:	4803      	ldr	r0, [pc, #12]	@ (8000860 <main+0xb4>)
 8000852:	f7ff ff87 	bl	8000764 <GPIO_toggle_pin>
 8000856:	e7bd      	b.n	80007d4 <main+0x28>
				}
			}
		}
		else
		{
			goto_app();
 8000858:	f000 f812 	bl	8000880 <goto_app>
		if((GPIOA->IDR & (1 << 5)) == 0)
 800085c:	e7ba      	b.n	80007d4 <main+0x28>
 800085e:	bf00      	nop
 8000860:	40011000 	.word	0x40011000
 8000864:	20000024 	.word	0x20000024
 8000868:	40010800 	.word	0x40010800
 800086c:	20000000 	.word	0x20000000
 8000870:	08002000 	.word	0x08002000
 8000874:	08002400 	.word	0x08002400
 8000878:	08002800 	.word	0x08002800
 800087c:	20000004 	.word	0x20000004

08000880 <goto_app>:
	}
}


void goto_app()
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b084      	sub	sp, #16
 8000884:	af00      	add	r7, sp, #0
	// Lấy địa chỉ msp của app
	uint32_t app_msp = *(volatile uint32_t*)(app_start_address);
 8000886:	4b09      	ldr	r3, [pc, #36]	@ (80008ac <goto_app+0x2c>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	60fb      	str	r3, [r7, #12]
	// Lấy địa chỉ resethandler của app
	uint32_t app_rshandler = *(volatile uint32_t*)(app_start_address + 4);
 800088c:	4b08      	ldr	r3, [pc, #32]	@ (80008b0 <goto_app+0x30>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	60bb      	str	r3, [r7, #8]
	// Set msp hiện hành thành msp của app
	__asm volatile ("msr msp, %0" : : "r" (app_msp) : );
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	f383 8808 	msr	MSP, r3
	// Set lại offset vector table của app
	*(uint32_t*)0xE000ED08 = app_start_address;
 8000898:	4b06      	ldr	r3, [pc, #24]	@ (80008b4 <goto_app+0x34>)
 800089a:	4a04      	ldr	r2, [pc, #16]	@ (80008ac <goto_app+0x2c>)
 800089c:	601a      	str	r2, [r3, #0]
	appfuncpointer app_pointer = (appfuncpointer)app_rshandler;
 800089e:	68bb      	ldr	r3, [r7, #8]
 80008a0:	607b      	str	r3, [r7, #4]
	app_pointer();
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	4798      	blx	r3
	while(1);
 80008a6:	bf00      	nop
 80008a8:	e7fd      	b.n	80008a6 <goto_app+0x26>
 80008aa:	bf00      	nop
 80008ac:	08002000 	.word	0x08002000
 80008b0:	08002004 	.word	0x08002004
 80008b4:	e000ed08 	.word	0xe000ed08

080008b8 <setup_boot_pin>:
}

void setup_boot_pin(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
	// Port A RCC enable
	RCC_APB2ENR |= (1 << 2);
 80008bc:	4b0d      	ldr	r3, [pc, #52]	@ (80008f4 <setup_boot_pin+0x3c>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a0c      	ldr	r2, [pc, #48]	@ (80008f4 <setup_boot_pin+0x3c>)
 80008c2:	f043 0304 	orr.w	r3, r3, #4
 80008c6:	6013      	str	r3, [r2, #0]
	// Set input
	GPIOA->CRL &= ~(0xF << 20);
 80008c8:	4b0b      	ldr	r3, [pc, #44]	@ (80008f8 <setup_boot_pin+0x40>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a0a      	ldr	r2, [pc, #40]	@ (80008f8 <setup_boot_pin+0x40>)
 80008ce:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80008d2:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (0b1000 << 20);
 80008d4:	4b08      	ldr	r3, [pc, #32]	@ (80008f8 <setup_boot_pin+0x40>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a07      	ldr	r2, [pc, #28]	@ (80008f8 <setup_boot_pin+0x40>)
 80008da:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80008de:	6013      	str	r3, [r2, #0]
	// Set pullup
	GPIOA->ODR |= (1 << 5);
 80008e0:	4b05      	ldr	r3, [pc, #20]	@ (80008f8 <setup_boot_pin+0x40>)
 80008e2:	68db      	ldr	r3, [r3, #12]
 80008e4:	4a04      	ldr	r2, [pc, #16]	@ (80008f8 <setup_boot_pin+0x40>)
 80008e6:	f043 0320 	orr.w	r3, r3, #32
 80008ea:	60d3      	str	r3, [r2, #12]
}
 80008ec:	bf00      	nop
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bc80      	pop	{r7}
 80008f2:	4770      	bx	lr
 80008f4:	40021018 	.word	0x40021018
 80008f8:	40010800 	.word	0x40010800

080008fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008fc:	480d      	ldr	r0, [pc, #52]	@ (8000934 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008fe:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000900:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000904:	480c      	ldr	r0, [pc, #48]	@ (8000938 <LoopForever+0x6>)
  ldr r1, =_edata
 8000906:	490d      	ldr	r1, [pc, #52]	@ (800093c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000908:	4a0d      	ldr	r2, [pc, #52]	@ (8000940 <LoopForever+0xe>)
  movs r3, #0
 800090a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800090c:	e002      	b.n	8000914 <LoopCopyDataInit>

0800090e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800090e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000910:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000912:	3304      	adds	r3, #4

08000914 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000914:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000916:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000918:	d3f9      	bcc.n	800090e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800091a:	4a0a      	ldr	r2, [pc, #40]	@ (8000944 <LoopForever+0x12>)
  ldr r4, =_ebss
 800091c:	4c0a      	ldr	r4, [pc, #40]	@ (8000948 <LoopForever+0x16>)
  movs r3, #0
 800091e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000920:	e001      	b.n	8000926 <LoopFillZerobss>

08000922 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000922:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000924:	3204      	adds	r2, #4

08000926 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000926:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000928:	d3fb      	bcc.n	8000922 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800092a:	f000 f811 	bl	8000950 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800092e:	f7ff ff3d 	bl	80007ac <main>

08000932 <LoopForever>:

LoopForever:
  b LoopForever
 8000932:	e7fe      	b.n	8000932 <LoopForever>
  ldr   r0, =_estack
 8000934:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000938:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800093c:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8000940:	080009b8 	.word	0x080009b8
  ldr r2, =_sbss
 8000944:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8000948:	20000428 	.word	0x20000428

0800094c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800094c:	e7fe      	b.n	800094c <ADC1_2_IRQHandler>
	...

08000950 <__libc_init_array>:
 8000950:	b570      	push	{r4, r5, r6, lr}
 8000952:	2600      	movs	r6, #0
 8000954:	4d0c      	ldr	r5, [pc, #48]	@ (8000988 <__libc_init_array+0x38>)
 8000956:	4c0d      	ldr	r4, [pc, #52]	@ (800098c <__libc_init_array+0x3c>)
 8000958:	1b64      	subs	r4, r4, r5
 800095a:	10a4      	asrs	r4, r4, #2
 800095c:	42a6      	cmp	r6, r4
 800095e:	d109      	bne.n	8000974 <__libc_init_array+0x24>
 8000960:	f000 f81a 	bl	8000998 <_init>
 8000964:	2600      	movs	r6, #0
 8000966:	4d0a      	ldr	r5, [pc, #40]	@ (8000990 <__libc_init_array+0x40>)
 8000968:	4c0a      	ldr	r4, [pc, #40]	@ (8000994 <__libc_init_array+0x44>)
 800096a:	1b64      	subs	r4, r4, r5
 800096c:	10a4      	asrs	r4, r4, #2
 800096e:	42a6      	cmp	r6, r4
 8000970:	d105      	bne.n	800097e <__libc_init_array+0x2e>
 8000972:	bd70      	pop	{r4, r5, r6, pc}
 8000974:	f855 3b04 	ldr.w	r3, [r5], #4
 8000978:	4798      	blx	r3
 800097a:	3601      	adds	r6, #1
 800097c:	e7ee      	b.n	800095c <__libc_init_array+0xc>
 800097e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000982:	4798      	blx	r3
 8000984:	3601      	adds	r6, #1
 8000986:	e7f2      	b.n	800096e <__libc_init_array+0x1e>
 8000988:	080009b0 	.word	0x080009b0
 800098c:	080009b0 	.word	0x080009b0
 8000990:	080009b0 	.word	0x080009b0
 8000994:	080009b4 	.word	0x080009b4

08000998 <_init>:
 8000998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800099a:	bf00      	nop
 800099c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800099e:	bc08      	pop	{r3}
 80009a0:	469e      	mov	lr, r3
 80009a2:	4770      	bx	lr

080009a4 <_fini>:
 80009a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009a6:	bf00      	nop
 80009a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009aa:	bc08      	pop	{r3}
 80009ac:	469e      	mov	lr, r3
 80009ae:	4770      	bx	lr
